/**
 * @fileoverview gRPC-Web generated client stub for DeptSvc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: mes/Dept.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js')

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js')

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.DeptSvc = require('./Dept_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DeptSvc.DeptClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DeptSvc.DeptPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.GetForExpenseAccountRequest,
 *   !proto.DeptSvc.DeptSetResponse>}
 */
const methodDescriptor_Dept_GetForExpenseAccount = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetForExpenseAccount',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.GetForExpenseAccountRequest,
  proto.DeptSvc.DeptSetResponse,
  /**
   * @param {!proto.DeptSvc.GetForExpenseAccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptSetResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.GetForExpenseAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptSetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptSetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getForExpenseAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetForExpenseAccount',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForExpenseAccount,
      callback);
};


/**
 * @param {!proto.DeptSvc.GetForExpenseAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptSetResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getForExpenseAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetForExpenseAccount',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForExpenseAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.GetForExpenseAccountRequest,
 *   !proto.DeptSvc.DeptSetResponse>}
 */
const methodDescriptor_Dept_GetForExpenseAccountJson = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetForExpenseAccountJson',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.GetForExpenseAccountRequest,
  proto.DeptSvc.DeptSetResponse,
  /**
   * @param {!proto.DeptSvc.GetForExpenseAccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptSetResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.GetForExpenseAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptSetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptSetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getForExpenseAccountJson =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetForExpenseAccountJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForExpenseAccountJson,
      callback);
};


/**
 * @param {!proto.DeptSvc.GetForExpenseAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptSetResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getForExpenseAccountJson =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetForExpenseAccountJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForExpenseAccountJson);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.GetForBusinessClassRequest,
 *   !proto.DeptSvc.DeptSetResponse>}
 */
const methodDescriptor_Dept_GetForBusinessClass = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetForBusinessClass',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.GetForBusinessClassRequest,
  proto.DeptSvc.DeptSetResponse,
  /**
   * @param {!proto.DeptSvc.GetForBusinessClassRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptSetResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.GetForBusinessClassRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptSetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptSetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getForBusinessClass =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetForBusinessClass',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForBusinessClass,
      callback);
};


/**
 * @param {!proto.DeptSvc.GetForBusinessClassRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptSetResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getForBusinessClass =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetForBusinessClass',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForBusinessClass);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.GetForBusinessClassRequest,
 *   !proto.DeptSvc.DeptSetResponse>}
 */
const methodDescriptor_Dept_GetForBusinessClassJson = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetForBusinessClassJson',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.GetForBusinessClassRequest,
  proto.DeptSvc.DeptSetResponse,
  /**
   * @param {!proto.DeptSvc.GetForBusinessClassRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptSetResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.GetForBusinessClassRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptSetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptSetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getForBusinessClassJson =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetForBusinessClassJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForBusinessClassJson,
      callback);
};


/**
 * @param {!proto.DeptSvc.GetForBusinessClassRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptSetResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getForBusinessClassJson =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetForBusinessClassJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetForBusinessClassJson);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.GetByKeyRequest,
 *   !proto.DeptSvc.DeptResponse>}
 */
const methodDescriptor_Dept_GetByKey = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetByKey',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.GetByKeyRequest,
  proto.DeptSvc.DeptResponse,
  /**
   * @param {!proto.DeptSvc.GetByKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.GetByKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getByKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetByKey',
      request,
      metadata || {},
      methodDescriptor_Dept_GetByKey,
      callback);
};


/**
 * @param {!proto.DeptSvc.GetByKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getByKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetByKey',
      request,
      metadata || {},
      methodDescriptor_Dept_GetByKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.GetByKeyRequest,
 *   !proto.DeptSvc.DeptResponse>}
 */
const methodDescriptor_Dept_GetByKeyJson = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetByKeyJson',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.GetByKeyRequest,
  proto.DeptSvc.DeptResponse,
  /**
   * @param {!proto.DeptSvc.GetByKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.GetByKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getByKeyJson =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetByKeyJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetByKeyJson,
      callback);
};


/**
 * @param {!proto.DeptSvc.GetByKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getByKeyJson =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetByKeyJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetByKeyJson);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.DeptSvc.DeptSetResponse>}
 */
const methodDescriptor_Dept_GetAll = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetAll',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.DeptSvc.DeptSetResponse,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptSetResponse.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptSetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptSetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetAll',
      request,
      metadata || {},
      methodDescriptor_Dept_GetAll,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptSetResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetAll',
      request,
      metadata || {},
      methodDescriptor_Dept_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.DeptSvc.DeptSetResponse>}
 */
const methodDescriptor_Dept_GetAllJson = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/GetAllJson',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.DeptSvc.DeptSetResponse,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptSetResponse.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptSetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptSetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.getAllJson =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/GetAllJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetAllJson,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptSetResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.getAllJson =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/GetAllJson',
      request,
      metadata || {},
      methodDescriptor_Dept_GetAllJson);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.InsertRequest,
 *   !proto.DeptSvc.DeptResponse>}
 */
const methodDescriptor_Dept_Insert = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/Insert',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.InsertRequest,
  proto.DeptSvc.DeptResponse,
  /**
   * @param {!proto.DeptSvc.InsertRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.InsertRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.insert =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/Insert',
      request,
      metadata || {},
      methodDescriptor_Dept_Insert,
      callback);
};


/**
 * @param {!proto.DeptSvc.InsertRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.insert =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/Insert',
      request,
      metadata || {},
      methodDescriptor_Dept_Insert);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.InsertRequest,
 *   !proto.DeptSvc.DeptResponse>}
 */
const methodDescriptor_Dept_InsertJson = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/InsertJson',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.InsertRequest,
  proto.DeptSvc.DeptResponse,
  /**
   * @param {!proto.DeptSvc.InsertRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeptResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.InsertRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeptResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeptResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.insertJson =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/InsertJson',
      request,
      metadata || {},
      methodDescriptor_Dept_InsertJson,
      callback);
};


/**
 * @param {!proto.DeptSvc.InsertRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeptResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.insertJson =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/InsertJson',
      request,
      metadata || {},
      methodDescriptor_Dept_InsertJson);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.UpdateRequest,
 *   !proto.DeptSvc.UpdateResponse>}
 */
const methodDescriptor_Dept_Update = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/Update',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.UpdateRequest,
  proto.DeptSvc.UpdateResponse,
  /**
   * @param {!proto.DeptSvc.UpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.UpdateResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.UpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.UpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.UpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/Update',
      request,
      metadata || {},
      methodDescriptor_Dept_Update,
      callback);
};


/**
 * @param {!proto.DeptSvc.UpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.UpdateResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/Update',
      request,
      metadata || {},
      methodDescriptor_Dept_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeptSvc.DeleteRequest,
 *   !proto.DeptSvc.DeleteResponse>}
 */
const methodDescriptor_Dept_Delete = new grpc.web.MethodDescriptor(
  '/DeptSvc.Dept/Delete',
  grpc.web.MethodType.UNARY,
  proto.DeptSvc.DeleteRequest,
  proto.DeptSvc.DeleteResponse,
  /**
   * @param {!proto.DeptSvc.DeleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DeptSvc.DeleteResponse.deserializeBinary
);


/**
 * @param {!proto.DeptSvc.DeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DeptSvc.DeleteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DeptSvc.DeleteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DeptSvc.DeptClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DeptSvc.Dept/Delete',
      request,
      metadata || {},
      methodDescriptor_Dept_Delete,
      callback);
};


/**
 * @param {!proto.DeptSvc.DeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DeptSvc.DeleteResponse>}
 *     Promise that resolves to the response
 */
proto.DeptSvc.DeptPromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DeptSvc.Dept/Delete',
      request,
      metadata || {},
      methodDescriptor_Dept_Delete);
};


module.exports = proto.DeptSvc;

