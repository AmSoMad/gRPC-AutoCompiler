// source: mes/Dept.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.DeptSvc.DataSetResponse', null, global);
goog.exportSymbol('proto.DeptSvc.DeleteRequest', null, global);
goog.exportSymbol('proto.DeptSvc.DeleteResponse', null, global);
goog.exportSymbol('proto.DeptSvc.DeptResponse', null, global);
goog.exportSymbol('proto.DeptSvc.DeptSetResponse', null, global);
goog.exportSymbol('proto.DeptSvc.GetByKeyRequest', null, global);
goog.exportSymbol('proto.DeptSvc.GetForBusinessClassRequest', null, global);
goog.exportSymbol('proto.DeptSvc.GetForExpenseAccountRequest', null, global);
goog.exportSymbol('proto.DeptSvc.GrpcDecimal', null, global);
goog.exportSymbol('proto.DeptSvc.InsertRequest', null, global);
goog.exportSymbol('proto.DeptSvc.UpdateRequest', null, global);
goog.exportSymbol('proto.DeptSvc.UpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.GrpcDecimal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.GrpcDecimal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.GrpcDecimal.displayName = 'proto.DeptSvc.GrpcDecimal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.DeptResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.DeptResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.DeptResponse.displayName = 'proto.DeptSvc.DeptResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.DeptSetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.DeptSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.DeptSetResponse.displayName = 'proto.DeptSvc.DeptSetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.DataSetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.DataSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.DataSetResponse.displayName = 'proto.DeptSvc.DataSetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.GetForExpenseAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.GetForExpenseAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.GetForExpenseAccountRequest.displayName = 'proto.DeptSvc.GetForExpenseAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.GetForBusinessClassRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.GetForBusinessClassRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.GetForBusinessClassRequest.displayName = 'proto.DeptSvc.GetForBusinessClassRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.GetByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.GetByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.GetByKeyRequest.displayName = 'proto.DeptSvc.GetByKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.InsertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.InsertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.InsertRequest.displayName = 'proto.DeptSvc.InsertRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.UpdateRequest.displayName = 'proto.DeptSvc.UpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.UpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.UpdateResponse.displayName = 'proto.DeptSvc.UpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.DeleteRequest.displayName = 'proto.DeptSvc.DeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeptSvc.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeptSvc.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeptSvc.DeleteResponse.displayName = 'proto.DeptSvc.DeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.GrpcDecimal.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.GrpcDecimal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.GrpcDecimal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GrpcDecimal.toObject = function(includeInstance, msg) {
  var f, obj = {
    units: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.GrpcDecimal}
 */
proto.DeptSvc.GrpcDecimal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.GrpcDecimal;
  return proto.DeptSvc.GrpcDecimal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.GrpcDecimal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.GrpcDecimal}
 */
proto.DeptSvc.GrpcDecimal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnits(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.GrpcDecimal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.GrpcDecimal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.GrpcDecimal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GrpcDecimal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnits();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNanos();
  if (f !== 0) {
    writer.writeSfixed32(
      2,
      f
    );
  }
};


/**
 * optional int64 units = 1;
 * @return {number}
 */
proto.DeptSvc.GrpcDecimal.prototype.getUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.GrpcDecimal} returns this
 */
proto.DeptSvc.GrpcDecimal.prototype.setUnits = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sfixed32 nanos = 2;
 * @return {number}
 */
proto.DeptSvc.GrpcDecimal.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.GrpcDecimal} returns this
 */
proto.DeptSvc.GrpcDecimal.prototype.setNanos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.DeptResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.DeptResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.DeptResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeptResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dept: msg.getDept_asB64(),
    jsonstring: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.DeptResponse}
 */
proto.DeptSvc.DeptResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.DeptResponse;
  return proto.DeptSvc.DeptResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.DeptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.DeptResponse}
 */
proto.DeptSvc.DeptResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDept(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.DeptResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.DeptResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.DeptResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeptResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDept_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getJsonstring();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes dept = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DeptSvc.DeptResponse.prototype.getDept = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dept = 1;
 * This is a type-conversion wrapper around `getDept()`
 * @return {string}
 */
proto.DeptSvc.DeptResponse.prototype.getDept_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDept()));
};


/**
 * optional bytes dept = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDept()`
 * @return {!Uint8Array}
 */
proto.DeptSvc.DeptResponse.prototype.getDept_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDept()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DeptSvc.DeptResponse} returns this
 */
proto.DeptSvc.DeptResponse.prototype.setDept = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string jsonString = 2;
 * @return {string}
 */
proto.DeptSvc.DeptResponse.prototype.getJsonstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeptSvc.DeptResponse} returns this
 */
proto.DeptSvc.DeptResponse.prototype.setJsonstring = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.DeptSetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.DeptSetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.DeptSetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeptSetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deptset: msg.getDeptset_asB64(),
    jsonstring: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.DeptSetResponse}
 */
proto.DeptSvc.DeptSetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.DeptSetResponse;
  return proto.DeptSvc.DeptSetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.DeptSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.DeptSetResponse}
 */
proto.DeptSvc.DeptSetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeptset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.DeptSetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.DeptSetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.DeptSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeptSetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeptset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getJsonstring();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes deptSet = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DeptSvc.DeptSetResponse.prototype.getDeptset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deptSet = 1;
 * This is a type-conversion wrapper around `getDeptset()`
 * @return {string}
 */
proto.DeptSvc.DeptSetResponse.prototype.getDeptset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeptset()));
};


/**
 * optional bytes deptSet = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeptset()`
 * @return {!Uint8Array}
 */
proto.DeptSvc.DeptSetResponse.prototype.getDeptset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeptset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DeptSvc.DeptSetResponse} returns this
 */
proto.DeptSvc.DeptSetResponse.prototype.setDeptset = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string jsonString = 2;
 * @return {string}
 */
proto.DeptSvc.DeptSetResponse.prototype.getJsonstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeptSvc.DeptSetResponse} returns this
 */
proto.DeptSvc.DeptSetResponse.prototype.setJsonstring = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.DataSetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.DataSetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.DataSetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DataSetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: msg.getDataset_asB64(),
    jsonstring: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.DataSetResponse}
 */
proto.DeptSvc.DataSetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.DataSetResponse;
  return proto.DeptSvc.DataSetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.DataSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.DataSetResponse}
 */
proto.DeptSvc.DataSetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.DataSetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.DataSetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.DataSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DataSetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getJsonstring();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes dataSet = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DeptSvc.DataSetResponse.prototype.getDataset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dataSet = 1;
 * This is a type-conversion wrapper around `getDataset()`
 * @return {string}
 */
proto.DeptSvc.DataSetResponse.prototype.getDataset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataset()));
};


/**
 * optional bytes dataSet = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataset()`
 * @return {!Uint8Array}
 */
proto.DeptSvc.DataSetResponse.prototype.getDataset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DeptSvc.DataSetResponse} returns this
 */
proto.DeptSvc.DataSetResponse.prototype.setDataset = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string jsonString = 2;
 * @return {string}
 */
proto.DeptSvc.DataSetResponse.prototype.getJsonstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeptSvc.DataSetResponse} returns this
 */
proto.DeptSvc.DataSetResponse.prototype.setJsonstring = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.GetForExpenseAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.GetForExpenseAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.GetForExpenseAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GetForExpenseAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    expensecode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.GetForExpenseAccountRequest}
 */
proto.DeptSvc.GetForExpenseAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.GetForExpenseAccountRequest;
  return proto.DeptSvc.GetForExpenseAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.GetForExpenseAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.GetForExpenseAccountRequest}
 */
proto.DeptSvc.GetForExpenseAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setExpensecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.GetForExpenseAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.GetForExpenseAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.GetForExpenseAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GetForExpenseAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpensecode();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 expenseCode = 1;
 * @return {number}
 */
proto.DeptSvc.GetForExpenseAccountRequest.prototype.getExpensecode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.GetForExpenseAccountRequest} returns this
 */
proto.DeptSvc.GetForExpenseAccountRequest.prototype.setExpensecode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.GetForBusinessClassRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.GetForBusinessClassRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.GetForBusinessClassRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GetForBusinessClassRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    businessclasscode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.GetForBusinessClassRequest}
 */
proto.DeptSvc.GetForBusinessClassRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.GetForBusinessClassRequest;
  return proto.DeptSvc.GetForBusinessClassRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.GetForBusinessClassRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.GetForBusinessClassRequest}
 */
proto.DeptSvc.GetForBusinessClassRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setBusinessclasscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.GetForBusinessClassRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.GetForBusinessClassRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.GetForBusinessClassRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GetForBusinessClassRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessclasscode();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 businessClassCode = 1;
 * @return {number}
 */
proto.DeptSvc.GetForBusinessClassRequest.prototype.getBusinessclasscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.GetForBusinessClassRequest} returns this
 */
proto.DeptSvc.GetForBusinessClassRequest.prototype.setBusinessclasscode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.GetByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.GetByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.GetByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GetByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deptcode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.GetByKeyRequest}
 */
proto.DeptSvc.GetByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.GetByKeyRequest;
  return proto.DeptSvc.GetByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.GetByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.GetByKeyRequest}
 */
proto.DeptSvc.GetByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDeptcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.GetByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.GetByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.GetByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.GetByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeptcode();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 deptCode = 1;
 * @return {number}
 */
proto.DeptSvc.GetByKeyRequest.prototype.getDeptcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.GetByKeyRequest} returns this
 */
proto.DeptSvc.GetByKeyRequest.prototype.setDeptcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.InsertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.InsertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.InsertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.InsertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deptcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    expensecode: (f = msg.getExpensecode()) && google_protobuf_wrappers_pb.Int32Value.toObject(includeInstance, f),
    codename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parent: jspb.Message.getFieldWithDefault(msg, 4, 0),
    child: jspb.Message.getFieldWithDefault(msg, 5, 0),
    levelno: jspb.Message.getFieldWithDefault(msg, 6, 0),
    businessclasscode: (f = msg.getBusinessclasscode()) && google_protobuf_wrappers_pb.Int32Value.toObject(includeInstance, f),
    deptlevel: jspb.Message.getFieldWithDefault(msg, 8, 0),
    useflag: jspb.Message.getFieldWithDefault(msg, 9, 0),
    items: jspb.Message.getFieldWithDefault(msg, 10, 0),
    companycode: jspb.Message.getFieldWithDefault(msg, 11, 0),
    budgetflag: jspb.Message.getFieldWithDefault(msg, 12, 0),
    linkcode: (f = msg.getLinkcode()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    taxflag: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.InsertRequest}
 */
proto.DeptSvc.InsertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.InsertRequest;
  return proto.DeptSvc.InsertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.InsertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.InsertRequest}
 */
proto.DeptSvc.InsertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDeptcode(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.Int32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int32Value.deserializeBinaryFromReader);
      msg.setExpensecode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setParent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setChild(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLevelno(value);
      break;
    case 7:
      var value = new google_protobuf_wrappers_pb.Int32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int32Value.deserializeBinaryFromReader);
      msg.setBusinessclasscode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDeptlevel(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setUseflag(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setItems(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCompanycode(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setBudgetflag(value);
      break;
    case 13:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setLinkcode(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTaxflag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.InsertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.InsertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.InsertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.InsertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeptcode();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getExpensecode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getCodename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParent();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getChild();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getLevelno();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getBusinessclasscode();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_wrappers_pb.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getDeptlevel();
  if (f !== 0) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = message.getUseflag();
  if (f !== 0) {
    writer.writeSint32(
      9,
      f
    );
  }
  f = message.getItems();
  if (f !== 0) {
    writer.writeSint32(
      10,
      f
    );
  }
  f = message.getCompanycode();
  if (f !== 0) {
    writer.writeSint32(
      11,
      f
    );
  }
  f = message.getBudgetflag();
  if (f !== 0) {
    writer.writeSint32(
      12,
      f
    );
  }
  f = message.getLinkcode();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getTaxflag();
  if (f !== 0) {
    writer.writeSint32(
      14,
      f
    );
  }
};


/**
 * optional sint32 deptCode = 1;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getDeptcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setDeptcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Int32Value expenseCode = 2;
 * @return {?proto.google.protobuf.Int32Value}
 */
proto.DeptSvc.InsertRequest.prototype.getExpensecode = function() {
  return /** @type{?proto.google.protobuf.Int32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int32Value, 2));
};


/**
 * @param {?proto.google.protobuf.Int32Value|undefined} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
*/
proto.DeptSvc.InsertRequest.prototype.setExpensecode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.clearExpensecode = function() {
  return this.setExpensecode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeptSvc.InsertRequest.prototype.hasExpensecode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string codeName = 3;
 * @return {string}
 */
proto.DeptSvc.InsertRequest.prototype.getCodename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setCodename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint32 parent = 4;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getParent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setParent = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint32 child = 5;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getChild = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setChild = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 levelNo = 6;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getLevelno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setLevelno = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Int32Value businessClassCode = 7;
 * @return {?proto.google.protobuf.Int32Value}
 */
proto.DeptSvc.InsertRequest.prototype.getBusinessclasscode = function() {
  return /** @type{?proto.google.protobuf.Int32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int32Value, 7));
};


/**
 * @param {?proto.google.protobuf.Int32Value|undefined} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
*/
proto.DeptSvc.InsertRequest.prototype.setBusinessclasscode = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.clearBusinessclasscode = function() {
  return this.setBusinessclasscode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeptSvc.InsertRequest.prototype.hasBusinessclasscode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional sint32 deptLevel = 8;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getDeptlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setDeptlevel = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional sint32 useFlag = 9;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getUseflag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setUseflag = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional sint32 items = 10;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setItems = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional sint32 companyCode = 11;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getCompanycode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setCompanycode = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional sint32 budgetFlag = 12;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getBudgetflag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setBudgetflag = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional google.protobuf.StringValue linkCode = 13;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.DeptSvc.InsertRequest.prototype.getLinkcode = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 13));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
*/
proto.DeptSvc.InsertRequest.prototype.setLinkcode = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.clearLinkcode = function() {
  return this.setLinkcode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeptSvc.InsertRequest.prototype.hasLinkcode = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional sint32 taxFlag = 14;
 * @return {number}
 */
proto.DeptSvc.InsertRequest.prototype.getTaxflag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.InsertRequest} returns this
 */
proto.DeptSvc.InsertRequest.prototype.setTaxflag = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deptcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    expensecode: (f = msg.getExpensecode()) && google_protobuf_wrappers_pb.Int32Value.toObject(includeInstance, f),
    codename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parent: jspb.Message.getFieldWithDefault(msg, 4, 0),
    child: jspb.Message.getFieldWithDefault(msg, 5, 0),
    levelno: jspb.Message.getFieldWithDefault(msg, 6, 0),
    businessclasscode: (f = msg.getBusinessclasscode()) && google_protobuf_wrappers_pb.Int32Value.toObject(includeInstance, f),
    deptlevel: jspb.Message.getFieldWithDefault(msg, 8, 0),
    useflag: jspb.Message.getFieldWithDefault(msg, 9, 0),
    items: jspb.Message.getFieldWithDefault(msg, 10, 0),
    companycode: jspb.Message.getFieldWithDefault(msg, 11, 0),
    budgetflag: jspb.Message.getFieldWithDefault(msg, 12, 0),
    linkcode: (f = msg.getLinkcode()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    taxflag: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.UpdateRequest}
 */
proto.DeptSvc.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.UpdateRequest;
  return proto.DeptSvc.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.UpdateRequest}
 */
proto.DeptSvc.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDeptcode(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.Int32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int32Value.deserializeBinaryFromReader);
      msg.setExpensecode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setParent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setChild(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLevelno(value);
      break;
    case 7:
      var value = new google_protobuf_wrappers_pb.Int32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int32Value.deserializeBinaryFromReader);
      msg.setBusinessclasscode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDeptlevel(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setUseflag(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setItems(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCompanycode(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setBudgetflag(value);
      break;
    case 13:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setLinkcode(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTaxflag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeptcode();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getExpensecode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getCodename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParent();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getChild();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getLevelno();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getBusinessclasscode();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_wrappers_pb.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getDeptlevel();
  if (f !== 0) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = message.getUseflag();
  if (f !== 0) {
    writer.writeSint32(
      9,
      f
    );
  }
  f = message.getItems();
  if (f !== 0) {
    writer.writeSint32(
      10,
      f
    );
  }
  f = message.getCompanycode();
  if (f !== 0) {
    writer.writeSint32(
      11,
      f
    );
  }
  f = message.getBudgetflag();
  if (f !== 0) {
    writer.writeSint32(
      12,
      f
    );
  }
  f = message.getLinkcode();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getTaxflag();
  if (f !== 0) {
    writer.writeSint32(
      14,
      f
    );
  }
};


/**
 * optional sint32 deptCode = 1;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getDeptcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setDeptcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Int32Value expenseCode = 2;
 * @return {?proto.google.protobuf.Int32Value}
 */
proto.DeptSvc.UpdateRequest.prototype.getExpensecode = function() {
  return /** @type{?proto.google.protobuf.Int32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int32Value, 2));
};


/**
 * @param {?proto.google.protobuf.Int32Value|undefined} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
*/
proto.DeptSvc.UpdateRequest.prototype.setExpensecode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.clearExpensecode = function() {
  return this.setExpensecode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeptSvc.UpdateRequest.prototype.hasExpensecode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string codeName = 3;
 * @return {string}
 */
proto.DeptSvc.UpdateRequest.prototype.getCodename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setCodename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint32 parent = 4;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getParent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setParent = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint32 child = 5;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getChild = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setChild = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 levelNo = 6;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getLevelno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setLevelno = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Int32Value businessClassCode = 7;
 * @return {?proto.google.protobuf.Int32Value}
 */
proto.DeptSvc.UpdateRequest.prototype.getBusinessclasscode = function() {
  return /** @type{?proto.google.protobuf.Int32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int32Value, 7));
};


/**
 * @param {?proto.google.protobuf.Int32Value|undefined} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
*/
proto.DeptSvc.UpdateRequest.prototype.setBusinessclasscode = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.clearBusinessclasscode = function() {
  return this.setBusinessclasscode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeptSvc.UpdateRequest.prototype.hasBusinessclasscode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional sint32 deptLevel = 8;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getDeptlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setDeptlevel = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional sint32 useFlag = 9;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getUseflag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setUseflag = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional sint32 items = 10;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setItems = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional sint32 companyCode = 11;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getCompanycode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setCompanycode = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional sint32 budgetFlag = 12;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getBudgetflag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setBudgetflag = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional google.protobuf.StringValue linkCode = 13;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.DeptSvc.UpdateRequest.prototype.getLinkcode = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 13));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
*/
proto.DeptSvc.UpdateRequest.prototype.setLinkcode = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.clearLinkcode = function() {
  return this.setLinkcode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeptSvc.UpdateRequest.prototype.hasLinkcode = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional sint32 taxFlag = 14;
 * @return {number}
 */
proto.DeptSvc.UpdateRequest.prototype.getTaxflag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateRequest} returns this
 */
proto.DeptSvc.UpdateRequest.prototype.setTaxflag = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.UpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.UpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.UpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.UpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.UpdateResponse}
 */
proto.DeptSvc.UpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.UpdateResponse;
  return proto.DeptSvc.UpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.UpdateResponse}
 */
proto.DeptSvc.UpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.UpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.UpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.UpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.DeptSvc.UpdateResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.UpdateResponse} returns this
 */
proto.DeptSvc.UpdateResponse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deptcode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.DeleteRequest}
 */
proto.DeptSvc.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.DeleteRequest;
  return proto.DeptSvc.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.DeleteRequest}
 */
proto.DeptSvc.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDeptcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeptcode();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 deptCode = 1;
 * @return {number}
 */
proto.DeptSvc.DeleteRequest.prototype.getDeptcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.DeleteRequest} returns this
 */
proto.DeptSvc.DeleteRequest.prototype.setDeptcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeptSvc.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeptSvc.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeptSvc.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeptSvc.DeleteResponse}
 */
proto.DeptSvc.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeptSvc.DeleteResponse;
  return proto.DeptSvc.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeptSvc.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeptSvc.DeleteResponse}
 */
proto.DeptSvc.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeptSvc.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeptSvc.DeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeptSvc.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeptSvc.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.DeptSvc.DeleteResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeptSvc.DeleteResponse} returns this
 */
proto.DeptSvc.DeleteResponse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.DeptSvc);
