// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mes/PartSpecs.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HaccpManager.PartSpecsProtos {

  /// <summary>Holder for reflection information generated from mes/PartSpecs.proto</summary>
  public static partial class PartSpecsReflection {

    #region Descriptor
    /// <summary>File descriptor for mes/PartSpecs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PartSpecsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNtZXMvUGFydFNwZWNzLnByb3RvEgxQYXJ0U3BlY3NTdmMaH2dvb2dsZS9w",
            "cm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi9kdXJh",
            "dGlvbi5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGhtn",
            "b29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8iKwoLR3JwY0RlY2ltYWwSDQoF",
            "dW5pdHMYASABKAMSDQoFbmFub3MYAiABKA8iOgoRUGFydFNwZWNzUmVzcG9u",
            "c2USEQoJcGFydFNwZWNzGAEgASgMEhIKCmpzb25TdHJpbmcYAiABKAkiQAoU",
            "UGFydFNwZWNzU2V0UmVzcG9uc2USFAoMcGFydFNwZWNzU2V0GAEgASgMEhIK",
            "Cmpzb25TdHJpbmcYAiABKAkiNgoPRGF0YVNldFJlc3BvbnNlEg8KB2RhdGFT",
            "ZXQYASABKAwSEgoKanNvblN0cmluZxgCIAEoCSImChJHZXRGb3JQYXJ0c1Jl",
            "cXVlc3QSEAoIcGFydENvZGUYASABKAkiLwoWR2V0Rm9yUGFydEdyb3VwUmVx",
            "dWVzdBIVCg1wYXJ0R3JvdXBDb2RlGAEgASgJIjUKD0dldEJ5S2V5UmVxdWVz",
            "dBIQCghwYXJ0Q29kZRgBIAEoCRIQCghwYXJ0U3BlYxgCIAEoCSKgCwoNSW5z",
            "ZXJ0UmVxdWVzdBIQCghwYXJ0Q29kZRgBIAEoCRIQCghwYXJ0U3BlYxgCIAEo",
            "CRIwCg1sb2dpY2FsV2VpZ2h0GAMgASgLMhkuUGFydFNwZWNzU3ZjLkdycGNE",
            "ZWNpbWFsEi8KDHNjcmFwUGVyY2VudBgEIAEoCzIZLlBhcnRTcGVjc1N2Yy5H",
            "cnBjRGVjaW1hbBILCgNiaW4YBSABKAkSMgoObmV4dEN5Y2xlQ291bnQYBiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhEKCXVuVXNlRmxhZxgH",
            "IAEoERIvCgxzdGFuZGFyZENvc3QYCCABKAsyGS5QYXJ0U3BlY3NTdmMuR3Jw",
            "Y0RlY2ltYWwSLgoLY3VycmVudENvc3QYCSABKAsyGS5QYXJ0U3BlY3NTdmMu",
            "R3JwY0RlY2ltYWwSEAoIcGFydFR5cGUYCiABKAkSLQoKc2FmZXR5UXR5MhgL",
            "IAEoCzIZLlBhcnRTcGVjc1N2Yy5HcnBjRGVjaW1hbBIwCg1yZU9yZGVyTGV2",
            "ZWwyGAwgASgLMhkuUGFydFNwZWNzU3ZjLkdycGNEZWNpbWFsEhEKCXBhcnRO",
            "YW1lMhgNIAEoCRIyCg1zdG9ja1R5cGVGbGFnGA4gASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDMyVmFsdWUSNgoTcGFja2luZ1VuaXRRdWFudGl0eRgPIAEo",
            "CzIZLlBhcnRTcGVjc1N2Yy5HcnBjRGVjaW1hbBIOCgZsT1RRdHkYECABKBES",
            "FAoMcm91bmRpbmdGbGFnGBEgASgREhEKCXBhcnRDb2RlWBgSIAEoCRIRCglw",
            "YXJ0U3BlY1gYEyABKAkSMQoLbWVhc3VyZVVuaXQYFCABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUSKwoFcm91dGUYFSABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUSMgoNY29tbW9kaXR5Q29kZRgWIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEi0KB3JlbWFya3MYFyABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSFQoNb3JkZXJMZWFkVGlt",
            "ZRgYIAEoERIYChBvcmRlckNvdmVyUGVyaW9kGBkgASgREhYKDm9yZGVySW5j",
            "cmVtZW50GBogASgREisKBW1vZGVsGBsgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cmluZ1ZhbHVlEjYKEW1vbGRlZFBsYXRlTnVtYmVyGBwgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUSMwoNcGFydEdyb3VwQ29kZRgdIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgVzZXFObxgeIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEjMKDXBhcnRTaG9ydE5h",
            "bWUYHyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSLwoJcGFy",
            "dENsYXNzGCAgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEkQK",
            "HmZvb2REcnVnQWRtaW5pc3RyYXRpb25JdGVtQ29kZRghIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgVZaWVsZBgiIAEoCzIZLlBhcnRT",
            "cGVjc1N2Yy5HcnBjRGVjaW1hbEgAEi4KCXBhcnRUeXBlMhgjIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEi0KB2JhckNvZGUYJCABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVCDAoKb25lb2ZZaWVsZCKgCwoN",
            "VXBkYXRlUmVxdWVzdBIQCghwYXJ0Q29kZRgBIAEoCRIQCghwYXJ0U3BlYxgC",
            "IAEoCRIwCg1sb2dpY2FsV2VpZ2h0GAMgASgLMhkuUGFydFNwZWNzU3ZjLkdy",
            "cGNEZWNpbWFsEi8KDHNjcmFwUGVyY2VudBgEIAEoCzIZLlBhcnRTcGVjc1N2",
            "Yy5HcnBjRGVjaW1hbBILCgNiaW4YBSABKAkSMgoObmV4dEN5Y2xlQ291bnQY",
            "BiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhEKCXVuVXNlRmxh",
            "ZxgHIAEoERIvCgxzdGFuZGFyZENvc3QYCCABKAsyGS5QYXJ0U3BlY3NTdmMu",
            "R3JwY0RlY2ltYWwSLgoLY3VycmVudENvc3QYCSABKAsyGS5QYXJ0U3BlY3NT",
            "dmMuR3JwY0RlY2ltYWwSEAoIcGFydFR5cGUYCiABKAkSLQoKc2FmZXR5UXR5",
            "MhgLIAEoCzIZLlBhcnRTcGVjc1N2Yy5HcnBjRGVjaW1hbBIwCg1yZU9yZGVy",
            "TGV2ZWwyGAwgASgLMhkuUGFydFNwZWNzU3ZjLkdycGNEZWNpbWFsEhEKCXBh",
            "cnROYW1lMhgNIAEoCRIyCg1zdG9ja1R5cGVGbGFnGA4gASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDMyVmFsdWUSNgoTcGFja2luZ1VuaXRRdWFudGl0eRgP",
            "IAEoCzIZLlBhcnRTcGVjc1N2Yy5HcnBjRGVjaW1hbBIOCgZsT1RRdHkYECAB",
            "KBESFAoMcm91bmRpbmdGbGFnGBEgASgREhEKCXBhcnRDb2RlWBgSIAEoCRIR",
            "CglwYXJ0U3BlY1gYEyABKAkSMQoLbWVhc3VyZVVuaXQYFCABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKwoFcm91dGUYFSABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWUSMgoNY29tbW9kaXR5Q29kZRgWIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEi0KB3JlbWFya3MYFyAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSFQoNb3JkZXJMZWFk",
            "VGltZRgYIAEoERIYChBvcmRlckNvdmVyUGVyaW9kGBkgASgREhYKDm9yZGVy",
            "SW5jcmVtZW50GBogASgREisKBW1vZGVsGBsgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEjYKEW1vbGRlZFBsYXRlTnVtYmVyGBwgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSMwoNcGFydEdyb3VwQ29kZRgd",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgVzZXFObxge",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEjMKDXBhcnRTaG9y",
            "dE5hbWUYHyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSLwoJ",
            "cGFydENsYXNzGCAgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "EkQKHmZvb2REcnVnQWRtaW5pc3RyYXRpb25JdGVtQ29kZRghIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgVZaWVsZBgiIAEoCzIZLlBh",
            "cnRTcGVjc1N2Yy5HcnBjRGVjaW1hbEgAEi4KCXBhcnRUeXBlMhgjIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEi0KB2JhckNvZGUYJCABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVCDAoKb25lb2ZZaWVsZCIf",
            "Cg5VcGRhdGVSZXNwb25zZRINCgVjb3VudBgBIAEoBSIzCg1EZWxldGVSZXF1",
            "ZXN0EhAKCHBhcnRDb2RlGAEgASgJEhAKCHBhcnRTcGVjGAIgASgJIh8KDkRl",
            "bGV0ZVJlc3BvbnNlEg0KBWNvdW50GAEgASgFMsEHCglQYXJ0U3BlY3MSUwoL",
            "R2V0Rm9yUGFydHMSIC5QYXJ0U3BlY3NTdmMuR2V0Rm9yUGFydHNSZXF1ZXN0",
            "GiIuUGFydFNwZWNzU3ZjLlBhcnRTcGVjc1NldFJlc3BvbnNlElcKD0dldEZv",
            "clBhcnRzSnNvbhIgLlBhcnRTcGVjc1N2Yy5HZXRGb3JQYXJ0c1JlcXVlc3Qa",
            "Ii5QYXJ0U3BlY3NTdmMuUGFydFNwZWNzU2V0UmVzcG9uc2USWwoPR2V0Rm9y",
            "UGFydEdyb3VwEiQuUGFydFNwZWNzU3ZjLkdldEZvclBhcnRHcm91cFJlcXVl",
            "c3QaIi5QYXJ0U3BlY3NTdmMuUGFydFNwZWNzU2V0UmVzcG9uc2USXwoTR2V0",
            "Rm9yUGFydEdyb3VwSnNvbhIkLlBhcnRTcGVjc1N2Yy5HZXRGb3JQYXJ0R3Jv",
            "dXBSZXF1ZXN0GiIuUGFydFNwZWNzU3ZjLlBhcnRTcGVjc1NldFJlc3BvbnNl",
            "EkoKCEdldEJ5S2V5Eh0uUGFydFNwZWNzU3ZjLkdldEJ5S2V5UmVxdWVzdBof",
            "LlBhcnRTcGVjc1N2Yy5QYXJ0U3BlY3NSZXNwb25zZRJOCgxHZXRCeUtleUpz",
            "b24SHS5QYXJ0U3BlY3NTdmMuR2V0QnlLZXlSZXF1ZXN0Gh8uUGFydFNwZWNz",
            "U3ZjLlBhcnRTcGVjc1Jlc3BvbnNlEkQKBkdldEFsbBIWLmdvb2dsZS5wcm90",
            "b2J1Zi5FbXB0eRoiLlBhcnRTcGVjc1N2Yy5QYXJ0U3BlY3NTZXRSZXNwb25z",
            "ZRJICgpHZXRBbGxKc29uEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GiIuUGFy",
            "dFNwZWNzU3ZjLlBhcnRTcGVjc1NldFJlc3BvbnNlEkYKBkluc2VydBIbLlBh",
            "cnRTcGVjc1N2Yy5JbnNlcnRSZXF1ZXN0Gh8uUGFydFNwZWNzU3ZjLlBhcnRT",
            "cGVjc1Jlc3BvbnNlEkoKCkluc2VydEpzb24SGy5QYXJ0U3BlY3NTdmMuSW5z",
            "ZXJ0UmVxdWVzdBofLlBhcnRTcGVjc1N2Yy5QYXJ0U3BlY3NSZXNwb25zZRJD",
            "CgZVcGRhdGUSGy5QYXJ0U3BlY3NTdmMuVXBkYXRlUmVxdWVzdBocLlBhcnRT",
            "cGVjc1N2Yy5VcGRhdGVSZXNwb25zZRJDCgZEZWxldGUSGy5QYXJ0U3BlY3NT",
            "dmMuRGVsZXRlUmVxdWVzdBocLlBhcnRTcGVjc1N2Yy5EZWxldGVSZXNwb25z",
            "ZUIfqgIcSGFjY3BNYW5hZ2VyLlBhcnRTcGVjc1Byb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.GrpcDecimal), global::HaccpManager.PartSpecsProtos.GrpcDecimal.Parser, new[]{ "Units", "Nanos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.PartSpecsResponse), global::HaccpManager.PartSpecsProtos.PartSpecsResponse.Parser, new[]{ "PartSpecs", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.PartSpecsSetResponse), global::HaccpManager.PartSpecsProtos.PartSpecsSetResponse.Parser, new[]{ "PartSpecsSet", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.DataSetResponse), global::HaccpManager.PartSpecsProtos.DataSetResponse.Parser, new[]{ "DataSet", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.GetForPartsRequest), global::HaccpManager.PartSpecsProtos.GetForPartsRequest.Parser, new[]{ "PartCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.GetForPartGroupRequest), global::HaccpManager.PartSpecsProtos.GetForPartGroupRequest.Parser, new[]{ "PartGroupCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.GetByKeyRequest), global::HaccpManager.PartSpecsProtos.GetByKeyRequest.Parser, new[]{ "PartCode", "PartSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.InsertRequest), global::HaccpManager.PartSpecsProtos.InsertRequest.Parser, new[]{ "PartCode", "PartSpec", "LogicalWeight", "ScrapPercent", "Bin", "NextCycleCount", "UnUseFlag", "StandardCost", "CurrentCost", "PartType", "SafetyQty2", "ReOrderLevel2", "PartName2", "StockTypeFlag", "PackingUnitQuantity", "LOTQty", "RoundingFlag", "PartCodeX", "PartSpecX", "MeasureUnit", "Route", "CommodityCode", "Remarks", "OrderLeadTime", "OrderCoverPeriod", "OrderIncrement", "Model", "MoldedPlateNumber", "PartGroupCode", "SeqNo", "PartShortName", "PartClass", "FoodDrugAdministrationItemCode", "Yield", "PartType2", "BarCode" }, new[]{ "OneofYield" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.UpdateRequest), global::HaccpManager.PartSpecsProtos.UpdateRequest.Parser, new[]{ "PartCode", "PartSpec", "LogicalWeight", "ScrapPercent", "Bin", "NextCycleCount", "UnUseFlag", "StandardCost", "CurrentCost", "PartType", "SafetyQty2", "ReOrderLevel2", "PartName2", "StockTypeFlag", "PackingUnitQuantity", "LOTQty", "RoundingFlag", "PartCodeX", "PartSpecX", "MeasureUnit", "Route", "CommodityCode", "Remarks", "OrderLeadTime", "OrderCoverPeriod", "OrderIncrement", "Model", "MoldedPlateNumber", "PartGroupCode", "SeqNo", "PartShortName", "PartClass", "FoodDrugAdministrationItemCode", "Yield", "PartType2", "BarCode" }, new[]{ "OneofYield" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.UpdateResponse), global::HaccpManager.PartSpecsProtos.UpdateResponse.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.DeleteRequest), global::HaccpManager.PartSpecsProtos.DeleteRequest.Parser, new[]{ "PartCode", "PartSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.PartSpecsProtos.DeleteResponse), global::HaccpManager.PartSpecsProtos.DeleteResponse.Parser, new[]{ "Count" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GrpcDecimal : pb::IMessage<GrpcDecimal> {
    private static readonly pb::MessageParser<GrpcDecimal> _parser = new pb::MessageParser<GrpcDecimal>(() => new GrpcDecimal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcDecimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal(GrpcDecimal other) : this() {
      units_ = other.units_;
      nanos_ = other.nanos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal Clone() {
      return new GrpcDecimal(this);
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private long units_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Units {
      get { return units_; }
      set {
        units_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcDecimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcDecimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Units != other.Units) return false;
      if (Nanos != other.Nanos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Units != 0L) hash ^= Units.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Units != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Units);
      }
      if (Nanos != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Nanos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Units != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Units);
      }
      if (Nanos != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcDecimal other) {
      if (other == null) {
        return;
      }
      if (other.Units != 0L) {
        Units = other.Units;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Units = input.ReadInt64();
            break;
          }
          case 21: {
            Nanos = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartSpecsResponse : pb::IMessage<PartSpecsResponse> {
    private static readonly pb::MessageParser<PartSpecsResponse> _parser = new pb::MessageParser<PartSpecsResponse>(() => new PartSpecsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartSpecsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSpecsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSpecsResponse(PartSpecsResponse other) : this() {
      partSpecs_ = other.partSpecs_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSpecsResponse Clone() {
      return new PartSpecsResponse(this);
    }

    /// <summary>Field number for the "partSpecs" field.</summary>
    public const int PartSpecsFieldNumber = 1;
    private pb::ByteString partSpecs_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PartSpecs {
      get { return partSpecs_; }
      set {
        partSpecs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartSpecsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartSpecsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartSpecs != other.PartSpecs) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartSpecs.Length != 0) hash ^= PartSpecs.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartSpecs.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PartSpecs);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartSpecs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PartSpecs);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartSpecsResponse other) {
      if (other == null) {
        return;
      }
      if (other.PartSpecs.Length != 0) {
        PartSpecs = other.PartSpecs;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartSpecs = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartSpecsSetResponse : pb::IMessage<PartSpecsSetResponse> {
    private static readonly pb::MessageParser<PartSpecsSetResponse> _parser = new pb::MessageParser<PartSpecsSetResponse>(() => new PartSpecsSetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartSpecsSetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSpecsSetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSpecsSetResponse(PartSpecsSetResponse other) : this() {
      partSpecsSet_ = other.partSpecsSet_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSpecsSetResponse Clone() {
      return new PartSpecsSetResponse(this);
    }

    /// <summary>Field number for the "partSpecsSet" field.</summary>
    public const int PartSpecsSetFieldNumber = 1;
    private pb::ByteString partSpecsSet_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PartSpecsSet {
      get { return partSpecsSet_; }
      set {
        partSpecsSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartSpecsSetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartSpecsSetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartSpecsSet != other.PartSpecsSet) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartSpecsSet.Length != 0) hash ^= PartSpecsSet.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartSpecsSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PartSpecsSet);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartSpecsSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PartSpecsSet);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartSpecsSetResponse other) {
      if (other == null) {
        return;
      }
      if (other.PartSpecsSet.Length != 0) {
        PartSpecsSet = other.PartSpecsSet;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartSpecsSet = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataSetResponse : pb::IMessage<DataSetResponse> {
    private static readonly pb::MessageParser<DataSetResponse> _parser = new pb::MessageParser<DataSetResponse>(() => new DataSetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse(DataSetResponse other) : this() {
      dataSet_ = other.dataSet_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse Clone() {
      return new DataSetResponse(this);
    }

    /// <summary>Field number for the "dataSet" field.</summary>
    public const int DataSetFieldNumber = 1;
    private pb::ByteString dataSet_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSet {
      get { return dataSet_; }
      set {
        dataSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataSet != other.DataSet) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataSet.Length != 0) hash ^= DataSet.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DataSet);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSet);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSetResponse other) {
      if (other == null) {
        return;
      }
      if (other.DataSet.Length != 0) {
        DataSet = other.DataSet;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataSet = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForPartsRequest : pb::IMessage<GetForPartsRequest> {
    private static readonly pb::MessageParser<GetForPartsRequest> _parser = new pb::MessageParser<GetForPartsRequest>(() => new GetForPartsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForPartsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForPartsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForPartsRequest(GetForPartsRequest other) : this() {
      partCode_ = other.partCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForPartsRequest Clone() {
      return new GetForPartsRequest(this);
    }

    /// <summary>Field number for the "partCode" field.</summary>
    public const int PartCodeFieldNumber = 1;
    private string partCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartCode {
      get { return partCode_; }
      set {
        partCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForPartsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForPartsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartCode != other.PartCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartCode.Length != 0) hash ^= PartCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PartCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForPartsRequest other) {
      if (other == null) {
        return;
      }
      if (other.PartCode.Length != 0) {
        PartCode = other.PartCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForPartGroupRequest : pb::IMessage<GetForPartGroupRequest> {
    private static readonly pb::MessageParser<GetForPartGroupRequest> _parser = new pb::MessageParser<GetForPartGroupRequest>(() => new GetForPartGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForPartGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForPartGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForPartGroupRequest(GetForPartGroupRequest other) : this() {
      partGroupCode_ = other.partGroupCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForPartGroupRequest Clone() {
      return new GetForPartGroupRequest(this);
    }

    /// <summary>Field number for the "partGroupCode" field.</summary>
    public const int PartGroupCodeFieldNumber = 1;
    private string partGroupCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartGroupCode {
      get { return partGroupCode_; }
      set {
        partGroupCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForPartGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForPartGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartGroupCode != other.PartGroupCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartGroupCode.Length != 0) hash ^= PartGroupCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartGroupCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PartGroupCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartGroupCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartGroupCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForPartGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.PartGroupCode.Length != 0) {
        PartGroupCode = other.PartGroupCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartGroupCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetByKeyRequest : pb::IMessage<GetByKeyRequest> {
    private static readonly pb::MessageParser<GetByKeyRequest> _parser = new pb::MessageParser<GetByKeyRequest>(() => new GetByKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetByKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest(GetByKeyRequest other) : this() {
      partCode_ = other.partCode_;
      partSpec_ = other.partSpec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest Clone() {
      return new GetByKeyRequest(this);
    }

    /// <summary>Field number for the "partCode" field.</summary>
    public const int PartCodeFieldNumber = 1;
    private string partCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartCode {
      get { return partCode_; }
      set {
        partCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partSpec" field.</summary>
    public const int PartSpecFieldNumber = 2;
    private string partSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartSpec {
      get { return partSpec_; }
      set {
        partSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetByKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetByKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartCode != other.PartCode) return false;
      if (PartSpec != other.PartSpec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartCode.Length != 0) hash ^= PartCode.GetHashCode();
      if (PartSpec.Length != 0) hash ^= PartSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PartCode);
      }
      if (PartSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PartSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartCode);
      }
      if (PartSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetByKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.PartCode.Length != 0) {
        PartCode = other.PartCode;
      }
      if (other.PartSpec.Length != 0) {
        PartSpec = other.PartSpec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartCode = input.ReadString();
            break;
          }
          case 18: {
            PartSpec = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertRequest : pb::IMessage<InsertRequest> {
    private static readonly pb::MessageParser<InsertRequest> _parser = new pb::MessageParser<InsertRequest>(() => new InsertRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest(InsertRequest other) : this() {
      partCode_ = other.partCode_;
      partSpec_ = other.partSpec_;
      logicalWeight_ = other.logicalWeight_ != null ? other.logicalWeight_.Clone() : null;
      scrapPercent_ = other.scrapPercent_ != null ? other.scrapPercent_.Clone() : null;
      bin_ = other.bin_;
      nextCycleCount_ = other.nextCycleCount_ != null ? other.nextCycleCount_.Clone() : null;
      unUseFlag_ = other.unUseFlag_;
      standardCost_ = other.standardCost_ != null ? other.standardCost_.Clone() : null;
      currentCost_ = other.currentCost_ != null ? other.currentCost_.Clone() : null;
      partType_ = other.partType_;
      safetyQty2_ = other.safetyQty2_ != null ? other.safetyQty2_.Clone() : null;
      reOrderLevel2_ = other.reOrderLevel2_ != null ? other.reOrderLevel2_.Clone() : null;
      partName2_ = other.partName2_;
      StockTypeFlag = other.StockTypeFlag;
      packingUnitQuantity_ = other.packingUnitQuantity_ != null ? other.packingUnitQuantity_.Clone() : null;
      lOTQty_ = other.lOTQty_;
      roundingFlag_ = other.roundingFlag_;
      partCodeX_ = other.partCodeX_;
      partSpecX_ = other.partSpecX_;
      MeasureUnit = other.MeasureUnit;
      Route = other.Route;
      CommodityCode = other.CommodityCode;
      Remarks = other.Remarks;
      orderLeadTime_ = other.orderLeadTime_;
      orderCoverPeriod_ = other.orderCoverPeriod_;
      orderIncrement_ = other.orderIncrement_;
      Model = other.Model;
      MoldedPlateNumber = other.MoldedPlateNumber;
      PartGroupCode = other.PartGroupCode;
      SeqNo = other.SeqNo;
      PartShortName = other.PartShortName;
      PartClass = other.PartClass;
      FoodDrugAdministrationItemCode = other.FoodDrugAdministrationItemCode;
      PartType2 = other.PartType2;
      BarCode = other.BarCode;
      switch (other.OneofYieldCase) {
        case OneofYieldOneofCase.Yield:
          Yield = other.Yield.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest Clone() {
      return new InsertRequest(this);
    }

    /// <summary>Field number for the "partCode" field.</summary>
    public const int PartCodeFieldNumber = 1;
    private string partCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartCode {
      get { return partCode_; }
      set {
        partCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partSpec" field.</summary>
    public const int PartSpecFieldNumber = 2;
    private string partSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartSpec {
      get { return partSpec_; }
      set {
        partSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logicalWeight" field.</summary>
    public const int LogicalWeightFieldNumber = 3;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal logicalWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal LogicalWeight {
      get { return logicalWeight_; }
      set {
        logicalWeight_ = value;
      }
    }

    /// <summary>Field number for the "scrapPercent" field.</summary>
    public const int ScrapPercentFieldNumber = 4;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal scrapPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal ScrapPercent {
      get { return scrapPercent_; }
      set {
        scrapPercent_ = value;
      }
    }

    /// <summary>Field number for the "bin" field.</summary>
    public const int BinFieldNumber = 5;
    private string bin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bin {
      get { return bin_; }
      set {
        bin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextCycleCount" field.</summary>
    public const int NextCycleCountFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp nextCycleCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NextCycleCount {
      get { return nextCycleCount_; }
      set {
        nextCycleCount_ = value;
      }
    }

    /// <summary>Field number for the "unUseFlag" field.</summary>
    public const int UnUseFlagFieldNumber = 7;
    private int unUseFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnUseFlag {
      get { return unUseFlag_; }
      set {
        unUseFlag_ = value;
      }
    }

    /// <summary>Field number for the "standardCost" field.</summary>
    public const int StandardCostFieldNumber = 8;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal standardCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal StandardCost {
      get { return standardCost_; }
      set {
        standardCost_ = value;
      }
    }

    /// <summary>Field number for the "currentCost" field.</summary>
    public const int CurrentCostFieldNumber = 9;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal currentCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal CurrentCost {
      get { return currentCost_; }
      set {
        currentCost_ = value;
      }
    }

    /// <summary>Field number for the "partType" field.</summary>
    public const int PartTypeFieldNumber = 10;
    private string partType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartType {
      get { return partType_; }
      set {
        partType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safetyQty2" field.</summary>
    public const int SafetyQty2FieldNumber = 11;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal safetyQty2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal SafetyQty2 {
      get { return safetyQty2_; }
      set {
        safetyQty2_ = value;
      }
    }

    /// <summary>Field number for the "reOrderLevel2" field.</summary>
    public const int ReOrderLevel2FieldNumber = 12;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal reOrderLevel2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal ReOrderLevel2 {
      get { return reOrderLevel2_; }
      set {
        reOrderLevel2_ = value;
      }
    }

    /// <summary>Field number for the "partName2" field.</summary>
    public const int PartName2FieldNumber = 13;
    private string partName2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartName2 {
      get { return partName2_; }
      set {
        partName2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stockTypeFlag" field.</summary>
    public const int StockTypeFlagFieldNumber = 14;
    private static readonly pb::FieldCodec<int?> _single_stockTypeFlag_codec = pb::FieldCodec.ForStructWrapper<int>(114);
    private int? stockTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? StockTypeFlag {
      get { return stockTypeFlag_; }
      set {
        stockTypeFlag_ = value;
      }
    }


    /// <summary>Field number for the "packingUnitQuantity" field.</summary>
    public const int PackingUnitQuantityFieldNumber = 15;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal packingUnitQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal PackingUnitQuantity {
      get { return packingUnitQuantity_; }
      set {
        packingUnitQuantity_ = value;
      }
    }

    /// <summary>Field number for the "lOTQty" field.</summary>
    public const int LOTQtyFieldNumber = 16;
    private int lOTQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LOTQty {
      get { return lOTQty_; }
      set {
        lOTQty_ = value;
      }
    }

    /// <summary>Field number for the "roundingFlag" field.</summary>
    public const int RoundingFlagFieldNumber = 17;
    private int roundingFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundingFlag {
      get { return roundingFlag_; }
      set {
        roundingFlag_ = value;
      }
    }

    /// <summary>Field number for the "partCodeX" field.</summary>
    public const int PartCodeXFieldNumber = 18;
    private string partCodeX_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartCodeX {
      get { return partCodeX_; }
      set {
        partCodeX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partSpecX" field.</summary>
    public const int PartSpecXFieldNumber = 19;
    private string partSpecX_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartSpecX {
      get { return partSpecX_; }
      set {
        partSpecX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measureUnit" field.</summary>
    public const int MeasureUnitFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _single_measureUnit_codec = pb::FieldCodec.ForClassWrapper<string>(162);
    private string measureUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasureUnit {
      get { return measureUnit_; }
      set {
        measureUnit_ = value;
      }
    }


    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _single_route_codec = pb::FieldCodec.ForClassWrapper<string>(170);
    private string route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }


    /// <summary>Field number for the "commodityCode" field.</summary>
    public const int CommodityCodeFieldNumber = 22;
    private static readonly pb::FieldCodec<int?> _single_commodityCode_codec = pb::FieldCodec.ForStructWrapper<int>(178);
    private int? commodityCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? CommodityCode {
      get { return commodityCode_; }
      set {
        commodityCode_ = value;
      }
    }


    /// <summary>Field number for the "remarks" field.</summary>
    public const int RemarksFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _single_remarks_codec = pb::FieldCodec.ForClassWrapper<string>(186);
    private string remarks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks {
      get { return remarks_; }
      set {
        remarks_ = value;
      }
    }


    /// <summary>Field number for the "orderLeadTime" field.</summary>
    public const int OrderLeadTimeFieldNumber = 24;
    private int orderLeadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderLeadTime {
      get { return orderLeadTime_; }
      set {
        orderLeadTime_ = value;
      }
    }

    /// <summary>Field number for the "orderCoverPeriod" field.</summary>
    public const int OrderCoverPeriodFieldNumber = 25;
    private int orderCoverPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCoverPeriod {
      get { return orderCoverPeriod_; }
      set {
        orderCoverPeriod_ = value;
      }
    }

    /// <summary>Field number for the "orderIncrement" field.</summary>
    public const int OrderIncrementFieldNumber = 26;
    private int orderIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderIncrement {
      get { return orderIncrement_; }
      set {
        orderIncrement_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _single_model_codec = pb::FieldCodec.ForClassWrapper<string>(218);
    private string model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }


    /// <summary>Field number for the "moldedPlateNumber" field.</summary>
    public const int MoldedPlateNumberFieldNumber = 28;
    private static readonly pb::FieldCodec<int?> _single_moldedPlateNumber_codec = pb::FieldCodec.ForStructWrapper<int>(226);
    private int? moldedPlateNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MoldedPlateNumber {
      get { return moldedPlateNumber_; }
      set {
        moldedPlateNumber_ = value;
      }
    }


    /// <summary>Field number for the "partGroupCode" field.</summary>
    public const int PartGroupCodeFieldNumber = 29;
    private static readonly pb::FieldCodec<string> _single_partGroupCode_codec = pb::FieldCodec.ForClassWrapper<string>(234);
    private string partGroupCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartGroupCode {
      get { return partGroupCode_; }
      set {
        partGroupCode_ = value;
      }
    }


    /// <summary>Field number for the "seqNo" field.</summary>
    public const int SeqNoFieldNumber = 30;
    private static readonly pb::FieldCodec<int?> _single_seqNo_codec = pb::FieldCodec.ForStructWrapper<int>(242);
    private int? seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }


    /// <summary>Field number for the "partShortName" field.</summary>
    public const int PartShortNameFieldNumber = 31;
    private static readonly pb::FieldCodec<string> _single_partShortName_codec = pb::FieldCodec.ForClassWrapper<string>(250);
    private string partShortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartShortName {
      get { return partShortName_; }
      set {
        partShortName_ = value;
      }
    }


    /// <summary>Field number for the "partClass" field.</summary>
    public const int PartClassFieldNumber = 32;
    private static readonly pb::FieldCodec<string> _single_partClass_codec = pb::FieldCodec.ForClassWrapper<string>(258);
    private string partClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartClass {
      get { return partClass_; }
      set {
        partClass_ = value;
      }
    }


    /// <summary>Field number for the "foodDrugAdministrationItemCode" field.</summary>
    public const int FoodDrugAdministrationItemCodeFieldNumber = 33;
    private static readonly pb::FieldCodec<string> _single_foodDrugAdministrationItemCode_codec = pb::FieldCodec.ForClassWrapper<string>(266);
    private string foodDrugAdministrationItemCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FoodDrugAdministrationItemCode {
      get { return foodDrugAdministrationItemCode_; }
      set {
        foodDrugAdministrationItemCode_ = value;
      }
    }


    /// <summary>Field number for the "Yield" field.</summary>
    public const int YieldFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal Yield {
      get { return oneofYieldCase_ == OneofYieldOneofCase.Yield ? (global::HaccpManager.PartSpecsProtos.GrpcDecimal) oneofYield_ : null; }
      set {
        oneofYield_ = value;
        oneofYieldCase_ = value == null ? OneofYieldOneofCase.None : OneofYieldOneofCase.Yield;
      }
    }

    /// <summary>Field number for the "partType2" field.</summary>
    public const int PartType2FieldNumber = 35;
    private static readonly pb::FieldCodec<int?> _single_partType2_codec = pb::FieldCodec.ForStructWrapper<int>(282);
    private int? partType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? PartType2 {
      get { return partType2_; }
      set {
        partType2_ = value;
      }
    }


    /// <summary>Field number for the "barCode" field.</summary>
    public const int BarCodeFieldNumber = 36;
    private static readonly pb::FieldCodec<string> _single_barCode_codec = pb::FieldCodec.ForClassWrapper<string>(290);
    private string barCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BarCode {
      get { return barCode_; }
      set {
        barCode_ = value;
      }
    }


    private object oneofYield_;
    /// <summary>Enum of possible cases for the "oneofYield" oneof.</summary>
    public enum OneofYieldOneofCase {
      None = 0,
      Yield = 34,
    }
    private OneofYieldOneofCase oneofYieldCase_ = OneofYieldOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofYieldOneofCase OneofYieldCase {
      get { return oneofYieldCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofYield() {
      oneofYieldCase_ = OneofYieldOneofCase.None;
      oneofYield_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartCode != other.PartCode) return false;
      if (PartSpec != other.PartSpec) return false;
      if (!object.Equals(LogicalWeight, other.LogicalWeight)) return false;
      if (!object.Equals(ScrapPercent, other.ScrapPercent)) return false;
      if (Bin != other.Bin) return false;
      if (!object.Equals(NextCycleCount, other.NextCycleCount)) return false;
      if (UnUseFlag != other.UnUseFlag) return false;
      if (!object.Equals(StandardCost, other.StandardCost)) return false;
      if (!object.Equals(CurrentCost, other.CurrentCost)) return false;
      if (PartType != other.PartType) return false;
      if (!object.Equals(SafetyQty2, other.SafetyQty2)) return false;
      if (!object.Equals(ReOrderLevel2, other.ReOrderLevel2)) return false;
      if (PartName2 != other.PartName2) return false;
      if (StockTypeFlag != other.StockTypeFlag) return false;
      if (!object.Equals(PackingUnitQuantity, other.PackingUnitQuantity)) return false;
      if (LOTQty != other.LOTQty) return false;
      if (RoundingFlag != other.RoundingFlag) return false;
      if (PartCodeX != other.PartCodeX) return false;
      if (PartSpecX != other.PartSpecX) return false;
      if (MeasureUnit != other.MeasureUnit) return false;
      if (Route != other.Route) return false;
      if (CommodityCode != other.CommodityCode) return false;
      if (Remarks != other.Remarks) return false;
      if (OrderLeadTime != other.OrderLeadTime) return false;
      if (OrderCoverPeriod != other.OrderCoverPeriod) return false;
      if (OrderIncrement != other.OrderIncrement) return false;
      if (Model != other.Model) return false;
      if (MoldedPlateNumber != other.MoldedPlateNumber) return false;
      if (PartGroupCode != other.PartGroupCode) return false;
      if (SeqNo != other.SeqNo) return false;
      if (PartShortName != other.PartShortName) return false;
      if (PartClass != other.PartClass) return false;
      if (FoodDrugAdministrationItemCode != other.FoodDrugAdministrationItemCode) return false;
      if (!object.Equals(Yield, other.Yield)) return false;
      if (PartType2 != other.PartType2) return false;
      if (BarCode != other.BarCode) return false;
      if (OneofYieldCase != other.OneofYieldCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartCode.Length != 0) hash ^= PartCode.GetHashCode();
      if (PartSpec.Length != 0) hash ^= PartSpec.GetHashCode();
      if (logicalWeight_ != null) hash ^= LogicalWeight.GetHashCode();
      if (scrapPercent_ != null) hash ^= ScrapPercent.GetHashCode();
      if (Bin.Length != 0) hash ^= Bin.GetHashCode();
      if (nextCycleCount_ != null) hash ^= NextCycleCount.GetHashCode();
      if (UnUseFlag != 0) hash ^= UnUseFlag.GetHashCode();
      if (standardCost_ != null) hash ^= StandardCost.GetHashCode();
      if (currentCost_ != null) hash ^= CurrentCost.GetHashCode();
      if (PartType.Length != 0) hash ^= PartType.GetHashCode();
      if (safetyQty2_ != null) hash ^= SafetyQty2.GetHashCode();
      if (reOrderLevel2_ != null) hash ^= ReOrderLevel2.GetHashCode();
      if (PartName2.Length != 0) hash ^= PartName2.GetHashCode();
      if (stockTypeFlag_ != null) hash ^= StockTypeFlag.GetHashCode();
      if (packingUnitQuantity_ != null) hash ^= PackingUnitQuantity.GetHashCode();
      if (LOTQty != 0) hash ^= LOTQty.GetHashCode();
      if (RoundingFlag != 0) hash ^= RoundingFlag.GetHashCode();
      if (PartCodeX.Length != 0) hash ^= PartCodeX.GetHashCode();
      if (PartSpecX.Length != 0) hash ^= PartSpecX.GetHashCode();
      if (measureUnit_ != null) hash ^= MeasureUnit.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (commodityCode_ != null) hash ^= CommodityCode.GetHashCode();
      if (remarks_ != null) hash ^= Remarks.GetHashCode();
      if (OrderLeadTime != 0) hash ^= OrderLeadTime.GetHashCode();
      if (OrderCoverPeriod != 0) hash ^= OrderCoverPeriod.GetHashCode();
      if (OrderIncrement != 0) hash ^= OrderIncrement.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      if (moldedPlateNumber_ != null) hash ^= MoldedPlateNumber.GetHashCode();
      if (partGroupCode_ != null) hash ^= PartGroupCode.GetHashCode();
      if (seqNo_ != null) hash ^= SeqNo.GetHashCode();
      if (partShortName_ != null) hash ^= PartShortName.GetHashCode();
      if (partClass_ != null) hash ^= PartClass.GetHashCode();
      if (foodDrugAdministrationItemCode_ != null) hash ^= FoodDrugAdministrationItemCode.GetHashCode();
      if (oneofYieldCase_ == OneofYieldOneofCase.Yield) hash ^= Yield.GetHashCode();
      if (partType2_ != null) hash ^= PartType2.GetHashCode();
      if (barCode_ != null) hash ^= BarCode.GetHashCode();
      hash ^= (int) oneofYieldCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PartCode);
      }
      if (PartSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PartSpec);
      }
      if (logicalWeight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LogicalWeight);
      }
      if (scrapPercent_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ScrapPercent);
      }
      if (Bin.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Bin);
      }
      if (nextCycleCount_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(NextCycleCount);
      }
      if (UnUseFlag != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(UnUseFlag);
      }
      if (standardCost_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StandardCost);
      }
      if (currentCost_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CurrentCost);
      }
      if (PartType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PartType);
      }
      if (safetyQty2_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SafetyQty2);
      }
      if (reOrderLevel2_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ReOrderLevel2);
      }
      if (PartName2.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PartName2);
      }
      if (stockTypeFlag_ != null) {
        _single_stockTypeFlag_codec.WriteTagAndValue(output, StockTypeFlag);
      }
      if (packingUnitQuantity_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PackingUnitQuantity);
      }
      if (LOTQty != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(LOTQty);
      }
      if (RoundingFlag != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(RoundingFlag);
      }
      if (PartCodeX.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PartCodeX);
      }
      if (PartSpecX.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PartSpecX);
      }
      if (measureUnit_ != null) {
        _single_measureUnit_codec.WriteTagAndValue(output, MeasureUnit);
      }
      if (route_ != null) {
        _single_route_codec.WriteTagAndValue(output, Route);
      }
      if (commodityCode_ != null) {
        _single_commodityCode_codec.WriteTagAndValue(output, CommodityCode);
      }
      if (remarks_ != null) {
        _single_remarks_codec.WriteTagAndValue(output, Remarks);
      }
      if (OrderLeadTime != 0) {
        output.WriteRawTag(192, 1);
        output.WriteSInt32(OrderLeadTime);
      }
      if (OrderCoverPeriod != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(OrderCoverPeriod);
      }
      if (OrderIncrement != 0) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(OrderIncrement);
      }
      if (model_ != null) {
        _single_model_codec.WriteTagAndValue(output, Model);
      }
      if (moldedPlateNumber_ != null) {
        _single_moldedPlateNumber_codec.WriteTagAndValue(output, MoldedPlateNumber);
      }
      if (partGroupCode_ != null) {
        _single_partGroupCode_codec.WriteTagAndValue(output, PartGroupCode);
      }
      if (seqNo_ != null) {
        _single_seqNo_codec.WriteTagAndValue(output, SeqNo);
      }
      if (partShortName_ != null) {
        _single_partShortName_codec.WriteTagAndValue(output, PartShortName);
      }
      if (partClass_ != null) {
        _single_partClass_codec.WriteTagAndValue(output, PartClass);
      }
      if (foodDrugAdministrationItemCode_ != null) {
        _single_foodDrugAdministrationItemCode_codec.WriteTagAndValue(output, FoodDrugAdministrationItemCode);
      }
      if (oneofYieldCase_ == OneofYieldOneofCase.Yield) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Yield);
      }
      if (partType2_ != null) {
        _single_partType2_codec.WriteTagAndValue(output, PartType2);
      }
      if (barCode_ != null) {
        _single_barCode_codec.WriteTagAndValue(output, BarCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartCode);
      }
      if (PartSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartSpec);
      }
      if (logicalWeight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogicalWeight);
      }
      if (scrapPercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScrapPercent);
      }
      if (Bin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bin);
      }
      if (nextCycleCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextCycleCount);
      }
      if (UnUseFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UnUseFlag);
      }
      if (standardCost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandardCost);
      }
      if (currentCost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentCost);
      }
      if (PartType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartType);
      }
      if (safetyQty2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SafetyQty2);
      }
      if (reOrderLevel2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReOrderLevel2);
      }
      if (PartName2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartName2);
      }
      if (stockTypeFlag_ != null) {
        size += _single_stockTypeFlag_codec.CalculateSizeWithTag(StockTypeFlag);
      }
      if (packingUnitQuantity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PackingUnitQuantity);
      }
      if (LOTQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(LOTQty);
      }
      if (RoundingFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RoundingFlag);
      }
      if (PartCodeX.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PartCodeX);
      }
      if (PartSpecX.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PartSpecX);
      }
      if (measureUnit_ != null) {
        size += _single_measureUnit_codec.CalculateSizeWithTag(MeasureUnit);
      }
      if (route_ != null) {
        size += _single_route_codec.CalculateSizeWithTag(Route);
      }
      if (commodityCode_ != null) {
        size += _single_commodityCode_codec.CalculateSizeWithTag(CommodityCode);
      }
      if (remarks_ != null) {
        size += _single_remarks_codec.CalculateSizeWithTag(Remarks);
      }
      if (OrderLeadTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OrderLeadTime);
      }
      if (OrderCoverPeriod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OrderCoverPeriod);
      }
      if (OrderIncrement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OrderIncrement);
      }
      if (model_ != null) {
        size += _single_model_codec.CalculateSizeWithTag(Model);
      }
      if (moldedPlateNumber_ != null) {
        size += _single_moldedPlateNumber_codec.CalculateSizeWithTag(MoldedPlateNumber);
      }
      if (partGroupCode_ != null) {
        size += _single_partGroupCode_codec.CalculateSizeWithTag(PartGroupCode);
      }
      if (seqNo_ != null) {
        size += _single_seqNo_codec.CalculateSizeWithTag(SeqNo);
      }
      if (partShortName_ != null) {
        size += _single_partShortName_codec.CalculateSizeWithTag(PartShortName);
      }
      if (partClass_ != null) {
        size += _single_partClass_codec.CalculateSizeWithTag(PartClass);
      }
      if (foodDrugAdministrationItemCode_ != null) {
        size += _single_foodDrugAdministrationItemCode_codec.CalculateSizeWithTag(FoodDrugAdministrationItemCode);
      }
      if (oneofYieldCase_ == OneofYieldOneofCase.Yield) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Yield);
      }
      if (partType2_ != null) {
        size += _single_partType2_codec.CalculateSizeWithTag(PartType2);
      }
      if (barCode_ != null) {
        size += _single_barCode_codec.CalculateSizeWithTag(BarCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertRequest other) {
      if (other == null) {
        return;
      }
      if (other.PartCode.Length != 0) {
        PartCode = other.PartCode;
      }
      if (other.PartSpec.Length != 0) {
        PartSpec = other.PartSpec;
      }
      if (other.logicalWeight_ != null) {
        if (logicalWeight_ == null) {
          LogicalWeight = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        LogicalWeight.MergeFrom(other.LogicalWeight);
      }
      if (other.scrapPercent_ != null) {
        if (scrapPercent_ == null) {
          ScrapPercent = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        ScrapPercent.MergeFrom(other.ScrapPercent);
      }
      if (other.Bin.Length != 0) {
        Bin = other.Bin;
      }
      if (other.nextCycleCount_ != null) {
        if (nextCycleCount_ == null) {
          NextCycleCount = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NextCycleCount.MergeFrom(other.NextCycleCount);
      }
      if (other.UnUseFlag != 0) {
        UnUseFlag = other.UnUseFlag;
      }
      if (other.standardCost_ != null) {
        if (standardCost_ == null) {
          StandardCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        StandardCost.MergeFrom(other.StandardCost);
      }
      if (other.currentCost_ != null) {
        if (currentCost_ == null) {
          CurrentCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        CurrentCost.MergeFrom(other.CurrentCost);
      }
      if (other.PartType.Length != 0) {
        PartType = other.PartType;
      }
      if (other.safetyQty2_ != null) {
        if (safetyQty2_ == null) {
          SafetyQty2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        SafetyQty2.MergeFrom(other.SafetyQty2);
      }
      if (other.reOrderLevel2_ != null) {
        if (reOrderLevel2_ == null) {
          ReOrderLevel2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        ReOrderLevel2.MergeFrom(other.ReOrderLevel2);
      }
      if (other.PartName2.Length != 0) {
        PartName2 = other.PartName2;
      }
      if (other.stockTypeFlag_ != null) {
        if (stockTypeFlag_ == null || other.StockTypeFlag != 0) {
          StockTypeFlag = other.StockTypeFlag;
        }
      }
      if (other.packingUnitQuantity_ != null) {
        if (packingUnitQuantity_ == null) {
          PackingUnitQuantity = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        PackingUnitQuantity.MergeFrom(other.PackingUnitQuantity);
      }
      if (other.LOTQty != 0) {
        LOTQty = other.LOTQty;
      }
      if (other.RoundingFlag != 0) {
        RoundingFlag = other.RoundingFlag;
      }
      if (other.PartCodeX.Length != 0) {
        PartCodeX = other.PartCodeX;
      }
      if (other.PartSpecX.Length != 0) {
        PartSpecX = other.PartSpecX;
      }
      if (other.measureUnit_ != null) {
        if (measureUnit_ == null || other.MeasureUnit != "") {
          MeasureUnit = other.MeasureUnit;
        }
      }
      if (other.route_ != null) {
        if (route_ == null || other.Route != "") {
          Route = other.Route;
        }
      }
      if (other.commodityCode_ != null) {
        if (commodityCode_ == null || other.CommodityCode != 0) {
          CommodityCode = other.CommodityCode;
        }
      }
      if (other.remarks_ != null) {
        if (remarks_ == null || other.Remarks != "") {
          Remarks = other.Remarks;
        }
      }
      if (other.OrderLeadTime != 0) {
        OrderLeadTime = other.OrderLeadTime;
      }
      if (other.OrderCoverPeriod != 0) {
        OrderCoverPeriod = other.OrderCoverPeriod;
      }
      if (other.OrderIncrement != 0) {
        OrderIncrement = other.OrderIncrement;
      }
      if (other.model_ != null) {
        if (model_ == null || other.Model != "") {
          Model = other.Model;
        }
      }
      if (other.moldedPlateNumber_ != null) {
        if (moldedPlateNumber_ == null || other.MoldedPlateNumber != 0) {
          MoldedPlateNumber = other.MoldedPlateNumber;
        }
      }
      if (other.partGroupCode_ != null) {
        if (partGroupCode_ == null || other.PartGroupCode != "") {
          PartGroupCode = other.PartGroupCode;
        }
      }
      if (other.seqNo_ != null) {
        if (seqNo_ == null || other.SeqNo != 0) {
          SeqNo = other.SeqNo;
        }
      }
      if (other.partShortName_ != null) {
        if (partShortName_ == null || other.PartShortName != "") {
          PartShortName = other.PartShortName;
        }
      }
      if (other.partClass_ != null) {
        if (partClass_ == null || other.PartClass != "") {
          PartClass = other.PartClass;
        }
      }
      if (other.foodDrugAdministrationItemCode_ != null) {
        if (foodDrugAdministrationItemCode_ == null || other.FoodDrugAdministrationItemCode != "") {
          FoodDrugAdministrationItemCode = other.FoodDrugAdministrationItemCode;
        }
      }
      if (other.partType2_ != null) {
        if (partType2_ == null || other.PartType2 != 0) {
          PartType2 = other.PartType2;
        }
      }
      if (other.barCode_ != null) {
        if (barCode_ == null || other.BarCode != "") {
          BarCode = other.BarCode;
        }
      }
      switch (other.OneofYieldCase) {
        case OneofYieldOneofCase.Yield:
          if (Yield == null) {
            Yield = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
          }
          Yield.MergeFrom(other.Yield);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartCode = input.ReadString();
            break;
          }
          case 18: {
            PartSpec = input.ReadString();
            break;
          }
          case 26: {
            if (logicalWeight_ == null) {
              LogicalWeight = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(LogicalWeight);
            break;
          }
          case 34: {
            if (scrapPercent_ == null) {
              ScrapPercent = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(ScrapPercent);
            break;
          }
          case 42: {
            Bin = input.ReadString();
            break;
          }
          case 50: {
            if (nextCycleCount_ == null) {
              NextCycleCount = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NextCycleCount);
            break;
          }
          case 56: {
            UnUseFlag = input.ReadSInt32();
            break;
          }
          case 66: {
            if (standardCost_ == null) {
              StandardCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(StandardCost);
            break;
          }
          case 74: {
            if (currentCost_ == null) {
              CurrentCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(CurrentCost);
            break;
          }
          case 82: {
            PartType = input.ReadString();
            break;
          }
          case 90: {
            if (safetyQty2_ == null) {
              SafetyQty2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(SafetyQty2);
            break;
          }
          case 98: {
            if (reOrderLevel2_ == null) {
              ReOrderLevel2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(ReOrderLevel2);
            break;
          }
          case 106: {
            PartName2 = input.ReadString();
            break;
          }
          case 114: {
            int? value = _single_stockTypeFlag_codec.Read(input);
            if (stockTypeFlag_ == null || value != 0) {
              StockTypeFlag = value;
            }
            break;
          }
          case 122: {
            if (packingUnitQuantity_ == null) {
              PackingUnitQuantity = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(PackingUnitQuantity);
            break;
          }
          case 128: {
            LOTQty = input.ReadSInt32();
            break;
          }
          case 136: {
            RoundingFlag = input.ReadSInt32();
            break;
          }
          case 146: {
            PartCodeX = input.ReadString();
            break;
          }
          case 154: {
            PartSpecX = input.ReadString();
            break;
          }
          case 162: {
            string value = _single_measureUnit_codec.Read(input);
            if (measureUnit_ == null || value != "") {
              MeasureUnit = value;
            }
            break;
          }
          case 170: {
            string value = _single_route_codec.Read(input);
            if (route_ == null || value != "") {
              Route = value;
            }
            break;
          }
          case 178: {
            int? value = _single_commodityCode_codec.Read(input);
            if (commodityCode_ == null || value != 0) {
              CommodityCode = value;
            }
            break;
          }
          case 186: {
            string value = _single_remarks_codec.Read(input);
            if (remarks_ == null || value != "") {
              Remarks = value;
            }
            break;
          }
          case 192: {
            OrderLeadTime = input.ReadSInt32();
            break;
          }
          case 200: {
            OrderCoverPeriod = input.ReadSInt32();
            break;
          }
          case 208: {
            OrderIncrement = input.ReadSInt32();
            break;
          }
          case 218: {
            string value = _single_model_codec.Read(input);
            if (model_ == null || value != "") {
              Model = value;
            }
            break;
          }
          case 226: {
            int? value = _single_moldedPlateNumber_codec.Read(input);
            if (moldedPlateNumber_ == null || value != 0) {
              MoldedPlateNumber = value;
            }
            break;
          }
          case 234: {
            string value = _single_partGroupCode_codec.Read(input);
            if (partGroupCode_ == null || value != "") {
              PartGroupCode = value;
            }
            break;
          }
          case 242: {
            int? value = _single_seqNo_codec.Read(input);
            if (seqNo_ == null || value != 0) {
              SeqNo = value;
            }
            break;
          }
          case 250: {
            string value = _single_partShortName_codec.Read(input);
            if (partShortName_ == null || value != "") {
              PartShortName = value;
            }
            break;
          }
          case 258: {
            string value = _single_partClass_codec.Read(input);
            if (partClass_ == null || value != "") {
              PartClass = value;
            }
            break;
          }
          case 266: {
            string value = _single_foodDrugAdministrationItemCode_codec.Read(input);
            if (foodDrugAdministrationItemCode_ == null || value != "") {
              FoodDrugAdministrationItemCode = value;
            }
            break;
          }
          case 274: {
            global::HaccpManager.PartSpecsProtos.GrpcDecimal subBuilder = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            if (oneofYieldCase_ == OneofYieldOneofCase.Yield) {
              subBuilder.MergeFrom(Yield);
            }
            input.ReadMessage(subBuilder);
            Yield = subBuilder;
            break;
          }
          case 282: {
            int? value = _single_partType2_codec.Read(input);
            if (partType2_ == null || value != 0) {
              PartType2 = value;
            }
            break;
          }
          case 290: {
            string value = _single_barCode_codec.Read(input);
            if (barCode_ == null || value != "") {
              BarCode = value;
            }
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRequest : pb::IMessage<UpdateRequest> {
    private static readonly pb::MessageParser<UpdateRequest> _parser = new pb::MessageParser<UpdateRequest>(() => new UpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest(UpdateRequest other) : this() {
      partCode_ = other.partCode_;
      partSpec_ = other.partSpec_;
      logicalWeight_ = other.logicalWeight_ != null ? other.logicalWeight_.Clone() : null;
      scrapPercent_ = other.scrapPercent_ != null ? other.scrapPercent_.Clone() : null;
      bin_ = other.bin_;
      nextCycleCount_ = other.nextCycleCount_ != null ? other.nextCycleCount_.Clone() : null;
      unUseFlag_ = other.unUseFlag_;
      standardCost_ = other.standardCost_ != null ? other.standardCost_.Clone() : null;
      currentCost_ = other.currentCost_ != null ? other.currentCost_.Clone() : null;
      partType_ = other.partType_;
      safetyQty2_ = other.safetyQty2_ != null ? other.safetyQty2_.Clone() : null;
      reOrderLevel2_ = other.reOrderLevel2_ != null ? other.reOrderLevel2_.Clone() : null;
      partName2_ = other.partName2_;
      StockTypeFlag = other.StockTypeFlag;
      packingUnitQuantity_ = other.packingUnitQuantity_ != null ? other.packingUnitQuantity_.Clone() : null;
      lOTQty_ = other.lOTQty_;
      roundingFlag_ = other.roundingFlag_;
      partCodeX_ = other.partCodeX_;
      partSpecX_ = other.partSpecX_;
      MeasureUnit = other.MeasureUnit;
      Route = other.Route;
      CommodityCode = other.CommodityCode;
      Remarks = other.Remarks;
      orderLeadTime_ = other.orderLeadTime_;
      orderCoverPeriod_ = other.orderCoverPeriod_;
      orderIncrement_ = other.orderIncrement_;
      Model = other.Model;
      MoldedPlateNumber = other.MoldedPlateNumber;
      PartGroupCode = other.PartGroupCode;
      SeqNo = other.SeqNo;
      PartShortName = other.PartShortName;
      PartClass = other.PartClass;
      FoodDrugAdministrationItemCode = other.FoodDrugAdministrationItemCode;
      PartType2 = other.PartType2;
      BarCode = other.BarCode;
      switch (other.OneofYieldCase) {
        case OneofYieldOneofCase.Yield:
          Yield = other.Yield.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest Clone() {
      return new UpdateRequest(this);
    }

    /// <summary>Field number for the "partCode" field.</summary>
    public const int PartCodeFieldNumber = 1;
    private string partCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartCode {
      get { return partCode_; }
      set {
        partCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partSpec" field.</summary>
    public const int PartSpecFieldNumber = 2;
    private string partSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartSpec {
      get { return partSpec_; }
      set {
        partSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logicalWeight" field.</summary>
    public const int LogicalWeightFieldNumber = 3;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal logicalWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal LogicalWeight {
      get { return logicalWeight_; }
      set {
        logicalWeight_ = value;
      }
    }

    /// <summary>Field number for the "scrapPercent" field.</summary>
    public const int ScrapPercentFieldNumber = 4;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal scrapPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal ScrapPercent {
      get { return scrapPercent_; }
      set {
        scrapPercent_ = value;
      }
    }

    /// <summary>Field number for the "bin" field.</summary>
    public const int BinFieldNumber = 5;
    private string bin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bin {
      get { return bin_; }
      set {
        bin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextCycleCount" field.</summary>
    public const int NextCycleCountFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp nextCycleCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NextCycleCount {
      get { return nextCycleCount_; }
      set {
        nextCycleCount_ = value;
      }
    }

    /// <summary>Field number for the "unUseFlag" field.</summary>
    public const int UnUseFlagFieldNumber = 7;
    private int unUseFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnUseFlag {
      get { return unUseFlag_; }
      set {
        unUseFlag_ = value;
      }
    }

    /// <summary>Field number for the "standardCost" field.</summary>
    public const int StandardCostFieldNumber = 8;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal standardCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal StandardCost {
      get { return standardCost_; }
      set {
        standardCost_ = value;
      }
    }

    /// <summary>Field number for the "currentCost" field.</summary>
    public const int CurrentCostFieldNumber = 9;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal currentCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal CurrentCost {
      get { return currentCost_; }
      set {
        currentCost_ = value;
      }
    }

    /// <summary>Field number for the "partType" field.</summary>
    public const int PartTypeFieldNumber = 10;
    private string partType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartType {
      get { return partType_; }
      set {
        partType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safetyQty2" field.</summary>
    public const int SafetyQty2FieldNumber = 11;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal safetyQty2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal SafetyQty2 {
      get { return safetyQty2_; }
      set {
        safetyQty2_ = value;
      }
    }

    /// <summary>Field number for the "reOrderLevel2" field.</summary>
    public const int ReOrderLevel2FieldNumber = 12;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal reOrderLevel2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal ReOrderLevel2 {
      get { return reOrderLevel2_; }
      set {
        reOrderLevel2_ = value;
      }
    }

    /// <summary>Field number for the "partName2" field.</summary>
    public const int PartName2FieldNumber = 13;
    private string partName2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartName2 {
      get { return partName2_; }
      set {
        partName2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stockTypeFlag" field.</summary>
    public const int StockTypeFlagFieldNumber = 14;
    private static readonly pb::FieldCodec<int?> _single_stockTypeFlag_codec = pb::FieldCodec.ForStructWrapper<int>(114);
    private int? stockTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? StockTypeFlag {
      get { return stockTypeFlag_; }
      set {
        stockTypeFlag_ = value;
      }
    }


    /// <summary>Field number for the "packingUnitQuantity" field.</summary>
    public const int PackingUnitQuantityFieldNumber = 15;
    private global::HaccpManager.PartSpecsProtos.GrpcDecimal packingUnitQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal PackingUnitQuantity {
      get { return packingUnitQuantity_; }
      set {
        packingUnitQuantity_ = value;
      }
    }

    /// <summary>Field number for the "lOTQty" field.</summary>
    public const int LOTQtyFieldNumber = 16;
    private int lOTQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LOTQty {
      get { return lOTQty_; }
      set {
        lOTQty_ = value;
      }
    }

    /// <summary>Field number for the "roundingFlag" field.</summary>
    public const int RoundingFlagFieldNumber = 17;
    private int roundingFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundingFlag {
      get { return roundingFlag_; }
      set {
        roundingFlag_ = value;
      }
    }

    /// <summary>Field number for the "partCodeX" field.</summary>
    public const int PartCodeXFieldNumber = 18;
    private string partCodeX_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartCodeX {
      get { return partCodeX_; }
      set {
        partCodeX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partSpecX" field.</summary>
    public const int PartSpecXFieldNumber = 19;
    private string partSpecX_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartSpecX {
      get { return partSpecX_; }
      set {
        partSpecX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measureUnit" field.</summary>
    public const int MeasureUnitFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _single_measureUnit_codec = pb::FieldCodec.ForClassWrapper<string>(162);
    private string measureUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasureUnit {
      get { return measureUnit_; }
      set {
        measureUnit_ = value;
      }
    }


    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _single_route_codec = pb::FieldCodec.ForClassWrapper<string>(170);
    private string route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }


    /// <summary>Field number for the "commodityCode" field.</summary>
    public const int CommodityCodeFieldNumber = 22;
    private static readonly pb::FieldCodec<int?> _single_commodityCode_codec = pb::FieldCodec.ForStructWrapper<int>(178);
    private int? commodityCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? CommodityCode {
      get { return commodityCode_; }
      set {
        commodityCode_ = value;
      }
    }


    /// <summary>Field number for the "remarks" field.</summary>
    public const int RemarksFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _single_remarks_codec = pb::FieldCodec.ForClassWrapper<string>(186);
    private string remarks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks {
      get { return remarks_; }
      set {
        remarks_ = value;
      }
    }


    /// <summary>Field number for the "orderLeadTime" field.</summary>
    public const int OrderLeadTimeFieldNumber = 24;
    private int orderLeadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderLeadTime {
      get { return orderLeadTime_; }
      set {
        orderLeadTime_ = value;
      }
    }

    /// <summary>Field number for the "orderCoverPeriod" field.</summary>
    public const int OrderCoverPeriodFieldNumber = 25;
    private int orderCoverPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCoverPeriod {
      get { return orderCoverPeriod_; }
      set {
        orderCoverPeriod_ = value;
      }
    }

    /// <summary>Field number for the "orderIncrement" field.</summary>
    public const int OrderIncrementFieldNumber = 26;
    private int orderIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderIncrement {
      get { return orderIncrement_; }
      set {
        orderIncrement_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _single_model_codec = pb::FieldCodec.ForClassWrapper<string>(218);
    private string model_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }


    /// <summary>Field number for the "moldedPlateNumber" field.</summary>
    public const int MoldedPlateNumberFieldNumber = 28;
    private static readonly pb::FieldCodec<int?> _single_moldedPlateNumber_codec = pb::FieldCodec.ForStructWrapper<int>(226);
    private int? moldedPlateNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MoldedPlateNumber {
      get { return moldedPlateNumber_; }
      set {
        moldedPlateNumber_ = value;
      }
    }


    /// <summary>Field number for the "partGroupCode" field.</summary>
    public const int PartGroupCodeFieldNumber = 29;
    private static readonly pb::FieldCodec<string> _single_partGroupCode_codec = pb::FieldCodec.ForClassWrapper<string>(234);
    private string partGroupCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartGroupCode {
      get { return partGroupCode_; }
      set {
        partGroupCode_ = value;
      }
    }


    /// <summary>Field number for the "seqNo" field.</summary>
    public const int SeqNoFieldNumber = 30;
    private static readonly pb::FieldCodec<int?> _single_seqNo_codec = pb::FieldCodec.ForStructWrapper<int>(242);
    private int? seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }


    /// <summary>Field number for the "partShortName" field.</summary>
    public const int PartShortNameFieldNumber = 31;
    private static readonly pb::FieldCodec<string> _single_partShortName_codec = pb::FieldCodec.ForClassWrapper<string>(250);
    private string partShortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartShortName {
      get { return partShortName_; }
      set {
        partShortName_ = value;
      }
    }


    /// <summary>Field number for the "partClass" field.</summary>
    public const int PartClassFieldNumber = 32;
    private static readonly pb::FieldCodec<string> _single_partClass_codec = pb::FieldCodec.ForClassWrapper<string>(258);
    private string partClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartClass {
      get { return partClass_; }
      set {
        partClass_ = value;
      }
    }


    /// <summary>Field number for the "foodDrugAdministrationItemCode" field.</summary>
    public const int FoodDrugAdministrationItemCodeFieldNumber = 33;
    private static readonly pb::FieldCodec<string> _single_foodDrugAdministrationItemCode_codec = pb::FieldCodec.ForClassWrapper<string>(266);
    private string foodDrugAdministrationItemCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FoodDrugAdministrationItemCode {
      get { return foodDrugAdministrationItemCode_; }
      set {
        foodDrugAdministrationItemCode_ = value;
      }
    }


    /// <summary>Field number for the "Yield" field.</summary>
    public const int YieldFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.PartSpecsProtos.GrpcDecimal Yield {
      get { return oneofYieldCase_ == OneofYieldOneofCase.Yield ? (global::HaccpManager.PartSpecsProtos.GrpcDecimal) oneofYield_ : null; }
      set {
        oneofYield_ = value;
        oneofYieldCase_ = value == null ? OneofYieldOneofCase.None : OneofYieldOneofCase.Yield;
      }
    }

    /// <summary>Field number for the "partType2" field.</summary>
    public const int PartType2FieldNumber = 35;
    private static readonly pb::FieldCodec<int?> _single_partType2_codec = pb::FieldCodec.ForStructWrapper<int>(282);
    private int? partType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? PartType2 {
      get { return partType2_; }
      set {
        partType2_ = value;
      }
    }


    /// <summary>Field number for the "barCode" field.</summary>
    public const int BarCodeFieldNumber = 36;
    private static readonly pb::FieldCodec<string> _single_barCode_codec = pb::FieldCodec.ForClassWrapper<string>(290);
    private string barCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BarCode {
      get { return barCode_; }
      set {
        barCode_ = value;
      }
    }


    private object oneofYield_;
    /// <summary>Enum of possible cases for the "oneofYield" oneof.</summary>
    public enum OneofYieldOneofCase {
      None = 0,
      Yield = 34,
    }
    private OneofYieldOneofCase oneofYieldCase_ = OneofYieldOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofYieldOneofCase OneofYieldCase {
      get { return oneofYieldCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofYield() {
      oneofYieldCase_ = OneofYieldOneofCase.None;
      oneofYield_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartCode != other.PartCode) return false;
      if (PartSpec != other.PartSpec) return false;
      if (!object.Equals(LogicalWeight, other.LogicalWeight)) return false;
      if (!object.Equals(ScrapPercent, other.ScrapPercent)) return false;
      if (Bin != other.Bin) return false;
      if (!object.Equals(NextCycleCount, other.NextCycleCount)) return false;
      if (UnUseFlag != other.UnUseFlag) return false;
      if (!object.Equals(StandardCost, other.StandardCost)) return false;
      if (!object.Equals(CurrentCost, other.CurrentCost)) return false;
      if (PartType != other.PartType) return false;
      if (!object.Equals(SafetyQty2, other.SafetyQty2)) return false;
      if (!object.Equals(ReOrderLevel2, other.ReOrderLevel2)) return false;
      if (PartName2 != other.PartName2) return false;
      if (StockTypeFlag != other.StockTypeFlag) return false;
      if (!object.Equals(PackingUnitQuantity, other.PackingUnitQuantity)) return false;
      if (LOTQty != other.LOTQty) return false;
      if (RoundingFlag != other.RoundingFlag) return false;
      if (PartCodeX != other.PartCodeX) return false;
      if (PartSpecX != other.PartSpecX) return false;
      if (MeasureUnit != other.MeasureUnit) return false;
      if (Route != other.Route) return false;
      if (CommodityCode != other.CommodityCode) return false;
      if (Remarks != other.Remarks) return false;
      if (OrderLeadTime != other.OrderLeadTime) return false;
      if (OrderCoverPeriod != other.OrderCoverPeriod) return false;
      if (OrderIncrement != other.OrderIncrement) return false;
      if (Model != other.Model) return false;
      if (MoldedPlateNumber != other.MoldedPlateNumber) return false;
      if (PartGroupCode != other.PartGroupCode) return false;
      if (SeqNo != other.SeqNo) return false;
      if (PartShortName != other.PartShortName) return false;
      if (PartClass != other.PartClass) return false;
      if (FoodDrugAdministrationItemCode != other.FoodDrugAdministrationItemCode) return false;
      if (!object.Equals(Yield, other.Yield)) return false;
      if (PartType2 != other.PartType2) return false;
      if (BarCode != other.BarCode) return false;
      if (OneofYieldCase != other.OneofYieldCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartCode.Length != 0) hash ^= PartCode.GetHashCode();
      if (PartSpec.Length != 0) hash ^= PartSpec.GetHashCode();
      if (logicalWeight_ != null) hash ^= LogicalWeight.GetHashCode();
      if (scrapPercent_ != null) hash ^= ScrapPercent.GetHashCode();
      if (Bin.Length != 0) hash ^= Bin.GetHashCode();
      if (nextCycleCount_ != null) hash ^= NextCycleCount.GetHashCode();
      if (UnUseFlag != 0) hash ^= UnUseFlag.GetHashCode();
      if (standardCost_ != null) hash ^= StandardCost.GetHashCode();
      if (currentCost_ != null) hash ^= CurrentCost.GetHashCode();
      if (PartType.Length != 0) hash ^= PartType.GetHashCode();
      if (safetyQty2_ != null) hash ^= SafetyQty2.GetHashCode();
      if (reOrderLevel2_ != null) hash ^= ReOrderLevel2.GetHashCode();
      if (PartName2.Length != 0) hash ^= PartName2.GetHashCode();
      if (stockTypeFlag_ != null) hash ^= StockTypeFlag.GetHashCode();
      if (packingUnitQuantity_ != null) hash ^= PackingUnitQuantity.GetHashCode();
      if (LOTQty != 0) hash ^= LOTQty.GetHashCode();
      if (RoundingFlag != 0) hash ^= RoundingFlag.GetHashCode();
      if (PartCodeX.Length != 0) hash ^= PartCodeX.GetHashCode();
      if (PartSpecX.Length != 0) hash ^= PartSpecX.GetHashCode();
      if (measureUnit_ != null) hash ^= MeasureUnit.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (commodityCode_ != null) hash ^= CommodityCode.GetHashCode();
      if (remarks_ != null) hash ^= Remarks.GetHashCode();
      if (OrderLeadTime != 0) hash ^= OrderLeadTime.GetHashCode();
      if (OrderCoverPeriod != 0) hash ^= OrderCoverPeriod.GetHashCode();
      if (OrderIncrement != 0) hash ^= OrderIncrement.GetHashCode();
      if (model_ != null) hash ^= Model.GetHashCode();
      if (moldedPlateNumber_ != null) hash ^= MoldedPlateNumber.GetHashCode();
      if (partGroupCode_ != null) hash ^= PartGroupCode.GetHashCode();
      if (seqNo_ != null) hash ^= SeqNo.GetHashCode();
      if (partShortName_ != null) hash ^= PartShortName.GetHashCode();
      if (partClass_ != null) hash ^= PartClass.GetHashCode();
      if (foodDrugAdministrationItemCode_ != null) hash ^= FoodDrugAdministrationItemCode.GetHashCode();
      if (oneofYieldCase_ == OneofYieldOneofCase.Yield) hash ^= Yield.GetHashCode();
      if (partType2_ != null) hash ^= PartType2.GetHashCode();
      if (barCode_ != null) hash ^= BarCode.GetHashCode();
      hash ^= (int) oneofYieldCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PartCode);
      }
      if (PartSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PartSpec);
      }
      if (logicalWeight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LogicalWeight);
      }
      if (scrapPercent_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ScrapPercent);
      }
      if (Bin.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Bin);
      }
      if (nextCycleCount_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(NextCycleCount);
      }
      if (UnUseFlag != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(UnUseFlag);
      }
      if (standardCost_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StandardCost);
      }
      if (currentCost_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CurrentCost);
      }
      if (PartType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PartType);
      }
      if (safetyQty2_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SafetyQty2);
      }
      if (reOrderLevel2_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ReOrderLevel2);
      }
      if (PartName2.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PartName2);
      }
      if (stockTypeFlag_ != null) {
        _single_stockTypeFlag_codec.WriteTagAndValue(output, StockTypeFlag);
      }
      if (packingUnitQuantity_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PackingUnitQuantity);
      }
      if (LOTQty != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(LOTQty);
      }
      if (RoundingFlag != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(RoundingFlag);
      }
      if (PartCodeX.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PartCodeX);
      }
      if (PartSpecX.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PartSpecX);
      }
      if (measureUnit_ != null) {
        _single_measureUnit_codec.WriteTagAndValue(output, MeasureUnit);
      }
      if (route_ != null) {
        _single_route_codec.WriteTagAndValue(output, Route);
      }
      if (commodityCode_ != null) {
        _single_commodityCode_codec.WriteTagAndValue(output, CommodityCode);
      }
      if (remarks_ != null) {
        _single_remarks_codec.WriteTagAndValue(output, Remarks);
      }
      if (OrderLeadTime != 0) {
        output.WriteRawTag(192, 1);
        output.WriteSInt32(OrderLeadTime);
      }
      if (OrderCoverPeriod != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(OrderCoverPeriod);
      }
      if (OrderIncrement != 0) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(OrderIncrement);
      }
      if (model_ != null) {
        _single_model_codec.WriteTagAndValue(output, Model);
      }
      if (moldedPlateNumber_ != null) {
        _single_moldedPlateNumber_codec.WriteTagAndValue(output, MoldedPlateNumber);
      }
      if (partGroupCode_ != null) {
        _single_partGroupCode_codec.WriteTagAndValue(output, PartGroupCode);
      }
      if (seqNo_ != null) {
        _single_seqNo_codec.WriteTagAndValue(output, SeqNo);
      }
      if (partShortName_ != null) {
        _single_partShortName_codec.WriteTagAndValue(output, PartShortName);
      }
      if (partClass_ != null) {
        _single_partClass_codec.WriteTagAndValue(output, PartClass);
      }
      if (foodDrugAdministrationItemCode_ != null) {
        _single_foodDrugAdministrationItemCode_codec.WriteTagAndValue(output, FoodDrugAdministrationItemCode);
      }
      if (oneofYieldCase_ == OneofYieldOneofCase.Yield) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Yield);
      }
      if (partType2_ != null) {
        _single_partType2_codec.WriteTagAndValue(output, PartType2);
      }
      if (barCode_ != null) {
        _single_barCode_codec.WriteTagAndValue(output, BarCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartCode);
      }
      if (PartSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartSpec);
      }
      if (logicalWeight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogicalWeight);
      }
      if (scrapPercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScrapPercent);
      }
      if (Bin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bin);
      }
      if (nextCycleCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextCycleCount);
      }
      if (UnUseFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UnUseFlag);
      }
      if (standardCost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandardCost);
      }
      if (currentCost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentCost);
      }
      if (PartType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartType);
      }
      if (safetyQty2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SafetyQty2);
      }
      if (reOrderLevel2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReOrderLevel2);
      }
      if (PartName2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartName2);
      }
      if (stockTypeFlag_ != null) {
        size += _single_stockTypeFlag_codec.CalculateSizeWithTag(StockTypeFlag);
      }
      if (packingUnitQuantity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PackingUnitQuantity);
      }
      if (LOTQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(LOTQty);
      }
      if (RoundingFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RoundingFlag);
      }
      if (PartCodeX.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PartCodeX);
      }
      if (PartSpecX.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PartSpecX);
      }
      if (measureUnit_ != null) {
        size += _single_measureUnit_codec.CalculateSizeWithTag(MeasureUnit);
      }
      if (route_ != null) {
        size += _single_route_codec.CalculateSizeWithTag(Route);
      }
      if (commodityCode_ != null) {
        size += _single_commodityCode_codec.CalculateSizeWithTag(CommodityCode);
      }
      if (remarks_ != null) {
        size += _single_remarks_codec.CalculateSizeWithTag(Remarks);
      }
      if (OrderLeadTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OrderLeadTime);
      }
      if (OrderCoverPeriod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OrderCoverPeriod);
      }
      if (OrderIncrement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OrderIncrement);
      }
      if (model_ != null) {
        size += _single_model_codec.CalculateSizeWithTag(Model);
      }
      if (moldedPlateNumber_ != null) {
        size += _single_moldedPlateNumber_codec.CalculateSizeWithTag(MoldedPlateNumber);
      }
      if (partGroupCode_ != null) {
        size += _single_partGroupCode_codec.CalculateSizeWithTag(PartGroupCode);
      }
      if (seqNo_ != null) {
        size += _single_seqNo_codec.CalculateSizeWithTag(SeqNo);
      }
      if (partShortName_ != null) {
        size += _single_partShortName_codec.CalculateSizeWithTag(PartShortName);
      }
      if (partClass_ != null) {
        size += _single_partClass_codec.CalculateSizeWithTag(PartClass);
      }
      if (foodDrugAdministrationItemCode_ != null) {
        size += _single_foodDrugAdministrationItemCode_codec.CalculateSizeWithTag(FoodDrugAdministrationItemCode);
      }
      if (oneofYieldCase_ == OneofYieldOneofCase.Yield) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Yield);
      }
      if (partType2_ != null) {
        size += _single_partType2_codec.CalculateSizeWithTag(PartType2);
      }
      if (barCode_ != null) {
        size += _single_barCode_codec.CalculateSizeWithTag(BarCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.PartCode.Length != 0) {
        PartCode = other.PartCode;
      }
      if (other.PartSpec.Length != 0) {
        PartSpec = other.PartSpec;
      }
      if (other.logicalWeight_ != null) {
        if (logicalWeight_ == null) {
          LogicalWeight = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        LogicalWeight.MergeFrom(other.LogicalWeight);
      }
      if (other.scrapPercent_ != null) {
        if (scrapPercent_ == null) {
          ScrapPercent = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        ScrapPercent.MergeFrom(other.ScrapPercent);
      }
      if (other.Bin.Length != 0) {
        Bin = other.Bin;
      }
      if (other.nextCycleCount_ != null) {
        if (nextCycleCount_ == null) {
          NextCycleCount = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NextCycleCount.MergeFrom(other.NextCycleCount);
      }
      if (other.UnUseFlag != 0) {
        UnUseFlag = other.UnUseFlag;
      }
      if (other.standardCost_ != null) {
        if (standardCost_ == null) {
          StandardCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        StandardCost.MergeFrom(other.StandardCost);
      }
      if (other.currentCost_ != null) {
        if (currentCost_ == null) {
          CurrentCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        CurrentCost.MergeFrom(other.CurrentCost);
      }
      if (other.PartType.Length != 0) {
        PartType = other.PartType;
      }
      if (other.safetyQty2_ != null) {
        if (safetyQty2_ == null) {
          SafetyQty2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        SafetyQty2.MergeFrom(other.SafetyQty2);
      }
      if (other.reOrderLevel2_ != null) {
        if (reOrderLevel2_ == null) {
          ReOrderLevel2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        ReOrderLevel2.MergeFrom(other.ReOrderLevel2);
      }
      if (other.PartName2.Length != 0) {
        PartName2 = other.PartName2;
      }
      if (other.stockTypeFlag_ != null) {
        if (stockTypeFlag_ == null || other.StockTypeFlag != 0) {
          StockTypeFlag = other.StockTypeFlag;
        }
      }
      if (other.packingUnitQuantity_ != null) {
        if (packingUnitQuantity_ == null) {
          PackingUnitQuantity = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
        }
        PackingUnitQuantity.MergeFrom(other.PackingUnitQuantity);
      }
      if (other.LOTQty != 0) {
        LOTQty = other.LOTQty;
      }
      if (other.RoundingFlag != 0) {
        RoundingFlag = other.RoundingFlag;
      }
      if (other.PartCodeX.Length != 0) {
        PartCodeX = other.PartCodeX;
      }
      if (other.PartSpecX.Length != 0) {
        PartSpecX = other.PartSpecX;
      }
      if (other.measureUnit_ != null) {
        if (measureUnit_ == null || other.MeasureUnit != "") {
          MeasureUnit = other.MeasureUnit;
        }
      }
      if (other.route_ != null) {
        if (route_ == null || other.Route != "") {
          Route = other.Route;
        }
      }
      if (other.commodityCode_ != null) {
        if (commodityCode_ == null || other.CommodityCode != 0) {
          CommodityCode = other.CommodityCode;
        }
      }
      if (other.remarks_ != null) {
        if (remarks_ == null || other.Remarks != "") {
          Remarks = other.Remarks;
        }
      }
      if (other.OrderLeadTime != 0) {
        OrderLeadTime = other.OrderLeadTime;
      }
      if (other.OrderCoverPeriod != 0) {
        OrderCoverPeriod = other.OrderCoverPeriod;
      }
      if (other.OrderIncrement != 0) {
        OrderIncrement = other.OrderIncrement;
      }
      if (other.model_ != null) {
        if (model_ == null || other.Model != "") {
          Model = other.Model;
        }
      }
      if (other.moldedPlateNumber_ != null) {
        if (moldedPlateNumber_ == null || other.MoldedPlateNumber != 0) {
          MoldedPlateNumber = other.MoldedPlateNumber;
        }
      }
      if (other.partGroupCode_ != null) {
        if (partGroupCode_ == null || other.PartGroupCode != "") {
          PartGroupCode = other.PartGroupCode;
        }
      }
      if (other.seqNo_ != null) {
        if (seqNo_ == null || other.SeqNo != 0) {
          SeqNo = other.SeqNo;
        }
      }
      if (other.partShortName_ != null) {
        if (partShortName_ == null || other.PartShortName != "") {
          PartShortName = other.PartShortName;
        }
      }
      if (other.partClass_ != null) {
        if (partClass_ == null || other.PartClass != "") {
          PartClass = other.PartClass;
        }
      }
      if (other.foodDrugAdministrationItemCode_ != null) {
        if (foodDrugAdministrationItemCode_ == null || other.FoodDrugAdministrationItemCode != "") {
          FoodDrugAdministrationItemCode = other.FoodDrugAdministrationItemCode;
        }
      }
      if (other.partType2_ != null) {
        if (partType2_ == null || other.PartType2 != 0) {
          PartType2 = other.PartType2;
        }
      }
      if (other.barCode_ != null) {
        if (barCode_ == null || other.BarCode != "") {
          BarCode = other.BarCode;
        }
      }
      switch (other.OneofYieldCase) {
        case OneofYieldOneofCase.Yield:
          if (Yield == null) {
            Yield = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
          }
          Yield.MergeFrom(other.Yield);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartCode = input.ReadString();
            break;
          }
          case 18: {
            PartSpec = input.ReadString();
            break;
          }
          case 26: {
            if (logicalWeight_ == null) {
              LogicalWeight = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(LogicalWeight);
            break;
          }
          case 34: {
            if (scrapPercent_ == null) {
              ScrapPercent = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(ScrapPercent);
            break;
          }
          case 42: {
            Bin = input.ReadString();
            break;
          }
          case 50: {
            if (nextCycleCount_ == null) {
              NextCycleCount = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NextCycleCount);
            break;
          }
          case 56: {
            UnUseFlag = input.ReadSInt32();
            break;
          }
          case 66: {
            if (standardCost_ == null) {
              StandardCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(StandardCost);
            break;
          }
          case 74: {
            if (currentCost_ == null) {
              CurrentCost = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(CurrentCost);
            break;
          }
          case 82: {
            PartType = input.ReadString();
            break;
          }
          case 90: {
            if (safetyQty2_ == null) {
              SafetyQty2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(SafetyQty2);
            break;
          }
          case 98: {
            if (reOrderLevel2_ == null) {
              ReOrderLevel2 = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(ReOrderLevel2);
            break;
          }
          case 106: {
            PartName2 = input.ReadString();
            break;
          }
          case 114: {
            int? value = _single_stockTypeFlag_codec.Read(input);
            if (stockTypeFlag_ == null || value != 0) {
              StockTypeFlag = value;
            }
            break;
          }
          case 122: {
            if (packingUnitQuantity_ == null) {
              PackingUnitQuantity = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            }
            input.ReadMessage(PackingUnitQuantity);
            break;
          }
          case 128: {
            LOTQty = input.ReadSInt32();
            break;
          }
          case 136: {
            RoundingFlag = input.ReadSInt32();
            break;
          }
          case 146: {
            PartCodeX = input.ReadString();
            break;
          }
          case 154: {
            PartSpecX = input.ReadString();
            break;
          }
          case 162: {
            string value = _single_measureUnit_codec.Read(input);
            if (measureUnit_ == null || value != "") {
              MeasureUnit = value;
            }
            break;
          }
          case 170: {
            string value = _single_route_codec.Read(input);
            if (route_ == null || value != "") {
              Route = value;
            }
            break;
          }
          case 178: {
            int? value = _single_commodityCode_codec.Read(input);
            if (commodityCode_ == null || value != 0) {
              CommodityCode = value;
            }
            break;
          }
          case 186: {
            string value = _single_remarks_codec.Read(input);
            if (remarks_ == null || value != "") {
              Remarks = value;
            }
            break;
          }
          case 192: {
            OrderLeadTime = input.ReadSInt32();
            break;
          }
          case 200: {
            OrderCoverPeriod = input.ReadSInt32();
            break;
          }
          case 208: {
            OrderIncrement = input.ReadSInt32();
            break;
          }
          case 218: {
            string value = _single_model_codec.Read(input);
            if (model_ == null || value != "") {
              Model = value;
            }
            break;
          }
          case 226: {
            int? value = _single_moldedPlateNumber_codec.Read(input);
            if (moldedPlateNumber_ == null || value != 0) {
              MoldedPlateNumber = value;
            }
            break;
          }
          case 234: {
            string value = _single_partGroupCode_codec.Read(input);
            if (partGroupCode_ == null || value != "") {
              PartGroupCode = value;
            }
            break;
          }
          case 242: {
            int? value = _single_seqNo_codec.Read(input);
            if (seqNo_ == null || value != 0) {
              SeqNo = value;
            }
            break;
          }
          case 250: {
            string value = _single_partShortName_codec.Read(input);
            if (partShortName_ == null || value != "") {
              PartShortName = value;
            }
            break;
          }
          case 258: {
            string value = _single_partClass_codec.Read(input);
            if (partClass_ == null || value != "") {
              PartClass = value;
            }
            break;
          }
          case 266: {
            string value = _single_foodDrugAdministrationItemCode_codec.Read(input);
            if (foodDrugAdministrationItemCode_ == null || value != "") {
              FoodDrugAdministrationItemCode = value;
            }
            break;
          }
          case 274: {
            global::HaccpManager.PartSpecsProtos.GrpcDecimal subBuilder = new global::HaccpManager.PartSpecsProtos.GrpcDecimal();
            if (oneofYieldCase_ == OneofYieldOneofCase.Yield) {
              subBuilder.MergeFrom(Yield);
            }
            input.ReadMessage(subBuilder);
            Yield = subBuilder;
            break;
          }
          case 282: {
            int? value = _single_partType2_codec.Read(input);
            if (partType2_ == null || value != 0) {
              PartType2 = value;
            }
            break;
          }
          case 290: {
            string value = _single_barCode_codec.Read(input);
            if (barCode_ == null || value != "") {
              BarCode = value;
            }
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateResponse : pb::IMessage<UpdateResponse> {
    private static readonly pb::MessageParser<UpdateResponse> _parser = new pb::MessageParser<UpdateResponse>(() => new UpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse(UpdateResponse other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse Clone() {
      return new UpdateResponse(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      partCode_ = other.partCode_;
      partSpec_ = other.partSpec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "partCode" field.</summary>
    public const int PartCodeFieldNumber = 1;
    private string partCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartCode {
      get { return partCode_; }
      set {
        partCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partSpec" field.</summary>
    public const int PartSpecFieldNumber = 2;
    private string partSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartSpec {
      get { return partSpec_; }
      set {
        partSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartCode != other.PartCode) return false;
      if (PartSpec != other.PartSpec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartCode.Length != 0) hash ^= PartCode.GetHashCode();
      if (PartSpec.Length != 0) hash ^= PartSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PartCode);
      }
      if (PartSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PartSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartCode);
      }
      if (PartSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.PartCode.Length != 0) {
        PartCode = other.PartCode;
      }
      if (other.PartSpec.Length != 0) {
        PartSpec = other.PartSpec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PartCode = input.ReadString();
            break;
          }
          case 18: {
            PartSpec = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.PartSpecsProtos.PartSpecsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
