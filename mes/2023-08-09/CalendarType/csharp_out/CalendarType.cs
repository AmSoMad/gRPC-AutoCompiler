// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mes/CalendarType.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HaccpManager.CalendarTypeProtos {

  /// <summary>Holder for reflection information generated from mes/CalendarType.proto</summary>
  public static partial class CalendarTypeReflection {

    #region Descriptor
    /// <summary>File descriptor for mes/CalendarType.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CalendarTypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZtZXMvQ2FsZW5kYXJUeXBlLnByb3RvEg9DYWxlbmRhclR5cGVTdmMaH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90b2J1",
            "Zi9kdXJhdGlvbi5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnBy",
            "b3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8iKwoLR3JwY0RlY2lt",
            "YWwSDQoFdW5pdHMYASABKAMSDQoFbmFub3MYAiABKA8iQAoUQ2FsZW5kYXJU",
            "eXBlUmVzcG9uc2USFAoMY2FsZW5kYXJUeXBlGAEgASgMEhIKCmpzb25TdHJp",
            "bmcYAiABKAkiRgoXQ2FsZW5kYXJUeXBlU2V0UmVzcG9uc2USFwoPY2FsZW5k",
            "YXJUeXBlU2V0GAEgASgMEhIKCmpzb25TdHJpbmcYAiABKAkiNgoPRGF0YVNl",
            "dFJlc3BvbnNlEg8KB2RhdGFTZXQYASABKAwSEgoKanNvblN0cmluZxgCIAEo",
            "CSInCg9HZXRCeUtleVJlcXVlc3QSFAoMY2FsZW5kYXJUeXBlGAEgASgRIpoB",
            "Cg1JbnNlcnRSZXF1ZXN0EhQKDGNhbGVuZGFyVHlwZRgBIAEoERIYChBjYWxl",
            "bmRhclR5cGVOYW1lGAIgASgJEgsKA21vbhgDIAEoERILCgN0dWUYBCABKBES",
            "CwoDd2VkGAUgASgREgsKA3RodRgGIAEoERILCgNmcmkYByABKBESCwoDc2F0",
            "GAggASgREgsKA3N1bhgJIAEoESKaAQoNVXBkYXRlUmVxdWVzdBIUCgxjYWxl",
            "bmRhclR5cGUYASABKBESGAoQY2FsZW5kYXJUeXBlTmFtZRgCIAEoCRILCgNt",
            "b24YAyABKBESCwoDdHVlGAQgASgREgsKA3dlZBgFIAEoERILCgN0aHUYBiAB",
            "KBESCwoDZnJpGAcgASgREgsKA3NhdBgIIAEoERILCgNzdW4YCSABKBEiHwoO",
            "VXBkYXRlUmVzcG9uc2USDQoFY291bnQYASABKAUiJQoNRGVsZXRlUmVxdWVz",
            "dBIUCgxjYWxlbmRhclR5cGUYASABKBEiHwoORGVsZXRlUmVzcG9uc2USDQoF",
            "Y291bnQYASABKAUylAUKDENhbGVuZGFyVHlwZRJTCghHZXRCeUtleRIgLkNh",
            "bGVuZGFyVHlwZVN2Yy5HZXRCeUtleVJlcXVlc3QaJS5DYWxlbmRhclR5cGVT",
            "dmMuQ2FsZW5kYXJUeXBlUmVzcG9uc2USVwoMR2V0QnlLZXlKc29uEiAuQ2Fs",
            "ZW5kYXJUeXBlU3ZjLkdldEJ5S2V5UmVxdWVzdBolLkNhbGVuZGFyVHlwZVN2",
            "Yy5DYWxlbmRhclR5cGVSZXNwb25zZRJKCgZHZXRBbGwSFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkaKC5DYWxlbmRhclR5cGVTdmMuQ2FsZW5kYXJUeXBlU2V0",
            "UmVzcG9uc2USTgoKR2V0QWxsSnNvbhIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eRooLkNhbGVuZGFyVHlwZVN2Yy5DYWxlbmRhclR5cGVTZXRSZXNwb25zZRJP",
            "CgZJbnNlcnQSHi5DYWxlbmRhclR5cGVTdmMuSW5zZXJ0UmVxdWVzdBolLkNh",
            "bGVuZGFyVHlwZVN2Yy5DYWxlbmRhclR5cGVSZXNwb25zZRJTCgpJbnNlcnRK",
            "c29uEh4uQ2FsZW5kYXJUeXBlU3ZjLkluc2VydFJlcXVlc3QaJS5DYWxlbmRh",
            "clR5cGVTdmMuQ2FsZW5kYXJUeXBlUmVzcG9uc2USSQoGVXBkYXRlEh4uQ2Fs",
            "ZW5kYXJUeXBlU3ZjLlVwZGF0ZVJlcXVlc3QaHy5DYWxlbmRhclR5cGVTdmMu",
            "VXBkYXRlUmVzcG9uc2USSQoGRGVsZXRlEh4uQ2FsZW5kYXJUeXBlU3ZjLkRl",
            "bGV0ZVJlcXVlc3QaHy5DYWxlbmRhclR5cGVTdmMuRGVsZXRlUmVzcG9uc2VC",
            "IqoCH0hhY2NwTWFuYWdlci5DYWxlbmRhclR5cGVQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.GrpcDecimal), global::HaccpManager.CalendarTypeProtos.GrpcDecimal.Parser, new[]{ "Units", "Nanos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.CalendarTypeResponse), global::HaccpManager.CalendarTypeProtos.CalendarTypeResponse.Parser, new[]{ "CalendarType", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.CalendarTypeSetResponse), global::HaccpManager.CalendarTypeProtos.CalendarTypeSetResponse.Parser, new[]{ "CalendarTypeSet", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.DataSetResponse), global::HaccpManager.CalendarTypeProtos.DataSetResponse.Parser, new[]{ "DataSet", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.GetByKeyRequest), global::HaccpManager.CalendarTypeProtos.GetByKeyRequest.Parser, new[]{ "CalendarType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.InsertRequest), global::HaccpManager.CalendarTypeProtos.InsertRequest.Parser, new[]{ "CalendarType", "CalendarTypeName", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.UpdateRequest), global::HaccpManager.CalendarTypeProtos.UpdateRequest.Parser, new[]{ "CalendarType", "CalendarTypeName", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.UpdateResponse), global::HaccpManager.CalendarTypeProtos.UpdateResponse.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.DeleteRequest), global::HaccpManager.CalendarTypeProtos.DeleteRequest.Parser, new[]{ "CalendarType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CalendarTypeProtos.DeleteResponse), global::HaccpManager.CalendarTypeProtos.DeleteResponse.Parser, new[]{ "Count" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GrpcDecimal : pb::IMessage<GrpcDecimal> {
    private static readonly pb::MessageParser<GrpcDecimal> _parser = new pb::MessageParser<GrpcDecimal>(() => new GrpcDecimal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcDecimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal(GrpcDecimal other) : this() {
      units_ = other.units_;
      nanos_ = other.nanos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal Clone() {
      return new GrpcDecimal(this);
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private long units_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Units {
      get { return units_; }
      set {
        units_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcDecimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcDecimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Units != other.Units) return false;
      if (Nanos != other.Nanos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Units != 0L) hash ^= Units.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Units != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Units);
      }
      if (Nanos != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Nanos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Units != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Units);
      }
      if (Nanos != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcDecimal other) {
      if (other == null) {
        return;
      }
      if (other.Units != 0L) {
        Units = other.Units;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Units = input.ReadInt64();
            break;
          }
          case 21: {
            Nanos = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalendarTypeResponse : pb::IMessage<CalendarTypeResponse> {
    private static readonly pb::MessageParser<CalendarTypeResponse> _parser = new pb::MessageParser<CalendarTypeResponse>(() => new CalendarTypeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalendarTypeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarTypeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarTypeResponse(CalendarTypeResponse other) : this() {
      calendarType_ = other.calendarType_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarTypeResponse Clone() {
      return new CalendarTypeResponse(this);
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 1;
    private pb::ByteString calendarType_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalendarTypeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalendarTypeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CalendarType != other.CalendarType) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CalendarType.Length != 0) hash ^= CalendarType.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CalendarType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CalendarType);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CalendarType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CalendarType);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalendarTypeResponse other) {
      if (other == null) {
        return;
      }
      if (other.CalendarType.Length != 0) {
        CalendarType = other.CalendarType;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CalendarType = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalendarTypeSetResponse : pb::IMessage<CalendarTypeSetResponse> {
    private static readonly pb::MessageParser<CalendarTypeSetResponse> _parser = new pb::MessageParser<CalendarTypeSetResponse>(() => new CalendarTypeSetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalendarTypeSetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarTypeSetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarTypeSetResponse(CalendarTypeSetResponse other) : this() {
      calendarTypeSet_ = other.calendarTypeSet_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalendarTypeSetResponse Clone() {
      return new CalendarTypeSetResponse(this);
    }

    /// <summary>Field number for the "calendarTypeSet" field.</summary>
    public const int CalendarTypeSetFieldNumber = 1;
    private pb::ByteString calendarTypeSet_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CalendarTypeSet {
      get { return calendarTypeSet_; }
      set {
        calendarTypeSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalendarTypeSetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalendarTypeSetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CalendarTypeSet != other.CalendarTypeSet) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CalendarTypeSet.Length != 0) hash ^= CalendarTypeSet.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CalendarTypeSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CalendarTypeSet);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CalendarTypeSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CalendarTypeSet);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalendarTypeSetResponse other) {
      if (other == null) {
        return;
      }
      if (other.CalendarTypeSet.Length != 0) {
        CalendarTypeSet = other.CalendarTypeSet;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CalendarTypeSet = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataSetResponse : pb::IMessage<DataSetResponse> {
    private static readonly pb::MessageParser<DataSetResponse> _parser = new pb::MessageParser<DataSetResponse>(() => new DataSetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse(DataSetResponse other) : this() {
      dataSet_ = other.dataSet_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse Clone() {
      return new DataSetResponse(this);
    }

    /// <summary>Field number for the "dataSet" field.</summary>
    public const int DataSetFieldNumber = 1;
    private pb::ByteString dataSet_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSet {
      get { return dataSet_; }
      set {
        dataSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataSet != other.DataSet) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataSet.Length != 0) hash ^= DataSet.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DataSet);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSet);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSetResponse other) {
      if (other == null) {
        return;
      }
      if (other.DataSet.Length != 0) {
        DataSet = other.DataSet;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataSet = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetByKeyRequest : pb::IMessage<GetByKeyRequest> {
    private static readonly pb::MessageParser<GetByKeyRequest> _parser = new pb::MessageParser<GetByKeyRequest>(() => new GetByKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetByKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest(GetByKeyRequest other) : this() {
      calendarType_ = other.calendarType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest Clone() {
      return new GetByKeyRequest(this);
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 1;
    private int calendarType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetByKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetByKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CalendarType != other.CalendarType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CalendarType != 0) hash ^= CalendarType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CalendarType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CalendarType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CalendarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CalendarType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetByKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.CalendarType != 0) {
        CalendarType = other.CalendarType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CalendarType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertRequest : pb::IMessage<InsertRequest> {
    private static readonly pb::MessageParser<InsertRequest> _parser = new pb::MessageParser<InsertRequest>(() => new InsertRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest(InsertRequest other) : this() {
      calendarType_ = other.calendarType_;
      calendarTypeName_ = other.calendarTypeName_;
      mon_ = other.mon_;
      tue_ = other.tue_;
      wed_ = other.wed_;
      thu_ = other.thu_;
      fri_ = other.fri_;
      sat_ = other.sat_;
      sun_ = other.sun_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest Clone() {
      return new InsertRequest(this);
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 1;
    private int calendarType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = value;
      }
    }

    /// <summary>Field number for the "calendarTypeName" field.</summary>
    public const int CalendarTypeNameFieldNumber = 2;
    private string calendarTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalendarTypeName {
      get { return calendarTypeName_; }
      set {
        calendarTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mon" field.</summary>
    public const int MonFieldNumber = 3;
    private int mon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mon {
      get { return mon_; }
      set {
        mon_ = value;
      }
    }

    /// <summary>Field number for the "tue" field.</summary>
    public const int TueFieldNumber = 4;
    private int tue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tue {
      get { return tue_; }
      set {
        tue_ = value;
      }
    }

    /// <summary>Field number for the "wed" field.</summary>
    public const int WedFieldNumber = 5;
    private int wed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wed {
      get { return wed_; }
      set {
        wed_ = value;
      }
    }

    /// <summary>Field number for the "thu" field.</summary>
    public const int ThuFieldNumber = 6;
    private int thu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Thu {
      get { return thu_; }
      set {
        thu_ = value;
      }
    }

    /// <summary>Field number for the "fri" field.</summary>
    public const int FriFieldNumber = 7;
    private int fri_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fri {
      get { return fri_; }
      set {
        fri_ = value;
      }
    }

    /// <summary>Field number for the "sat" field.</summary>
    public const int SatFieldNumber = 8;
    private int sat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sat {
      get { return sat_; }
      set {
        sat_ = value;
      }
    }

    /// <summary>Field number for the "sun" field.</summary>
    public const int SunFieldNumber = 9;
    private int sun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sun {
      get { return sun_; }
      set {
        sun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CalendarType != other.CalendarType) return false;
      if (CalendarTypeName != other.CalendarTypeName) return false;
      if (Mon != other.Mon) return false;
      if (Tue != other.Tue) return false;
      if (Wed != other.Wed) return false;
      if (Thu != other.Thu) return false;
      if (Fri != other.Fri) return false;
      if (Sat != other.Sat) return false;
      if (Sun != other.Sun) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CalendarType != 0) hash ^= CalendarType.GetHashCode();
      if (CalendarTypeName.Length != 0) hash ^= CalendarTypeName.GetHashCode();
      if (Mon != 0) hash ^= Mon.GetHashCode();
      if (Tue != 0) hash ^= Tue.GetHashCode();
      if (Wed != 0) hash ^= Wed.GetHashCode();
      if (Thu != 0) hash ^= Thu.GetHashCode();
      if (Fri != 0) hash ^= Fri.GetHashCode();
      if (Sat != 0) hash ^= Sat.GetHashCode();
      if (Sun != 0) hash ^= Sun.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CalendarType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CalendarType);
      }
      if (CalendarTypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CalendarTypeName);
      }
      if (Mon != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Mon);
      }
      if (Tue != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Tue);
      }
      if (Wed != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Wed);
      }
      if (Thu != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Thu);
      }
      if (Fri != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Fri);
      }
      if (Sat != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Sat);
      }
      if (Sun != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Sun);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CalendarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CalendarType);
      }
      if (CalendarTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CalendarTypeName);
      }
      if (Mon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Mon);
      }
      if (Tue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Tue);
      }
      if (Wed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Wed);
      }
      if (Thu != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Thu);
      }
      if (Fri != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Fri);
      }
      if (Sat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sat);
      }
      if (Sun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sun);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertRequest other) {
      if (other == null) {
        return;
      }
      if (other.CalendarType != 0) {
        CalendarType = other.CalendarType;
      }
      if (other.CalendarTypeName.Length != 0) {
        CalendarTypeName = other.CalendarTypeName;
      }
      if (other.Mon != 0) {
        Mon = other.Mon;
      }
      if (other.Tue != 0) {
        Tue = other.Tue;
      }
      if (other.Wed != 0) {
        Wed = other.Wed;
      }
      if (other.Thu != 0) {
        Thu = other.Thu;
      }
      if (other.Fri != 0) {
        Fri = other.Fri;
      }
      if (other.Sat != 0) {
        Sat = other.Sat;
      }
      if (other.Sun != 0) {
        Sun = other.Sun;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CalendarType = input.ReadSInt32();
            break;
          }
          case 18: {
            CalendarTypeName = input.ReadString();
            break;
          }
          case 24: {
            Mon = input.ReadSInt32();
            break;
          }
          case 32: {
            Tue = input.ReadSInt32();
            break;
          }
          case 40: {
            Wed = input.ReadSInt32();
            break;
          }
          case 48: {
            Thu = input.ReadSInt32();
            break;
          }
          case 56: {
            Fri = input.ReadSInt32();
            break;
          }
          case 64: {
            Sat = input.ReadSInt32();
            break;
          }
          case 72: {
            Sun = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRequest : pb::IMessage<UpdateRequest> {
    private static readonly pb::MessageParser<UpdateRequest> _parser = new pb::MessageParser<UpdateRequest>(() => new UpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest(UpdateRequest other) : this() {
      calendarType_ = other.calendarType_;
      calendarTypeName_ = other.calendarTypeName_;
      mon_ = other.mon_;
      tue_ = other.tue_;
      wed_ = other.wed_;
      thu_ = other.thu_;
      fri_ = other.fri_;
      sat_ = other.sat_;
      sun_ = other.sun_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest Clone() {
      return new UpdateRequest(this);
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 1;
    private int calendarType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = value;
      }
    }

    /// <summary>Field number for the "calendarTypeName" field.</summary>
    public const int CalendarTypeNameFieldNumber = 2;
    private string calendarTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalendarTypeName {
      get { return calendarTypeName_; }
      set {
        calendarTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mon" field.</summary>
    public const int MonFieldNumber = 3;
    private int mon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mon {
      get { return mon_; }
      set {
        mon_ = value;
      }
    }

    /// <summary>Field number for the "tue" field.</summary>
    public const int TueFieldNumber = 4;
    private int tue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tue {
      get { return tue_; }
      set {
        tue_ = value;
      }
    }

    /// <summary>Field number for the "wed" field.</summary>
    public const int WedFieldNumber = 5;
    private int wed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wed {
      get { return wed_; }
      set {
        wed_ = value;
      }
    }

    /// <summary>Field number for the "thu" field.</summary>
    public const int ThuFieldNumber = 6;
    private int thu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Thu {
      get { return thu_; }
      set {
        thu_ = value;
      }
    }

    /// <summary>Field number for the "fri" field.</summary>
    public const int FriFieldNumber = 7;
    private int fri_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fri {
      get { return fri_; }
      set {
        fri_ = value;
      }
    }

    /// <summary>Field number for the "sat" field.</summary>
    public const int SatFieldNumber = 8;
    private int sat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sat {
      get { return sat_; }
      set {
        sat_ = value;
      }
    }

    /// <summary>Field number for the "sun" field.</summary>
    public const int SunFieldNumber = 9;
    private int sun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sun {
      get { return sun_; }
      set {
        sun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CalendarType != other.CalendarType) return false;
      if (CalendarTypeName != other.CalendarTypeName) return false;
      if (Mon != other.Mon) return false;
      if (Tue != other.Tue) return false;
      if (Wed != other.Wed) return false;
      if (Thu != other.Thu) return false;
      if (Fri != other.Fri) return false;
      if (Sat != other.Sat) return false;
      if (Sun != other.Sun) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CalendarType != 0) hash ^= CalendarType.GetHashCode();
      if (CalendarTypeName.Length != 0) hash ^= CalendarTypeName.GetHashCode();
      if (Mon != 0) hash ^= Mon.GetHashCode();
      if (Tue != 0) hash ^= Tue.GetHashCode();
      if (Wed != 0) hash ^= Wed.GetHashCode();
      if (Thu != 0) hash ^= Thu.GetHashCode();
      if (Fri != 0) hash ^= Fri.GetHashCode();
      if (Sat != 0) hash ^= Sat.GetHashCode();
      if (Sun != 0) hash ^= Sun.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CalendarType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CalendarType);
      }
      if (CalendarTypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CalendarTypeName);
      }
      if (Mon != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Mon);
      }
      if (Tue != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Tue);
      }
      if (Wed != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Wed);
      }
      if (Thu != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Thu);
      }
      if (Fri != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Fri);
      }
      if (Sat != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Sat);
      }
      if (Sun != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Sun);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CalendarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CalendarType);
      }
      if (CalendarTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CalendarTypeName);
      }
      if (Mon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Mon);
      }
      if (Tue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Tue);
      }
      if (Wed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Wed);
      }
      if (Thu != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Thu);
      }
      if (Fri != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Fri);
      }
      if (Sat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sat);
      }
      if (Sun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sun);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CalendarType != 0) {
        CalendarType = other.CalendarType;
      }
      if (other.CalendarTypeName.Length != 0) {
        CalendarTypeName = other.CalendarTypeName;
      }
      if (other.Mon != 0) {
        Mon = other.Mon;
      }
      if (other.Tue != 0) {
        Tue = other.Tue;
      }
      if (other.Wed != 0) {
        Wed = other.Wed;
      }
      if (other.Thu != 0) {
        Thu = other.Thu;
      }
      if (other.Fri != 0) {
        Fri = other.Fri;
      }
      if (other.Sat != 0) {
        Sat = other.Sat;
      }
      if (other.Sun != 0) {
        Sun = other.Sun;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CalendarType = input.ReadSInt32();
            break;
          }
          case 18: {
            CalendarTypeName = input.ReadString();
            break;
          }
          case 24: {
            Mon = input.ReadSInt32();
            break;
          }
          case 32: {
            Tue = input.ReadSInt32();
            break;
          }
          case 40: {
            Wed = input.ReadSInt32();
            break;
          }
          case 48: {
            Thu = input.ReadSInt32();
            break;
          }
          case 56: {
            Fri = input.ReadSInt32();
            break;
          }
          case 64: {
            Sat = input.ReadSInt32();
            break;
          }
          case 72: {
            Sun = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateResponse : pb::IMessage<UpdateResponse> {
    private static readonly pb::MessageParser<UpdateResponse> _parser = new pb::MessageParser<UpdateResponse>(() => new UpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse(UpdateResponse other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse Clone() {
      return new UpdateResponse(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      calendarType_ = other.calendarType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 1;
    private int calendarType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CalendarType != other.CalendarType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CalendarType != 0) hash ^= CalendarType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CalendarType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CalendarType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CalendarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CalendarType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.CalendarType != 0) {
        CalendarType = other.CalendarType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CalendarType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CalendarTypeProtos.CalendarTypeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
