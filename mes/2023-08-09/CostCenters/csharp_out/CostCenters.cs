// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mes/CostCenters.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HaccpManager.CostCentersProtos {

  /// <summary>Holder for reflection information generated from mes/CostCenters.proto</summary>
  public static partial class CostCentersReflection {

    #region Descriptor
    /// <summary>File descriptor for mes/CostCenters.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CostCentersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtZXMvQ29zdENlbnRlcnMucHJvdG8SDkNvc3RDZW50ZXJzU3ZjGh9nb29n",
            "bGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYv",
            "ZHVyYXRpb24ucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90",
            "bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvIisKC0dycGNEZWNpbWFs",
            "Eg0KBXVuaXRzGAEgASgDEg0KBW5hbm9zGAIgASgPIj4KE0Nvc3RDZW50ZXJz",
            "UmVzcG9uc2USEwoLY29zdENlbnRlcnMYASABKAwSEgoKanNvblN0cmluZxgC",
            "IAEoCSJEChZDb3N0Q2VudGVyc1NldFJlc3BvbnNlEhYKDmNvc3RDZW50ZXJz",
            "U2V0GAEgASgMEhIKCmpzb25TdHJpbmcYAiABKAkiNgoPRGF0YVNldFJlc3Bv",
            "bnNlEg8KB2RhdGFTZXQYASABKAwSEgoKanNvblN0cmluZxgCIAEoCSIxChlH",
            "ZXRGb3JDYWxlbmRhclR5cGVSZXF1ZXN0EhQKDGNhbGVuZGFyVHlwZRgBIAEo",
            "ESIuChZHZXRGb3JDdXN0b21lcnNSZXF1ZXN0EhQKDGN1c3RvbWVyQ29kZRgB",
            "IAEoCSIrChVHZXRGb3JMb2NhdGlvblJlcXVlc3QSEgoKbG9jYXRpb25ObxgB",
            "IAEoESI2ChxHZXRGb3JDb3N0Q2VudGVyVHlwZXNSZXF1ZXN0EhYKDmNvc3RD",
            "ZW50ZXJUeXBlGAEgASgJIjwKH0dldEZvckJ1c2luZXNzQ2xhc3NfU2FsZVJl",
            "cXVlc3QSGQoRYnVzaW5lc3NDbGFzc0NvZGUYASABKBEiMgoeR2V0Rm9ySW5z",
            "cGVjdGlvblN5c3RlbXNSZXF1ZXN0EhAKCHN5c3RlbUlEGAEgASgRIi8KGEdl",
            "dEZvck1lYXN1cmVVbml0UmVxdWVzdBITCgttZWFzdXJlVW5pdBgBIAEoCSIl",
            "Cg9HZXRCeUtleVJlcXVlc3QSEgoKY29zdENlbnRlchgBIAEoCSLwCwoNSW5z",
            "ZXJ0UmVxdWVzdBISCgpjb3N0Q2VudGVyGAEgASgJEhQKDGNhbGVuZGFyVHlw",
            "ZRgCIAEoERIWCg5jb3N0Q2VudGVyTmFtZRgDIAEoCRIQCghtYWNoaW5lcxgE",
            "IAEoERI1ChBlZmZlY3RpdmVQZXJjZW50GAUgASgLMhsuQ29zdENlbnRlcnNT",
            "dmMuR3JwY0RlY2ltYWwSMQoMc3RkTGFib3JSYXRlGAYgASgLMhsuQ29zdENl",
            "bnRlcnNTdmMuR3JwY0RlY2ltYWwSMQoMY3VyTGFib3JSYXRlGAcgASgLMhsu",
            "Q29zdENlbnRlcnNTdmMuR3JwY0RlY2ltYWwSMQoMc3RkU2V0dXBSYXRlGAgg",
            "ASgLMhsuQ29zdENlbnRlcnNTdmMuR3JwY0RlY2ltYWwSMQoMY3VyU2V0dXBS",
            "YXRlGAkgASgLMhsuQ29zdENlbnRlcnNTdmMuR3JwY0RlY2ltYWwSNQoQc3Rk",
            "TGFib3JPdmVyaGVhZBgKIAEoCzIbLkNvc3RDZW50ZXJzU3ZjLkdycGNEZWNp",
            "bWFsEjUKEGN1ckxhYm9yT3ZlcmhlYWQYCyABKAsyGy5Db3N0Q2VudGVyc1N2",
            "Yy5HcnBjRGVjaW1hbBI1ChBzdGRTZXR1cE92ZXJoZWFkGAwgASgLMhsuQ29z",
            "dENlbnRlcnNTdmMuR3JwY0RlY2ltYWwSNQoQY3VyU2V0dXBPdmVyaGVhZBgN",
            "IAEoCzIbLkNvc3RDZW50ZXJzU3ZjLkdycGNEZWNpbWFsEjMKDnRyaWFsTGFi",
            "b3JSYXRlGA4gASgLMhsuQ29zdENlbnRlcnNTdmMuR3JwY0RlY2ltYWwSMwoO",
            "dHJpYWxTZXR1cFJhdGUYDyABKAsyGy5Db3N0Q2VudGVyc1N2Yy5HcnBjRGVj",
            "aW1hbBI3ChJ0cmlhbExhYm9yT3ZlcmhlYWQYECABKAsyGy5Db3N0Q2VudGVy",
            "c1N2Yy5HcnBjRGVjaW1hbBI3ChJ0cmlhbFNldHVwT3ZlcmhlYWQYESABKAsy",
            "Gy5Db3N0Q2VudGVyc1N2Yy5HcnBjRGVjaW1hbBIyCgxjdXN0b21lckNvZGUY",
            "EiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSPAoXb3BUaW1l",
            "Q2FsY3VsYXRpb25NZXRob2QYEyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "MzJWYWx1ZRIvCgpsb2NhdGlvbk5vGBQgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDMyVmFsdWUSEQoJd29ya0xldmVsGBUgASgREjQKDmNvc3RDZW50ZXJU",
            "eXBlGBYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEhAKCHdv",
            "cmtUeXBlGBcgASgREi8KCmFkZGVkVmFsdWUYGCABKAsyGy5Db3N0Q2VudGVy",
            "c1N2Yy5HcnBjRGVjaW1hbBISCgpjZW50ZXJUeXBlGBkgASgREjcKEW1hY2hp",
            "bmVDb3N0Q2VudGVyGBogASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1Zh",
            "bHVlEjYKEWJ1c2luZXNzQ2xhc3NDb2RlGBsgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDMyVmFsdWUSEAoIY2FwYUZsYWcYHCABKBESFQoNY2VudGVyTG90",
            "Q2hhchgdIAEoCRIUCgxjZW50ZXJOdW1iZXIYHiABKBESEQoJd29ya01TcGVj",
            "GB8gASgJEg0KBXNlcU5vGCAgASgREi0KCHN5c3RlbUlEGCEgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUSDwoHdXNlRmxhZxgiIAEoERIwCgpt",
            "QUNBZGRyZXNzGCMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "EjQKD291dFNvdXJjaW5nVHlwZRgkIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQzMlZhbHVlEhMKC21lYXN1cmVVbml0GCUgASgJIvALCg1VcGRhdGVSZXF1",
            "ZXN0EhIKCmNvc3RDZW50ZXIYASABKAkSFAoMY2FsZW5kYXJUeXBlGAIgASgR",
            "EhYKDmNvc3RDZW50ZXJOYW1lGAMgASgJEhAKCG1hY2hpbmVzGAQgASgREjUK",
            "EGVmZmVjdGl2ZVBlcmNlbnQYBSABKAsyGy5Db3N0Q2VudGVyc1N2Yy5HcnBj",
            "RGVjaW1hbBIxCgxzdGRMYWJvclJhdGUYBiABKAsyGy5Db3N0Q2VudGVyc1N2",
            "Yy5HcnBjRGVjaW1hbBIxCgxjdXJMYWJvclJhdGUYByABKAsyGy5Db3N0Q2Vu",
            "dGVyc1N2Yy5HcnBjRGVjaW1hbBIxCgxzdGRTZXR1cFJhdGUYCCABKAsyGy5D",
            "b3N0Q2VudGVyc1N2Yy5HcnBjRGVjaW1hbBIxCgxjdXJTZXR1cFJhdGUYCSAB",
            "KAsyGy5Db3N0Q2VudGVyc1N2Yy5HcnBjRGVjaW1hbBI1ChBzdGRMYWJvck92",
            "ZXJoZWFkGAogASgLMhsuQ29zdENlbnRlcnNTdmMuR3JwY0RlY2ltYWwSNQoQ",
            "Y3VyTGFib3JPdmVyaGVhZBgLIAEoCzIbLkNvc3RDZW50ZXJzU3ZjLkdycGNE",
            "ZWNpbWFsEjUKEHN0ZFNldHVwT3ZlcmhlYWQYDCABKAsyGy5Db3N0Q2VudGVy",
            "c1N2Yy5HcnBjRGVjaW1hbBI1ChBjdXJTZXR1cE92ZXJoZWFkGA0gASgLMhsu",
            "Q29zdENlbnRlcnNTdmMuR3JwY0RlY2ltYWwSMwoOdHJpYWxMYWJvclJhdGUY",
            "DiABKAsyGy5Db3N0Q2VudGVyc1N2Yy5HcnBjRGVjaW1hbBIzCg50cmlhbFNl",
            "dHVwUmF0ZRgPIAEoCzIbLkNvc3RDZW50ZXJzU3ZjLkdycGNEZWNpbWFsEjcK",
            "EnRyaWFsTGFib3JPdmVyaGVhZBgQIAEoCzIbLkNvc3RDZW50ZXJzU3ZjLkdy",
            "cGNEZWNpbWFsEjcKEnRyaWFsU2V0dXBPdmVyaGVhZBgRIAEoCzIbLkNvc3RD",
            "ZW50ZXJzU3ZjLkdycGNEZWNpbWFsEjIKDGN1c3RvbWVyQ29kZRgSIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI8ChdvcFRpbWVDYWxjdWxh",
            "dGlvbk1ldGhvZBgTIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVl",
            "Ei8KCmxvY2F0aW9uTm8YFCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJW",
            "YWx1ZRIRCgl3b3JrTGV2ZWwYFSABKBESNAoOY29zdENlbnRlclR5cGUYFiAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSEAoId29ya1R5cGUY",
            "FyABKBESLwoKYWRkZWRWYWx1ZRgYIAEoCzIbLkNvc3RDZW50ZXJzU3ZjLkdy",
            "cGNEZWNpbWFsEhIKCmNlbnRlclR5cGUYGSABKBESNwoRbWFjaGluZUNvc3RD",
            "ZW50ZXIYGiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNgoR",
            "YnVzaW5lc3NDbGFzc0NvZGUYGyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "MzJWYWx1ZRIQCghjYXBhRmxhZxgcIAEoERIVCg1jZW50ZXJMb3RDaGFyGB0g",
            "ASgJEhQKDGNlbnRlck51bWJlchgeIAEoERIRCgl3b3JrTVNwZWMYHyABKAkS",
            "DQoFc2VxTm8YICABKBESLQoIc3lzdGVtSUQYISABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50MzJWYWx1ZRIPCgd1c2VGbGFnGCIgASgREjAKCm1BQ0FkZHJl",
            "c3MYIyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSNAoPb3V0",
            "U291cmNpbmdUeXBlGCQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFs",
            "dWUSEwoLbWVhc3VyZVVuaXQYJSABKAkiHwoOVXBkYXRlUmVzcG9uc2USDQoF",
            "Y291bnQYASABKAUiIwoNRGVsZXRlUmVxdWVzdBISCgpjb3N0Q2VudGVyGAEg",
            "ASgJIh8KDkRlbGV0ZVJlc3BvbnNlEg0KBWNvdW50GAEgASgFMvEQCgtDb3N0",
            "Q2VudGVycxJnChJHZXRGb3JDYWxlbmRhclR5cGUSKS5Db3N0Q2VudGVyc1N2",
            "Yy5HZXRGb3JDYWxlbmRhclR5cGVSZXF1ZXN0GiYuQ29zdENlbnRlcnNTdmMu",
            "Q29zdENlbnRlcnNTZXRSZXNwb25zZRJrChZHZXRGb3JDYWxlbmRhclR5cGVK",
            "c29uEikuQ29zdENlbnRlcnNTdmMuR2V0Rm9yQ2FsZW5kYXJUeXBlUmVxdWVz",
            "dBomLkNvc3RDZW50ZXJzU3ZjLkNvc3RDZW50ZXJzU2V0UmVzcG9uc2USYQoP",
            "R2V0Rm9yQ3VzdG9tZXJzEiYuQ29zdENlbnRlcnNTdmMuR2V0Rm9yQ3VzdG9t",
            "ZXJzUmVxdWVzdBomLkNvc3RDZW50ZXJzU3ZjLkNvc3RDZW50ZXJzU2V0UmVz",
            "cG9uc2USZQoTR2V0Rm9yQ3VzdG9tZXJzSnNvbhImLkNvc3RDZW50ZXJzU3Zj",
            "LkdldEZvckN1c3RvbWVyc1JlcXVlc3QaJi5Db3N0Q2VudGVyc1N2Yy5Db3N0",
            "Q2VudGVyc1NldFJlc3BvbnNlEl8KDkdldEZvckxvY2F0aW9uEiUuQ29zdENl",
            "bnRlcnNTdmMuR2V0Rm9yTG9jYXRpb25SZXF1ZXN0GiYuQ29zdENlbnRlcnNT",
            "dmMuQ29zdENlbnRlcnNTZXRSZXNwb25zZRJjChJHZXRGb3JMb2NhdGlvbkpz",
            "b24SJS5Db3N0Q2VudGVyc1N2Yy5HZXRGb3JMb2NhdGlvblJlcXVlc3QaJi5D",
            "b3N0Q2VudGVyc1N2Yy5Db3N0Q2VudGVyc1NldFJlc3BvbnNlEm0KFUdldEZv",
            "ckNvc3RDZW50ZXJUeXBlcxIsLkNvc3RDZW50ZXJzU3ZjLkdldEZvckNvc3RD",
            "ZW50ZXJUeXBlc1JlcXVlc3QaJi5Db3N0Q2VudGVyc1N2Yy5Db3N0Q2VudGVy",
            "c1NldFJlc3BvbnNlEnEKGUdldEZvckNvc3RDZW50ZXJUeXBlc0pzb24SLC5D",
            "b3N0Q2VudGVyc1N2Yy5HZXRGb3JDb3N0Q2VudGVyVHlwZXNSZXF1ZXN0GiYu",
            "Q29zdENlbnRlcnNTdmMuQ29zdENlbnRlcnNTZXRSZXNwb25zZRJzChhHZXRG",
            "b3JCdXNpbmVzc0NsYXNzX1NhbGUSLy5Db3N0Q2VudGVyc1N2Yy5HZXRGb3JC",
            "dXNpbmVzc0NsYXNzX1NhbGVSZXF1ZXN0GiYuQ29zdENlbnRlcnNTdmMuQ29z",
            "dENlbnRlcnNTZXRSZXNwb25zZRJ3ChxHZXRGb3JCdXNpbmVzc0NsYXNzX1Nh",
            "bGVKc29uEi8uQ29zdENlbnRlcnNTdmMuR2V0Rm9yQnVzaW5lc3NDbGFzc19T",
            "YWxlUmVxdWVzdBomLkNvc3RDZW50ZXJzU3ZjLkNvc3RDZW50ZXJzU2V0UmVz",
            "cG9uc2UScQoXR2V0Rm9ySW5zcGVjdGlvblN5c3RlbXMSLi5Db3N0Q2VudGVy",
            "c1N2Yy5HZXRGb3JJbnNwZWN0aW9uU3lzdGVtc1JlcXVlc3QaJi5Db3N0Q2Vu",
            "dGVyc1N2Yy5Db3N0Q2VudGVyc1NldFJlc3BvbnNlEnUKG0dldEZvckluc3Bl",
            "Y3Rpb25TeXN0ZW1zSnNvbhIuLkNvc3RDZW50ZXJzU3ZjLkdldEZvckluc3Bl",
            "Y3Rpb25TeXN0ZW1zUmVxdWVzdBomLkNvc3RDZW50ZXJzU3ZjLkNvc3RDZW50",
            "ZXJzU2V0UmVzcG9uc2USZQoRR2V0Rm9yTWVhc3VyZVVuaXQSKC5Db3N0Q2Vu",
            "dGVyc1N2Yy5HZXRGb3JNZWFzdXJlVW5pdFJlcXVlc3QaJi5Db3N0Q2VudGVy",
            "c1N2Yy5Db3N0Q2VudGVyc1NldFJlc3BvbnNlEmkKFUdldEZvck1lYXN1cmVV",
            "bml0SnNvbhIoLkNvc3RDZW50ZXJzU3ZjLkdldEZvck1lYXN1cmVVbml0UmVx",
            "dWVzdBomLkNvc3RDZW50ZXJzU3ZjLkNvc3RDZW50ZXJzU2V0UmVzcG9uc2US",
            "UAoIR2V0QnlLZXkSHy5Db3N0Q2VudGVyc1N2Yy5HZXRCeUtleVJlcXVlc3Qa",
            "Iy5Db3N0Q2VudGVyc1N2Yy5Db3N0Q2VudGVyc1Jlc3BvbnNlElQKDEdldEJ5",
            "S2V5SnNvbhIfLkNvc3RDZW50ZXJzU3ZjLkdldEJ5S2V5UmVxdWVzdBojLkNv",
            "c3RDZW50ZXJzU3ZjLkNvc3RDZW50ZXJzUmVzcG9uc2USSAoGR2V0QWxsEhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5GiYuQ29zdENlbnRlcnNTdmMuQ29zdENl",
            "bnRlcnNTZXRSZXNwb25zZRJMCgpHZXRBbGxKc29uEhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5GiYuQ29zdENlbnRlcnNTdmMuQ29zdENlbnRlcnNTZXRSZXNw",
            "b25zZRJMCgZJbnNlcnQSHS5Db3N0Q2VudGVyc1N2Yy5JbnNlcnRSZXF1ZXN0",
            "GiMuQ29zdENlbnRlcnNTdmMuQ29zdENlbnRlcnNSZXNwb25zZRJQCgpJbnNl",
            "cnRKc29uEh0uQ29zdENlbnRlcnNTdmMuSW5zZXJ0UmVxdWVzdBojLkNvc3RD",
            "ZW50ZXJzU3ZjLkNvc3RDZW50ZXJzUmVzcG9uc2USRwoGVXBkYXRlEh0uQ29z",
            "dENlbnRlcnNTdmMuVXBkYXRlUmVxdWVzdBoeLkNvc3RDZW50ZXJzU3ZjLlVw",
            "ZGF0ZVJlc3BvbnNlEkcKBkRlbGV0ZRIdLkNvc3RDZW50ZXJzU3ZjLkRlbGV0",
            "ZVJlcXVlc3QaHi5Db3N0Q2VudGVyc1N2Yy5EZWxldGVSZXNwb25zZUIhqgIe",
            "SGFjY3BNYW5hZ2VyLkNvc3RDZW50ZXJzUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GrpcDecimal), global::HaccpManager.CostCentersProtos.GrpcDecimal.Parser, new[]{ "Units", "Nanos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.CostCentersResponse), global::HaccpManager.CostCentersProtos.CostCentersResponse.Parser, new[]{ "CostCenters", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.CostCentersSetResponse), global::HaccpManager.CostCentersProtos.CostCentersSetResponse.Parser, new[]{ "CostCentersSet", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.DataSetResponse), global::HaccpManager.CostCentersProtos.DataSetResponse.Parser, new[]{ "DataSet", "JsonString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetForCalendarTypeRequest), global::HaccpManager.CostCentersProtos.GetForCalendarTypeRequest.Parser, new[]{ "CalendarType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetForCustomersRequest), global::HaccpManager.CostCentersProtos.GetForCustomersRequest.Parser, new[]{ "CustomerCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetForLocationRequest), global::HaccpManager.CostCentersProtos.GetForLocationRequest.Parser, new[]{ "LocationNo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetForCostCenterTypesRequest), global::HaccpManager.CostCentersProtos.GetForCostCenterTypesRequest.Parser, new[]{ "CostCenterType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetForBusinessClass_SaleRequest), global::HaccpManager.CostCentersProtos.GetForBusinessClass_SaleRequest.Parser, new[]{ "BusinessClassCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetForInspectionSystemsRequest), global::HaccpManager.CostCentersProtos.GetForInspectionSystemsRequest.Parser, new[]{ "SystemID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetForMeasureUnitRequest), global::HaccpManager.CostCentersProtos.GetForMeasureUnitRequest.Parser, new[]{ "MeasureUnit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.GetByKeyRequest), global::HaccpManager.CostCentersProtos.GetByKeyRequest.Parser, new[]{ "CostCenter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.InsertRequest), global::HaccpManager.CostCentersProtos.InsertRequest.Parser, new[]{ "CostCenter", "CalendarType", "CostCenterName", "Machines", "EffectivePercent", "StdLaborRate", "CurLaborRate", "StdSetupRate", "CurSetupRate", "StdLaborOverhead", "CurLaborOverhead", "StdSetupOverhead", "CurSetupOverhead", "TrialLaborRate", "TrialSetupRate", "TrialLaborOverhead", "TrialSetupOverhead", "CustomerCode", "OpTimeCalculationMethod", "LocationNo", "WorkLevel", "CostCenterType", "WorkType", "AddedValue", "CenterType", "MachineCostCenter", "BusinessClassCode", "CapaFlag", "CenterLotChar", "CenterNumber", "WorkMSpec", "SeqNo", "SystemID", "UseFlag", "MACAddress", "OutSourcingType", "MeasureUnit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.UpdateRequest), global::HaccpManager.CostCentersProtos.UpdateRequest.Parser, new[]{ "CostCenter", "CalendarType", "CostCenterName", "Machines", "EffectivePercent", "StdLaborRate", "CurLaborRate", "StdSetupRate", "CurSetupRate", "StdLaborOverhead", "CurLaborOverhead", "StdSetupOverhead", "CurSetupOverhead", "TrialLaborRate", "TrialSetupRate", "TrialLaborOverhead", "TrialSetupOverhead", "CustomerCode", "OpTimeCalculationMethod", "LocationNo", "WorkLevel", "CostCenterType", "WorkType", "AddedValue", "CenterType", "MachineCostCenter", "BusinessClassCode", "CapaFlag", "CenterLotChar", "CenterNumber", "WorkMSpec", "SeqNo", "SystemID", "UseFlag", "MACAddress", "OutSourcingType", "MeasureUnit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.UpdateResponse), global::HaccpManager.CostCentersProtos.UpdateResponse.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.DeleteRequest), global::HaccpManager.CostCentersProtos.DeleteRequest.Parser, new[]{ "CostCenter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaccpManager.CostCentersProtos.DeleteResponse), global::HaccpManager.CostCentersProtos.DeleteResponse.Parser, new[]{ "Count" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GrpcDecimal : pb::IMessage<GrpcDecimal> {
    private static readonly pb::MessageParser<GrpcDecimal> _parser = new pb::MessageParser<GrpcDecimal>(() => new GrpcDecimal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcDecimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal(GrpcDecimal other) : this() {
      units_ = other.units_;
      nanos_ = other.nanos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcDecimal Clone() {
      return new GrpcDecimal(this);
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private long units_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Units {
      get { return units_; }
      set {
        units_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcDecimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcDecimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Units != other.Units) return false;
      if (Nanos != other.Nanos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Units != 0L) hash ^= Units.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Units != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Units);
      }
      if (Nanos != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Nanos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Units != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Units);
      }
      if (Nanos != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcDecimal other) {
      if (other == null) {
        return;
      }
      if (other.Units != 0L) {
        Units = other.Units;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Units = input.ReadInt64();
            break;
          }
          case 21: {
            Nanos = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CostCentersResponse : pb::IMessage<CostCentersResponse> {
    private static readonly pb::MessageParser<CostCentersResponse> _parser = new pb::MessageParser<CostCentersResponse>(() => new CostCentersResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CostCentersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostCentersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostCentersResponse(CostCentersResponse other) : this() {
      costCenters_ = other.costCenters_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostCentersResponse Clone() {
      return new CostCentersResponse(this);
    }

    /// <summary>Field number for the "costCenters" field.</summary>
    public const int CostCentersFieldNumber = 1;
    private pb::ByteString costCenters_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CostCenters {
      get { return costCenters_; }
      set {
        costCenters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CostCentersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CostCentersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostCenters != other.CostCenters) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostCenters.Length != 0) hash ^= CostCenters.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostCenters.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CostCenters);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostCenters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CostCenters);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CostCentersResponse other) {
      if (other == null) {
        return;
      }
      if (other.CostCenters.Length != 0) {
        CostCenters = other.CostCenters;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CostCenters = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CostCentersSetResponse : pb::IMessage<CostCentersSetResponse> {
    private static readonly pb::MessageParser<CostCentersSetResponse> _parser = new pb::MessageParser<CostCentersSetResponse>(() => new CostCentersSetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CostCentersSetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostCentersSetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostCentersSetResponse(CostCentersSetResponse other) : this() {
      costCentersSet_ = other.costCentersSet_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostCentersSetResponse Clone() {
      return new CostCentersSetResponse(this);
    }

    /// <summary>Field number for the "costCentersSet" field.</summary>
    public const int CostCentersSetFieldNumber = 1;
    private pb::ByteString costCentersSet_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CostCentersSet {
      get { return costCentersSet_; }
      set {
        costCentersSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CostCentersSetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CostCentersSetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostCentersSet != other.CostCentersSet) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostCentersSet.Length != 0) hash ^= CostCentersSet.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostCentersSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CostCentersSet);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostCentersSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CostCentersSet);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CostCentersSetResponse other) {
      if (other == null) {
        return;
      }
      if (other.CostCentersSet.Length != 0) {
        CostCentersSet = other.CostCentersSet;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CostCentersSet = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataSetResponse : pb::IMessage<DataSetResponse> {
    private static readonly pb::MessageParser<DataSetResponse> _parser = new pb::MessageParser<DataSetResponse>(() => new DataSetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse(DataSetResponse other) : this() {
      dataSet_ = other.dataSet_;
      jsonString_ = other.jsonString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSetResponse Clone() {
      return new DataSetResponse(this);
    }

    /// <summary>Field number for the "dataSet" field.</summary>
    public const int DataSetFieldNumber = 1;
    private pb::ByteString dataSet_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataSet {
      get { return dataSet_; }
      set {
        dataSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonString" field.</summary>
    public const int JsonStringFieldNumber = 2;
    private string jsonString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonString {
      get { return jsonString_; }
      set {
        jsonString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataSet != other.DataSet) return false;
      if (JsonString != other.JsonString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataSet.Length != 0) hash ^= DataSet.GetHashCode();
      if (JsonString.Length != 0) hash ^= JsonString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataSet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DataSet);
      }
      if (JsonString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JsonString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataSet);
      }
      if (JsonString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSetResponse other) {
      if (other == null) {
        return;
      }
      if (other.DataSet.Length != 0) {
        DataSet = other.DataSet;
      }
      if (other.JsonString.Length != 0) {
        JsonString = other.JsonString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataSet = input.ReadBytes();
            break;
          }
          case 18: {
            JsonString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForCalendarTypeRequest : pb::IMessage<GetForCalendarTypeRequest> {
    private static readonly pb::MessageParser<GetForCalendarTypeRequest> _parser = new pb::MessageParser<GetForCalendarTypeRequest>(() => new GetForCalendarTypeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForCalendarTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCalendarTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCalendarTypeRequest(GetForCalendarTypeRequest other) : this() {
      calendarType_ = other.calendarType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCalendarTypeRequest Clone() {
      return new GetForCalendarTypeRequest(this);
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 1;
    private int calendarType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForCalendarTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForCalendarTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CalendarType != other.CalendarType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CalendarType != 0) hash ^= CalendarType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CalendarType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CalendarType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CalendarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CalendarType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForCalendarTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.CalendarType != 0) {
        CalendarType = other.CalendarType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CalendarType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForCustomersRequest : pb::IMessage<GetForCustomersRequest> {
    private static readonly pb::MessageParser<GetForCustomersRequest> _parser = new pb::MessageParser<GetForCustomersRequest>(() => new GetForCustomersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForCustomersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCustomersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCustomersRequest(GetForCustomersRequest other) : this() {
      customerCode_ = other.customerCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCustomersRequest Clone() {
      return new GetForCustomersRequest(this);
    }

    /// <summary>Field number for the "customerCode" field.</summary>
    public const int CustomerCodeFieldNumber = 1;
    private string customerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomerCode {
      get { return customerCode_; }
      set {
        customerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForCustomersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForCustomersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomerCode != other.CustomerCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomerCode.Length != 0) hash ^= CustomerCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomerCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CustomerCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomerCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomerCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForCustomersRequest other) {
      if (other == null) {
        return;
      }
      if (other.CustomerCode.Length != 0) {
        CustomerCode = other.CustomerCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CustomerCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForLocationRequest : pb::IMessage<GetForLocationRequest> {
    private static readonly pb::MessageParser<GetForLocationRequest> _parser = new pb::MessageParser<GetForLocationRequest>(() => new GetForLocationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForLocationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForLocationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForLocationRequest(GetForLocationRequest other) : this() {
      locationNo_ = other.locationNo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForLocationRequest Clone() {
      return new GetForLocationRequest(this);
    }

    /// <summary>Field number for the "locationNo" field.</summary>
    public const int LocationNoFieldNumber = 1;
    private int locationNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationNo {
      get { return locationNo_; }
      set {
        locationNo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForLocationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForLocationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocationNo != other.LocationNo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocationNo != 0) hash ^= LocationNo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocationNo != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LocationNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocationNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LocationNo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForLocationRequest other) {
      if (other == null) {
        return;
      }
      if (other.LocationNo != 0) {
        LocationNo = other.LocationNo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LocationNo = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForCostCenterTypesRequest : pb::IMessage<GetForCostCenterTypesRequest> {
    private static readonly pb::MessageParser<GetForCostCenterTypesRequest> _parser = new pb::MessageParser<GetForCostCenterTypesRequest>(() => new GetForCostCenterTypesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForCostCenterTypesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCostCenterTypesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCostCenterTypesRequest(GetForCostCenterTypesRequest other) : this() {
      costCenterType_ = other.costCenterType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForCostCenterTypesRequest Clone() {
      return new GetForCostCenterTypesRequest(this);
    }

    /// <summary>Field number for the "costCenterType" field.</summary>
    public const int CostCenterTypeFieldNumber = 1;
    private string costCenterType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenterType {
      get { return costCenterType_; }
      set {
        costCenterType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForCostCenterTypesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForCostCenterTypesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostCenterType != other.CostCenterType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostCenterType.Length != 0) hash ^= CostCenterType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostCenterType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CostCenterType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostCenterType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostCenterType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForCostCenterTypesRequest other) {
      if (other == null) {
        return;
      }
      if (other.CostCenterType.Length != 0) {
        CostCenterType = other.CostCenterType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CostCenterType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForBusinessClass_SaleRequest : pb::IMessage<GetForBusinessClass_SaleRequest> {
    private static readonly pb::MessageParser<GetForBusinessClass_SaleRequest> _parser = new pb::MessageParser<GetForBusinessClass_SaleRequest>(() => new GetForBusinessClass_SaleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForBusinessClass_SaleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForBusinessClass_SaleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForBusinessClass_SaleRequest(GetForBusinessClass_SaleRequest other) : this() {
      businessClassCode_ = other.businessClassCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForBusinessClass_SaleRequest Clone() {
      return new GetForBusinessClass_SaleRequest(this);
    }

    /// <summary>Field number for the "businessClassCode" field.</summary>
    public const int BusinessClassCodeFieldNumber = 1;
    private int businessClassCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BusinessClassCode {
      get { return businessClassCode_; }
      set {
        businessClassCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForBusinessClass_SaleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForBusinessClass_SaleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BusinessClassCode != other.BusinessClassCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BusinessClassCode != 0) hash ^= BusinessClassCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BusinessClassCode != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(BusinessClassCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BusinessClassCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BusinessClassCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForBusinessClass_SaleRequest other) {
      if (other == null) {
        return;
      }
      if (other.BusinessClassCode != 0) {
        BusinessClassCode = other.BusinessClassCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BusinessClassCode = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForInspectionSystemsRequest : pb::IMessage<GetForInspectionSystemsRequest> {
    private static readonly pb::MessageParser<GetForInspectionSystemsRequest> _parser = new pb::MessageParser<GetForInspectionSystemsRequest>(() => new GetForInspectionSystemsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForInspectionSystemsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForInspectionSystemsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForInspectionSystemsRequest(GetForInspectionSystemsRequest other) : this() {
      systemID_ = other.systemID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForInspectionSystemsRequest Clone() {
      return new GetForInspectionSystemsRequest(this);
    }

    /// <summary>Field number for the "systemID" field.</summary>
    public const int SystemIDFieldNumber = 1;
    private int systemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SystemID {
      get { return systemID_; }
      set {
        systemID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForInspectionSystemsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForInspectionSystemsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SystemID != other.SystemID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SystemID != 0) hash ^= SystemID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SystemID != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(SystemID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SystemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SystemID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForInspectionSystemsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SystemID != 0) {
        SystemID = other.SystemID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SystemID = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetForMeasureUnitRequest : pb::IMessage<GetForMeasureUnitRequest> {
    private static readonly pb::MessageParser<GetForMeasureUnitRequest> _parser = new pb::MessageParser<GetForMeasureUnitRequest>(() => new GetForMeasureUnitRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetForMeasureUnitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForMeasureUnitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForMeasureUnitRequest(GetForMeasureUnitRequest other) : this() {
      measureUnit_ = other.measureUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetForMeasureUnitRequest Clone() {
      return new GetForMeasureUnitRequest(this);
    }

    /// <summary>Field number for the "measureUnit" field.</summary>
    public const int MeasureUnitFieldNumber = 1;
    private string measureUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasureUnit {
      get { return measureUnit_; }
      set {
        measureUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetForMeasureUnitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetForMeasureUnitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeasureUnit != other.MeasureUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MeasureUnit.Length != 0) hash ^= MeasureUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeasureUnit.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeasureUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeasureUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasureUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetForMeasureUnitRequest other) {
      if (other == null) {
        return;
      }
      if (other.MeasureUnit.Length != 0) {
        MeasureUnit = other.MeasureUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeasureUnit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetByKeyRequest : pb::IMessage<GetByKeyRequest> {
    private static readonly pb::MessageParser<GetByKeyRequest> _parser = new pb::MessageParser<GetByKeyRequest>(() => new GetByKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetByKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest(GetByKeyRequest other) : this() {
      costCenter_ = other.costCenter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByKeyRequest Clone() {
      return new GetByKeyRequest(this);
    }

    /// <summary>Field number for the "costCenter" field.</summary>
    public const int CostCenterFieldNumber = 1;
    private string costCenter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenter {
      get { return costCenter_; }
      set {
        costCenter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetByKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetByKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostCenter != other.CostCenter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostCenter.Length != 0) hash ^= CostCenter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostCenter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CostCenter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostCenter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostCenter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetByKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.CostCenter.Length != 0) {
        CostCenter = other.CostCenter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CostCenter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertRequest : pb::IMessage<InsertRequest> {
    private static readonly pb::MessageParser<InsertRequest> _parser = new pb::MessageParser<InsertRequest>(() => new InsertRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest(InsertRequest other) : this() {
      costCenter_ = other.costCenter_;
      calendarType_ = other.calendarType_;
      costCenterName_ = other.costCenterName_;
      machines_ = other.machines_;
      effectivePercent_ = other.effectivePercent_ != null ? other.effectivePercent_.Clone() : null;
      stdLaborRate_ = other.stdLaborRate_ != null ? other.stdLaborRate_.Clone() : null;
      curLaborRate_ = other.curLaborRate_ != null ? other.curLaborRate_.Clone() : null;
      stdSetupRate_ = other.stdSetupRate_ != null ? other.stdSetupRate_.Clone() : null;
      curSetupRate_ = other.curSetupRate_ != null ? other.curSetupRate_.Clone() : null;
      stdLaborOverhead_ = other.stdLaborOverhead_ != null ? other.stdLaborOverhead_.Clone() : null;
      curLaborOverhead_ = other.curLaborOverhead_ != null ? other.curLaborOverhead_.Clone() : null;
      stdSetupOverhead_ = other.stdSetupOverhead_ != null ? other.stdSetupOverhead_.Clone() : null;
      curSetupOverhead_ = other.curSetupOverhead_ != null ? other.curSetupOverhead_.Clone() : null;
      trialLaborRate_ = other.trialLaborRate_ != null ? other.trialLaborRate_.Clone() : null;
      trialSetupRate_ = other.trialSetupRate_ != null ? other.trialSetupRate_.Clone() : null;
      trialLaborOverhead_ = other.trialLaborOverhead_ != null ? other.trialLaborOverhead_.Clone() : null;
      trialSetupOverhead_ = other.trialSetupOverhead_ != null ? other.trialSetupOverhead_.Clone() : null;
      CustomerCode = other.CustomerCode;
      OpTimeCalculationMethod = other.OpTimeCalculationMethod;
      LocationNo = other.LocationNo;
      workLevel_ = other.workLevel_;
      CostCenterType = other.CostCenterType;
      workType_ = other.workType_;
      addedValue_ = other.addedValue_ != null ? other.addedValue_.Clone() : null;
      centerType_ = other.centerType_;
      MachineCostCenter = other.MachineCostCenter;
      BusinessClassCode = other.BusinessClassCode;
      capaFlag_ = other.capaFlag_;
      centerLotChar_ = other.centerLotChar_;
      centerNumber_ = other.centerNumber_;
      workMSpec_ = other.workMSpec_;
      seqNo_ = other.seqNo_;
      SystemID = other.SystemID;
      useFlag_ = other.useFlag_;
      MACAddress = other.MACAddress;
      OutSourcingType = other.OutSourcingType;
      measureUnit_ = other.measureUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertRequest Clone() {
      return new InsertRequest(this);
    }

    /// <summary>Field number for the "costCenter" field.</summary>
    public const int CostCenterFieldNumber = 1;
    private string costCenter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenter {
      get { return costCenter_; }
      set {
        costCenter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 2;
    private int calendarType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = value;
      }
    }

    /// <summary>Field number for the "costCenterName" field.</summary>
    public const int CostCenterNameFieldNumber = 3;
    private string costCenterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenterName {
      get { return costCenterName_; }
      set {
        costCenterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "machines" field.</summary>
    public const int MachinesFieldNumber = 4;
    private int machines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Machines {
      get { return machines_; }
      set {
        machines_ = value;
      }
    }

    /// <summary>Field number for the "effectivePercent" field.</summary>
    public const int EffectivePercentFieldNumber = 5;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal effectivePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal EffectivePercent {
      get { return effectivePercent_; }
      set {
        effectivePercent_ = value;
      }
    }

    /// <summary>Field number for the "stdLaborRate" field.</summary>
    public const int StdLaborRateFieldNumber = 6;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdLaborRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdLaborRate {
      get { return stdLaborRate_; }
      set {
        stdLaborRate_ = value;
      }
    }

    /// <summary>Field number for the "curLaborRate" field.</summary>
    public const int CurLaborRateFieldNumber = 7;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curLaborRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurLaborRate {
      get { return curLaborRate_; }
      set {
        curLaborRate_ = value;
      }
    }

    /// <summary>Field number for the "stdSetupRate" field.</summary>
    public const int StdSetupRateFieldNumber = 8;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdSetupRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdSetupRate {
      get { return stdSetupRate_; }
      set {
        stdSetupRate_ = value;
      }
    }

    /// <summary>Field number for the "curSetupRate" field.</summary>
    public const int CurSetupRateFieldNumber = 9;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curSetupRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurSetupRate {
      get { return curSetupRate_; }
      set {
        curSetupRate_ = value;
      }
    }

    /// <summary>Field number for the "stdLaborOverhead" field.</summary>
    public const int StdLaborOverheadFieldNumber = 10;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdLaborOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdLaborOverhead {
      get { return stdLaborOverhead_; }
      set {
        stdLaborOverhead_ = value;
      }
    }

    /// <summary>Field number for the "curLaborOverhead" field.</summary>
    public const int CurLaborOverheadFieldNumber = 11;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curLaborOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurLaborOverhead {
      get { return curLaborOverhead_; }
      set {
        curLaborOverhead_ = value;
      }
    }

    /// <summary>Field number for the "stdSetupOverhead" field.</summary>
    public const int StdSetupOverheadFieldNumber = 12;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdSetupOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdSetupOverhead {
      get { return stdSetupOverhead_; }
      set {
        stdSetupOverhead_ = value;
      }
    }

    /// <summary>Field number for the "curSetupOverhead" field.</summary>
    public const int CurSetupOverheadFieldNumber = 13;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curSetupOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurSetupOverhead {
      get { return curSetupOverhead_; }
      set {
        curSetupOverhead_ = value;
      }
    }

    /// <summary>Field number for the "trialLaborRate" field.</summary>
    public const int TrialLaborRateFieldNumber = 14;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialLaborRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialLaborRate {
      get { return trialLaborRate_; }
      set {
        trialLaborRate_ = value;
      }
    }

    /// <summary>Field number for the "trialSetupRate" field.</summary>
    public const int TrialSetupRateFieldNumber = 15;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialSetupRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialSetupRate {
      get { return trialSetupRate_; }
      set {
        trialSetupRate_ = value;
      }
    }

    /// <summary>Field number for the "trialLaborOverhead" field.</summary>
    public const int TrialLaborOverheadFieldNumber = 16;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialLaborOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialLaborOverhead {
      get { return trialLaborOverhead_; }
      set {
        trialLaborOverhead_ = value;
      }
    }

    /// <summary>Field number for the "trialSetupOverhead" field.</summary>
    public const int TrialSetupOverheadFieldNumber = 17;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialSetupOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialSetupOverhead {
      get { return trialSetupOverhead_; }
      set {
        trialSetupOverhead_ = value;
      }
    }

    /// <summary>Field number for the "customerCode" field.</summary>
    public const int CustomerCodeFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _single_customerCode_codec = pb::FieldCodec.ForClassWrapper<string>(146);
    private string customerCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomerCode {
      get { return customerCode_; }
      set {
        customerCode_ = value;
      }
    }


    /// <summary>Field number for the "opTimeCalculationMethod" field.</summary>
    public const int OpTimeCalculationMethodFieldNumber = 19;
    private static readonly pb::FieldCodec<int?> _single_opTimeCalculationMethod_codec = pb::FieldCodec.ForStructWrapper<int>(154);
    private int? opTimeCalculationMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? OpTimeCalculationMethod {
      get { return opTimeCalculationMethod_; }
      set {
        opTimeCalculationMethod_ = value;
      }
    }


    /// <summary>Field number for the "locationNo" field.</summary>
    public const int LocationNoFieldNumber = 20;
    private static readonly pb::FieldCodec<int?> _single_locationNo_codec = pb::FieldCodec.ForStructWrapper<int>(162);
    private int? locationNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? LocationNo {
      get { return locationNo_; }
      set {
        locationNo_ = value;
      }
    }


    /// <summary>Field number for the "workLevel" field.</summary>
    public const int WorkLevelFieldNumber = 21;
    private int workLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkLevel {
      get { return workLevel_; }
      set {
        workLevel_ = value;
      }
    }

    /// <summary>Field number for the "costCenterType" field.</summary>
    public const int CostCenterTypeFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _single_costCenterType_codec = pb::FieldCodec.ForClassWrapper<string>(178);
    private string costCenterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenterType {
      get { return costCenterType_; }
      set {
        costCenterType_ = value;
      }
    }


    /// <summary>Field number for the "workType" field.</summary>
    public const int WorkTypeFieldNumber = 23;
    private int workType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkType {
      get { return workType_; }
      set {
        workType_ = value;
      }
    }

    /// <summary>Field number for the "addedValue" field.</summary>
    public const int AddedValueFieldNumber = 24;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal addedValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal AddedValue {
      get { return addedValue_; }
      set {
        addedValue_ = value;
      }
    }

    /// <summary>Field number for the "centerType" field.</summary>
    public const int CenterTypeFieldNumber = 25;
    private int centerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterType {
      get { return centerType_; }
      set {
        centerType_ = value;
      }
    }

    /// <summary>Field number for the "machineCostCenter" field.</summary>
    public const int MachineCostCenterFieldNumber = 26;
    private static readonly pb::FieldCodec<string> _single_machineCostCenter_codec = pb::FieldCodec.ForClassWrapper<string>(210);
    private string machineCostCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineCostCenter {
      get { return machineCostCenter_; }
      set {
        machineCostCenter_ = value;
      }
    }


    /// <summary>Field number for the "businessClassCode" field.</summary>
    public const int BusinessClassCodeFieldNumber = 27;
    private static readonly pb::FieldCodec<int?> _single_businessClassCode_codec = pb::FieldCodec.ForStructWrapper<int>(218);
    private int? businessClassCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BusinessClassCode {
      get { return businessClassCode_; }
      set {
        businessClassCode_ = value;
      }
    }


    /// <summary>Field number for the "capaFlag" field.</summary>
    public const int CapaFlagFieldNumber = 28;
    private int capaFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CapaFlag {
      get { return capaFlag_; }
      set {
        capaFlag_ = value;
      }
    }

    /// <summary>Field number for the "centerLotChar" field.</summary>
    public const int CenterLotCharFieldNumber = 29;
    private string centerLotChar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CenterLotChar {
      get { return centerLotChar_; }
      set {
        centerLotChar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "centerNumber" field.</summary>
    public const int CenterNumberFieldNumber = 30;
    private int centerNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterNumber {
      get { return centerNumber_; }
      set {
        centerNumber_ = value;
      }
    }

    /// <summary>Field number for the "workMSpec" field.</summary>
    public const int WorkMSpecFieldNumber = 31;
    private string workMSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkMSpec {
      get { return workMSpec_; }
      set {
        workMSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seqNo" field.</summary>
    public const int SeqNoFieldNumber = 32;
    private int seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    /// <summary>Field number for the "systemID" field.</summary>
    public const int SystemIDFieldNumber = 33;
    private static readonly pb::FieldCodec<int?> _single_systemID_codec = pb::FieldCodec.ForStructWrapper<int>(266);
    private int? systemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? SystemID {
      get { return systemID_; }
      set {
        systemID_ = value;
      }
    }


    /// <summary>Field number for the "useFlag" field.</summary>
    public const int UseFlagFieldNumber = 34;
    private int useFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseFlag {
      get { return useFlag_; }
      set {
        useFlag_ = value;
      }
    }

    /// <summary>Field number for the "mACAddress" field.</summary>
    public const int MACAddressFieldNumber = 35;
    private static readonly pb::FieldCodec<string> _single_mACAddress_codec = pb::FieldCodec.ForClassWrapper<string>(282);
    private string mACAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MACAddress {
      get { return mACAddress_; }
      set {
        mACAddress_ = value;
      }
    }


    /// <summary>Field number for the "outSourcingType" field.</summary>
    public const int OutSourcingTypeFieldNumber = 36;
    private static readonly pb::FieldCodec<int?> _single_outSourcingType_codec = pb::FieldCodec.ForStructWrapper<int>(290);
    private int? outSourcingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? OutSourcingType {
      get { return outSourcingType_; }
      set {
        outSourcingType_ = value;
      }
    }


    /// <summary>Field number for the "measureUnit" field.</summary>
    public const int MeasureUnitFieldNumber = 37;
    private string measureUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasureUnit {
      get { return measureUnit_; }
      set {
        measureUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostCenter != other.CostCenter) return false;
      if (CalendarType != other.CalendarType) return false;
      if (CostCenterName != other.CostCenterName) return false;
      if (Machines != other.Machines) return false;
      if (!object.Equals(EffectivePercent, other.EffectivePercent)) return false;
      if (!object.Equals(StdLaborRate, other.StdLaborRate)) return false;
      if (!object.Equals(CurLaborRate, other.CurLaborRate)) return false;
      if (!object.Equals(StdSetupRate, other.StdSetupRate)) return false;
      if (!object.Equals(CurSetupRate, other.CurSetupRate)) return false;
      if (!object.Equals(StdLaborOverhead, other.StdLaborOverhead)) return false;
      if (!object.Equals(CurLaborOverhead, other.CurLaborOverhead)) return false;
      if (!object.Equals(StdSetupOverhead, other.StdSetupOverhead)) return false;
      if (!object.Equals(CurSetupOverhead, other.CurSetupOverhead)) return false;
      if (!object.Equals(TrialLaborRate, other.TrialLaborRate)) return false;
      if (!object.Equals(TrialSetupRate, other.TrialSetupRate)) return false;
      if (!object.Equals(TrialLaborOverhead, other.TrialLaborOverhead)) return false;
      if (!object.Equals(TrialSetupOverhead, other.TrialSetupOverhead)) return false;
      if (CustomerCode != other.CustomerCode) return false;
      if (OpTimeCalculationMethod != other.OpTimeCalculationMethod) return false;
      if (LocationNo != other.LocationNo) return false;
      if (WorkLevel != other.WorkLevel) return false;
      if (CostCenterType != other.CostCenterType) return false;
      if (WorkType != other.WorkType) return false;
      if (!object.Equals(AddedValue, other.AddedValue)) return false;
      if (CenterType != other.CenterType) return false;
      if (MachineCostCenter != other.MachineCostCenter) return false;
      if (BusinessClassCode != other.BusinessClassCode) return false;
      if (CapaFlag != other.CapaFlag) return false;
      if (CenterLotChar != other.CenterLotChar) return false;
      if (CenterNumber != other.CenterNumber) return false;
      if (WorkMSpec != other.WorkMSpec) return false;
      if (SeqNo != other.SeqNo) return false;
      if (SystemID != other.SystemID) return false;
      if (UseFlag != other.UseFlag) return false;
      if (MACAddress != other.MACAddress) return false;
      if (OutSourcingType != other.OutSourcingType) return false;
      if (MeasureUnit != other.MeasureUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostCenter.Length != 0) hash ^= CostCenter.GetHashCode();
      if (CalendarType != 0) hash ^= CalendarType.GetHashCode();
      if (CostCenterName.Length != 0) hash ^= CostCenterName.GetHashCode();
      if (Machines != 0) hash ^= Machines.GetHashCode();
      if (effectivePercent_ != null) hash ^= EffectivePercent.GetHashCode();
      if (stdLaborRate_ != null) hash ^= StdLaborRate.GetHashCode();
      if (curLaborRate_ != null) hash ^= CurLaborRate.GetHashCode();
      if (stdSetupRate_ != null) hash ^= StdSetupRate.GetHashCode();
      if (curSetupRate_ != null) hash ^= CurSetupRate.GetHashCode();
      if (stdLaborOverhead_ != null) hash ^= StdLaborOverhead.GetHashCode();
      if (curLaborOverhead_ != null) hash ^= CurLaborOverhead.GetHashCode();
      if (stdSetupOverhead_ != null) hash ^= StdSetupOverhead.GetHashCode();
      if (curSetupOverhead_ != null) hash ^= CurSetupOverhead.GetHashCode();
      if (trialLaborRate_ != null) hash ^= TrialLaborRate.GetHashCode();
      if (trialSetupRate_ != null) hash ^= TrialSetupRate.GetHashCode();
      if (trialLaborOverhead_ != null) hash ^= TrialLaborOverhead.GetHashCode();
      if (trialSetupOverhead_ != null) hash ^= TrialSetupOverhead.GetHashCode();
      if (customerCode_ != null) hash ^= CustomerCode.GetHashCode();
      if (opTimeCalculationMethod_ != null) hash ^= OpTimeCalculationMethod.GetHashCode();
      if (locationNo_ != null) hash ^= LocationNo.GetHashCode();
      if (WorkLevel != 0) hash ^= WorkLevel.GetHashCode();
      if (costCenterType_ != null) hash ^= CostCenterType.GetHashCode();
      if (WorkType != 0) hash ^= WorkType.GetHashCode();
      if (addedValue_ != null) hash ^= AddedValue.GetHashCode();
      if (CenterType != 0) hash ^= CenterType.GetHashCode();
      if (machineCostCenter_ != null) hash ^= MachineCostCenter.GetHashCode();
      if (businessClassCode_ != null) hash ^= BusinessClassCode.GetHashCode();
      if (CapaFlag != 0) hash ^= CapaFlag.GetHashCode();
      if (CenterLotChar.Length != 0) hash ^= CenterLotChar.GetHashCode();
      if (CenterNumber != 0) hash ^= CenterNumber.GetHashCode();
      if (WorkMSpec.Length != 0) hash ^= WorkMSpec.GetHashCode();
      if (SeqNo != 0) hash ^= SeqNo.GetHashCode();
      if (systemID_ != null) hash ^= SystemID.GetHashCode();
      if (UseFlag != 0) hash ^= UseFlag.GetHashCode();
      if (mACAddress_ != null) hash ^= MACAddress.GetHashCode();
      if (outSourcingType_ != null) hash ^= OutSourcingType.GetHashCode();
      if (MeasureUnit.Length != 0) hash ^= MeasureUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostCenter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CostCenter);
      }
      if (CalendarType != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(CalendarType);
      }
      if (CostCenterName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CostCenterName);
      }
      if (Machines != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Machines);
      }
      if (effectivePercent_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EffectivePercent);
      }
      if (stdLaborRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StdLaborRate);
      }
      if (curLaborRate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CurLaborRate);
      }
      if (stdSetupRate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StdSetupRate);
      }
      if (curSetupRate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CurSetupRate);
      }
      if (stdLaborOverhead_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(StdLaborOverhead);
      }
      if (curLaborOverhead_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CurLaborOverhead);
      }
      if (stdSetupOverhead_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(StdSetupOverhead);
      }
      if (curSetupOverhead_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CurSetupOverhead);
      }
      if (trialLaborRate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TrialLaborRate);
      }
      if (trialSetupRate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TrialSetupRate);
      }
      if (trialLaborOverhead_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(TrialLaborOverhead);
      }
      if (trialSetupOverhead_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TrialSetupOverhead);
      }
      if (customerCode_ != null) {
        _single_customerCode_codec.WriteTagAndValue(output, CustomerCode);
      }
      if (opTimeCalculationMethod_ != null) {
        _single_opTimeCalculationMethod_codec.WriteTagAndValue(output, OpTimeCalculationMethod);
      }
      if (locationNo_ != null) {
        _single_locationNo_codec.WriteTagAndValue(output, LocationNo);
      }
      if (WorkLevel != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(WorkLevel);
      }
      if (costCenterType_ != null) {
        _single_costCenterType_codec.WriteTagAndValue(output, CostCenterType);
      }
      if (WorkType != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(WorkType);
      }
      if (addedValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AddedValue);
      }
      if (CenterType != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(CenterType);
      }
      if (machineCostCenter_ != null) {
        _single_machineCostCenter_codec.WriteTagAndValue(output, MachineCostCenter);
      }
      if (businessClassCode_ != null) {
        _single_businessClassCode_codec.WriteTagAndValue(output, BusinessClassCode);
      }
      if (CapaFlag != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(CapaFlag);
      }
      if (CenterLotChar.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(CenterLotChar);
      }
      if (CenterNumber != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(CenterNumber);
      }
      if (WorkMSpec.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WorkMSpec);
      }
      if (SeqNo != 0) {
        output.WriteRawTag(128, 2);
        output.WriteSInt32(SeqNo);
      }
      if (systemID_ != null) {
        _single_systemID_codec.WriteTagAndValue(output, SystemID);
      }
      if (UseFlag != 0) {
        output.WriteRawTag(144, 2);
        output.WriteSInt32(UseFlag);
      }
      if (mACAddress_ != null) {
        _single_mACAddress_codec.WriteTagAndValue(output, MACAddress);
      }
      if (outSourcingType_ != null) {
        _single_outSourcingType_codec.WriteTagAndValue(output, OutSourcingType);
      }
      if (MeasureUnit.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(MeasureUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostCenter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostCenter);
      }
      if (CalendarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CalendarType);
      }
      if (CostCenterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostCenterName);
      }
      if (Machines != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Machines);
      }
      if (effectivePercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectivePercent);
      }
      if (stdLaborRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdLaborRate);
      }
      if (curLaborRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurLaborRate);
      }
      if (stdSetupRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdSetupRate);
      }
      if (curSetupRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurSetupRate);
      }
      if (stdLaborOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdLaborOverhead);
      }
      if (curLaborOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurLaborOverhead);
      }
      if (stdSetupOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdSetupOverhead);
      }
      if (curSetupOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurSetupOverhead);
      }
      if (trialLaborRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrialLaborRate);
      }
      if (trialSetupRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrialSetupRate);
      }
      if (trialLaborOverhead_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrialLaborOverhead);
      }
      if (trialSetupOverhead_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrialSetupOverhead);
      }
      if (customerCode_ != null) {
        size += _single_customerCode_codec.CalculateSizeWithTag(CustomerCode);
      }
      if (opTimeCalculationMethod_ != null) {
        size += _single_opTimeCalculationMethod_codec.CalculateSizeWithTag(OpTimeCalculationMethod);
      }
      if (locationNo_ != null) {
        size += _single_locationNo_codec.CalculateSizeWithTag(LocationNo);
      }
      if (WorkLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(WorkLevel);
      }
      if (costCenterType_ != null) {
        size += _single_costCenterType_codec.CalculateSizeWithTag(CostCenterType);
      }
      if (WorkType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(WorkType);
      }
      if (addedValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddedValue);
      }
      if (CenterType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CenterType);
      }
      if (machineCostCenter_ != null) {
        size += _single_machineCostCenter_codec.CalculateSizeWithTag(MachineCostCenter);
      }
      if (businessClassCode_ != null) {
        size += _single_businessClassCode_codec.CalculateSizeWithTag(BusinessClassCode);
      }
      if (CapaFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CapaFlag);
      }
      if (CenterLotChar.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CenterLotChar);
      }
      if (CenterNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CenterNumber);
      }
      if (WorkMSpec.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WorkMSpec);
      }
      if (SeqNo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SeqNo);
      }
      if (systemID_ != null) {
        size += _single_systemID_codec.CalculateSizeWithTag(SystemID);
      }
      if (UseFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(UseFlag);
      }
      if (mACAddress_ != null) {
        size += _single_mACAddress_codec.CalculateSizeWithTag(MACAddress);
      }
      if (outSourcingType_ != null) {
        size += _single_outSourcingType_codec.CalculateSizeWithTag(OutSourcingType);
      }
      if (MeasureUnit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeasureUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertRequest other) {
      if (other == null) {
        return;
      }
      if (other.CostCenter.Length != 0) {
        CostCenter = other.CostCenter;
      }
      if (other.CalendarType != 0) {
        CalendarType = other.CalendarType;
      }
      if (other.CostCenterName.Length != 0) {
        CostCenterName = other.CostCenterName;
      }
      if (other.Machines != 0) {
        Machines = other.Machines;
      }
      if (other.effectivePercent_ != null) {
        if (effectivePercent_ == null) {
          EffectivePercent = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        EffectivePercent.MergeFrom(other.EffectivePercent);
      }
      if (other.stdLaborRate_ != null) {
        if (stdLaborRate_ == null) {
          StdLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdLaborRate.MergeFrom(other.StdLaborRate);
      }
      if (other.curLaborRate_ != null) {
        if (curLaborRate_ == null) {
          CurLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurLaborRate.MergeFrom(other.CurLaborRate);
      }
      if (other.stdSetupRate_ != null) {
        if (stdSetupRate_ == null) {
          StdSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdSetupRate.MergeFrom(other.StdSetupRate);
      }
      if (other.curSetupRate_ != null) {
        if (curSetupRate_ == null) {
          CurSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurSetupRate.MergeFrom(other.CurSetupRate);
      }
      if (other.stdLaborOverhead_ != null) {
        if (stdLaborOverhead_ == null) {
          StdLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdLaborOverhead.MergeFrom(other.StdLaborOverhead);
      }
      if (other.curLaborOverhead_ != null) {
        if (curLaborOverhead_ == null) {
          CurLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurLaborOverhead.MergeFrom(other.CurLaborOverhead);
      }
      if (other.stdSetupOverhead_ != null) {
        if (stdSetupOverhead_ == null) {
          StdSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdSetupOverhead.MergeFrom(other.StdSetupOverhead);
      }
      if (other.curSetupOverhead_ != null) {
        if (curSetupOverhead_ == null) {
          CurSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurSetupOverhead.MergeFrom(other.CurSetupOverhead);
      }
      if (other.trialLaborRate_ != null) {
        if (trialLaborRate_ == null) {
          TrialLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialLaborRate.MergeFrom(other.TrialLaborRate);
      }
      if (other.trialSetupRate_ != null) {
        if (trialSetupRate_ == null) {
          TrialSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialSetupRate.MergeFrom(other.TrialSetupRate);
      }
      if (other.trialLaborOverhead_ != null) {
        if (trialLaborOverhead_ == null) {
          TrialLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialLaborOverhead.MergeFrom(other.TrialLaborOverhead);
      }
      if (other.trialSetupOverhead_ != null) {
        if (trialSetupOverhead_ == null) {
          TrialSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialSetupOverhead.MergeFrom(other.TrialSetupOverhead);
      }
      if (other.customerCode_ != null) {
        if (customerCode_ == null || other.CustomerCode != "") {
          CustomerCode = other.CustomerCode;
        }
      }
      if (other.opTimeCalculationMethod_ != null) {
        if (opTimeCalculationMethod_ == null || other.OpTimeCalculationMethod != 0) {
          OpTimeCalculationMethod = other.OpTimeCalculationMethod;
        }
      }
      if (other.locationNo_ != null) {
        if (locationNo_ == null || other.LocationNo != 0) {
          LocationNo = other.LocationNo;
        }
      }
      if (other.WorkLevel != 0) {
        WorkLevel = other.WorkLevel;
      }
      if (other.costCenterType_ != null) {
        if (costCenterType_ == null || other.CostCenterType != "") {
          CostCenterType = other.CostCenterType;
        }
      }
      if (other.WorkType != 0) {
        WorkType = other.WorkType;
      }
      if (other.addedValue_ != null) {
        if (addedValue_ == null) {
          AddedValue = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        AddedValue.MergeFrom(other.AddedValue);
      }
      if (other.CenterType != 0) {
        CenterType = other.CenterType;
      }
      if (other.machineCostCenter_ != null) {
        if (machineCostCenter_ == null || other.MachineCostCenter != "") {
          MachineCostCenter = other.MachineCostCenter;
        }
      }
      if (other.businessClassCode_ != null) {
        if (businessClassCode_ == null || other.BusinessClassCode != 0) {
          BusinessClassCode = other.BusinessClassCode;
        }
      }
      if (other.CapaFlag != 0) {
        CapaFlag = other.CapaFlag;
      }
      if (other.CenterLotChar.Length != 0) {
        CenterLotChar = other.CenterLotChar;
      }
      if (other.CenterNumber != 0) {
        CenterNumber = other.CenterNumber;
      }
      if (other.WorkMSpec.Length != 0) {
        WorkMSpec = other.WorkMSpec;
      }
      if (other.SeqNo != 0) {
        SeqNo = other.SeqNo;
      }
      if (other.systemID_ != null) {
        if (systemID_ == null || other.SystemID != 0) {
          SystemID = other.SystemID;
        }
      }
      if (other.UseFlag != 0) {
        UseFlag = other.UseFlag;
      }
      if (other.mACAddress_ != null) {
        if (mACAddress_ == null || other.MACAddress != "") {
          MACAddress = other.MACAddress;
        }
      }
      if (other.outSourcingType_ != null) {
        if (outSourcingType_ == null || other.OutSourcingType != 0) {
          OutSourcingType = other.OutSourcingType;
        }
      }
      if (other.MeasureUnit.Length != 0) {
        MeasureUnit = other.MeasureUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CostCenter = input.ReadString();
            break;
          }
          case 16: {
            CalendarType = input.ReadSInt32();
            break;
          }
          case 26: {
            CostCenterName = input.ReadString();
            break;
          }
          case 32: {
            Machines = input.ReadSInt32();
            break;
          }
          case 42: {
            if (effectivePercent_ == null) {
              EffectivePercent = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(EffectivePercent);
            break;
          }
          case 50: {
            if (stdLaborRate_ == null) {
              StdLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdLaborRate);
            break;
          }
          case 58: {
            if (curLaborRate_ == null) {
              CurLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurLaborRate);
            break;
          }
          case 66: {
            if (stdSetupRate_ == null) {
              StdSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdSetupRate);
            break;
          }
          case 74: {
            if (curSetupRate_ == null) {
              CurSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurSetupRate);
            break;
          }
          case 82: {
            if (stdLaborOverhead_ == null) {
              StdLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdLaborOverhead);
            break;
          }
          case 90: {
            if (curLaborOverhead_ == null) {
              CurLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurLaborOverhead);
            break;
          }
          case 98: {
            if (stdSetupOverhead_ == null) {
              StdSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdSetupOverhead);
            break;
          }
          case 106: {
            if (curSetupOverhead_ == null) {
              CurSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurSetupOverhead);
            break;
          }
          case 114: {
            if (trialLaborRate_ == null) {
              TrialLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialLaborRate);
            break;
          }
          case 122: {
            if (trialSetupRate_ == null) {
              TrialSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialSetupRate);
            break;
          }
          case 130: {
            if (trialLaborOverhead_ == null) {
              TrialLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialLaborOverhead);
            break;
          }
          case 138: {
            if (trialSetupOverhead_ == null) {
              TrialSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialSetupOverhead);
            break;
          }
          case 146: {
            string value = _single_customerCode_codec.Read(input);
            if (customerCode_ == null || value != "") {
              CustomerCode = value;
            }
            break;
          }
          case 154: {
            int? value = _single_opTimeCalculationMethod_codec.Read(input);
            if (opTimeCalculationMethod_ == null || value != 0) {
              OpTimeCalculationMethod = value;
            }
            break;
          }
          case 162: {
            int? value = _single_locationNo_codec.Read(input);
            if (locationNo_ == null || value != 0) {
              LocationNo = value;
            }
            break;
          }
          case 168: {
            WorkLevel = input.ReadSInt32();
            break;
          }
          case 178: {
            string value = _single_costCenterType_codec.Read(input);
            if (costCenterType_ == null || value != "") {
              CostCenterType = value;
            }
            break;
          }
          case 184: {
            WorkType = input.ReadSInt32();
            break;
          }
          case 194: {
            if (addedValue_ == null) {
              AddedValue = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(AddedValue);
            break;
          }
          case 200: {
            CenterType = input.ReadSInt32();
            break;
          }
          case 210: {
            string value = _single_machineCostCenter_codec.Read(input);
            if (machineCostCenter_ == null || value != "") {
              MachineCostCenter = value;
            }
            break;
          }
          case 218: {
            int? value = _single_businessClassCode_codec.Read(input);
            if (businessClassCode_ == null || value != 0) {
              BusinessClassCode = value;
            }
            break;
          }
          case 224: {
            CapaFlag = input.ReadSInt32();
            break;
          }
          case 234: {
            CenterLotChar = input.ReadString();
            break;
          }
          case 240: {
            CenterNumber = input.ReadSInt32();
            break;
          }
          case 250: {
            WorkMSpec = input.ReadString();
            break;
          }
          case 256: {
            SeqNo = input.ReadSInt32();
            break;
          }
          case 266: {
            int? value = _single_systemID_codec.Read(input);
            if (systemID_ == null || value != 0) {
              SystemID = value;
            }
            break;
          }
          case 272: {
            UseFlag = input.ReadSInt32();
            break;
          }
          case 282: {
            string value = _single_mACAddress_codec.Read(input);
            if (mACAddress_ == null || value != "") {
              MACAddress = value;
            }
            break;
          }
          case 290: {
            int? value = _single_outSourcingType_codec.Read(input);
            if (outSourcingType_ == null || value != 0) {
              OutSourcingType = value;
            }
            break;
          }
          case 298: {
            MeasureUnit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRequest : pb::IMessage<UpdateRequest> {
    private static readonly pb::MessageParser<UpdateRequest> _parser = new pb::MessageParser<UpdateRequest>(() => new UpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest(UpdateRequest other) : this() {
      costCenter_ = other.costCenter_;
      calendarType_ = other.calendarType_;
      costCenterName_ = other.costCenterName_;
      machines_ = other.machines_;
      effectivePercent_ = other.effectivePercent_ != null ? other.effectivePercent_.Clone() : null;
      stdLaborRate_ = other.stdLaborRate_ != null ? other.stdLaborRate_.Clone() : null;
      curLaborRate_ = other.curLaborRate_ != null ? other.curLaborRate_.Clone() : null;
      stdSetupRate_ = other.stdSetupRate_ != null ? other.stdSetupRate_.Clone() : null;
      curSetupRate_ = other.curSetupRate_ != null ? other.curSetupRate_.Clone() : null;
      stdLaborOverhead_ = other.stdLaborOverhead_ != null ? other.stdLaborOverhead_.Clone() : null;
      curLaborOverhead_ = other.curLaborOverhead_ != null ? other.curLaborOverhead_.Clone() : null;
      stdSetupOverhead_ = other.stdSetupOverhead_ != null ? other.stdSetupOverhead_.Clone() : null;
      curSetupOverhead_ = other.curSetupOverhead_ != null ? other.curSetupOverhead_.Clone() : null;
      trialLaborRate_ = other.trialLaborRate_ != null ? other.trialLaborRate_.Clone() : null;
      trialSetupRate_ = other.trialSetupRate_ != null ? other.trialSetupRate_.Clone() : null;
      trialLaborOverhead_ = other.trialLaborOverhead_ != null ? other.trialLaborOverhead_.Clone() : null;
      trialSetupOverhead_ = other.trialSetupOverhead_ != null ? other.trialSetupOverhead_.Clone() : null;
      CustomerCode = other.CustomerCode;
      OpTimeCalculationMethod = other.OpTimeCalculationMethod;
      LocationNo = other.LocationNo;
      workLevel_ = other.workLevel_;
      CostCenterType = other.CostCenterType;
      workType_ = other.workType_;
      addedValue_ = other.addedValue_ != null ? other.addedValue_.Clone() : null;
      centerType_ = other.centerType_;
      MachineCostCenter = other.MachineCostCenter;
      BusinessClassCode = other.BusinessClassCode;
      capaFlag_ = other.capaFlag_;
      centerLotChar_ = other.centerLotChar_;
      centerNumber_ = other.centerNumber_;
      workMSpec_ = other.workMSpec_;
      seqNo_ = other.seqNo_;
      SystemID = other.SystemID;
      useFlag_ = other.useFlag_;
      MACAddress = other.MACAddress;
      OutSourcingType = other.OutSourcingType;
      measureUnit_ = other.measureUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest Clone() {
      return new UpdateRequest(this);
    }

    /// <summary>Field number for the "costCenter" field.</summary>
    public const int CostCenterFieldNumber = 1;
    private string costCenter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenter {
      get { return costCenter_; }
      set {
        costCenter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "calendarType" field.</summary>
    public const int CalendarTypeFieldNumber = 2;
    private int calendarType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalendarType {
      get { return calendarType_; }
      set {
        calendarType_ = value;
      }
    }

    /// <summary>Field number for the "costCenterName" field.</summary>
    public const int CostCenterNameFieldNumber = 3;
    private string costCenterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenterName {
      get { return costCenterName_; }
      set {
        costCenterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "machines" field.</summary>
    public const int MachinesFieldNumber = 4;
    private int machines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Machines {
      get { return machines_; }
      set {
        machines_ = value;
      }
    }

    /// <summary>Field number for the "effectivePercent" field.</summary>
    public const int EffectivePercentFieldNumber = 5;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal effectivePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal EffectivePercent {
      get { return effectivePercent_; }
      set {
        effectivePercent_ = value;
      }
    }

    /// <summary>Field number for the "stdLaborRate" field.</summary>
    public const int StdLaborRateFieldNumber = 6;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdLaborRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdLaborRate {
      get { return stdLaborRate_; }
      set {
        stdLaborRate_ = value;
      }
    }

    /// <summary>Field number for the "curLaborRate" field.</summary>
    public const int CurLaborRateFieldNumber = 7;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curLaborRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurLaborRate {
      get { return curLaborRate_; }
      set {
        curLaborRate_ = value;
      }
    }

    /// <summary>Field number for the "stdSetupRate" field.</summary>
    public const int StdSetupRateFieldNumber = 8;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdSetupRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdSetupRate {
      get { return stdSetupRate_; }
      set {
        stdSetupRate_ = value;
      }
    }

    /// <summary>Field number for the "curSetupRate" field.</summary>
    public const int CurSetupRateFieldNumber = 9;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curSetupRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurSetupRate {
      get { return curSetupRate_; }
      set {
        curSetupRate_ = value;
      }
    }

    /// <summary>Field number for the "stdLaborOverhead" field.</summary>
    public const int StdLaborOverheadFieldNumber = 10;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdLaborOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdLaborOverhead {
      get { return stdLaborOverhead_; }
      set {
        stdLaborOverhead_ = value;
      }
    }

    /// <summary>Field number for the "curLaborOverhead" field.</summary>
    public const int CurLaborOverheadFieldNumber = 11;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curLaborOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurLaborOverhead {
      get { return curLaborOverhead_; }
      set {
        curLaborOverhead_ = value;
      }
    }

    /// <summary>Field number for the "stdSetupOverhead" field.</summary>
    public const int StdSetupOverheadFieldNumber = 12;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal stdSetupOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal StdSetupOverhead {
      get { return stdSetupOverhead_; }
      set {
        stdSetupOverhead_ = value;
      }
    }

    /// <summary>Field number for the "curSetupOverhead" field.</summary>
    public const int CurSetupOverheadFieldNumber = 13;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal curSetupOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal CurSetupOverhead {
      get { return curSetupOverhead_; }
      set {
        curSetupOverhead_ = value;
      }
    }

    /// <summary>Field number for the "trialLaborRate" field.</summary>
    public const int TrialLaborRateFieldNumber = 14;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialLaborRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialLaborRate {
      get { return trialLaborRate_; }
      set {
        trialLaborRate_ = value;
      }
    }

    /// <summary>Field number for the "trialSetupRate" field.</summary>
    public const int TrialSetupRateFieldNumber = 15;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialSetupRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialSetupRate {
      get { return trialSetupRate_; }
      set {
        trialSetupRate_ = value;
      }
    }

    /// <summary>Field number for the "trialLaborOverhead" field.</summary>
    public const int TrialLaborOverheadFieldNumber = 16;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialLaborOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialLaborOverhead {
      get { return trialLaborOverhead_; }
      set {
        trialLaborOverhead_ = value;
      }
    }

    /// <summary>Field number for the "trialSetupOverhead" field.</summary>
    public const int TrialSetupOverheadFieldNumber = 17;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal trialSetupOverhead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal TrialSetupOverhead {
      get { return trialSetupOverhead_; }
      set {
        trialSetupOverhead_ = value;
      }
    }

    /// <summary>Field number for the "customerCode" field.</summary>
    public const int CustomerCodeFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _single_customerCode_codec = pb::FieldCodec.ForClassWrapper<string>(146);
    private string customerCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomerCode {
      get { return customerCode_; }
      set {
        customerCode_ = value;
      }
    }


    /// <summary>Field number for the "opTimeCalculationMethod" field.</summary>
    public const int OpTimeCalculationMethodFieldNumber = 19;
    private static readonly pb::FieldCodec<int?> _single_opTimeCalculationMethod_codec = pb::FieldCodec.ForStructWrapper<int>(154);
    private int? opTimeCalculationMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? OpTimeCalculationMethod {
      get { return opTimeCalculationMethod_; }
      set {
        opTimeCalculationMethod_ = value;
      }
    }


    /// <summary>Field number for the "locationNo" field.</summary>
    public const int LocationNoFieldNumber = 20;
    private static readonly pb::FieldCodec<int?> _single_locationNo_codec = pb::FieldCodec.ForStructWrapper<int>(162);
    private int? locationNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? LocationNo {
      get { return locationNo_; }
      set {
        locationNo_ = value;
      }
    }


    /// <summary>Field number for the "workLevel" field.</summary>
    public const int WorkLevelFieldNumber = 21;
    private int workLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkLevel {
      get { return workLevel_; }
      set {
        workLevel_ = value;
      }
    }

    /// <summary>Field number for the "costCenterType" field.</summary>
    public const int CostCenterTypeFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _single_costCenterType_codec = pb::FieldCodec.ForClassWrapper<string>(178);
    private string costCenterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenterType {
      get { return costCenterType_; }
      set {
        costCenterType_ = value;
      }
    }


    /// <summary>Field number for the "workType" field.</summary>
    public const int WorkTypeFieldNumber = 23;
    private int workType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkType {
      get { return workType_; }
      set {
        workType_ = value;
      }
    }

    /// <summary>Field number for the "addedValue" field.</summary>
    public const int AddedValueFieldNumber = 24;
    private global::HaccpManager.CostCentersProtos.GrpcDecimal addedValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaccpManager.CostCentersProtos.GrpcDecimal AddedValue {
      get { return addedValue_; }
      set {
        addedValue_ = value;
      }
    }

    /// <summary>Field number for the "centerType" field.</summary>
    public const int CenterTypeFieldNumber = 25;
    private int centerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterType {
      get { return centerType_; }
      set {
        centerType_ = value;
      }
    }

    /// <summary>Field number for the "machineCostCenter" field.</summary>
    public const int MachineCostCenterFieldNumber = 26;
    private static readonly pb::FieldCodec<string> _single_machineCostCenter_codec = pb::FieldCodec.ForClassWrapper<string>(210);
    private string machineCostCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineCostCenter {
      get { return machineCostCenter_; }
      set {
        machineCostCenter_ = value;
      }
    }


    /// <summary>Field number for the "businessClassCode" field.</summary>
    public const int BusinessClassCodeFieldNumber = 27;
    private static readonly pb::FieldCodec<int?> _single_businessClassCode_codec = pb::FieldCodec.ForStructWrapper<int>(218);
    private int? businessClassCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BusinessClassCode {
      get { return businessClassCode_; }
      set {
        businessClassCode_ = value;
      }
    }


    /// <summary>Field number for the "capaFlag" field.</summary>
    public const int CapaFlagFieldNumber = 28;
    private int capaFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CapaFlag {
      get { return capaFlag_; }
      set {
        capaFlag_ = value;
      }
    }

    /// <summary>Field number for the "centerLotChar" field.</summary>
    public const int CenterLotCharFieldNumber = 29;
    private string centerLotChar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CenterLotChar {
      get { return centerLotChar_; }
      set {
        centerLotChar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "centerNumber" field.</summary>
    public const int CenterNumberFieldNumber = 30;
    private int centerNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterNumber {
      get { return centerNumber_; }
      set {
        centerNumber_ = value;
      }
    }

    /// <summary>Field number for the "workMSpec" field.</summary>
    public const int WorkMSpecFieldNumber = 31;
    private string workMSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkMSpec {
      get { return workMSpec_; }
      set {
        workMSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seqNo" field.</summary>
    public const int SeqNoFieldNumber = 32;
    private int seqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    /// <summary>Field number for the "systemID" field.</summary>
    public const int SystemIDFieldNumber = 33;
    private static readonly pb::FieldCodec<int?> _single_systemID_codec = pb::FieldCodec.ForStructWrapper<int>(266);
    private int? systemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? SystemID {
      get { return systemID_; }
      set {
        systemID_ = value;
      }
    }


    /// <summary>Field number for the "useFlag" field.</summary>
    public const int UseFlagFieldNumber = 34;
    private int useFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseFlag {
      get { return useFlag_; }
      set {
        useFlag_ = value;
      }
    }

    /// <summary>Field number for the "mACAddress" field.</summary>
    public const int MACAddressFieldNumber = 35;
    private static readonly pb::FieldCodec<string> _single_mACAddress_codec = pb::FieldCodec.ForClassWrapper<string>(282);
    private string mACAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MACAddress {
      get { return mACAddress_; }
      set {
        mACAddress_ = value;
      }
    }


    /// <summary>Field number for the "outSourcingType" field.</summary>
    public const int OutSourcingTypeFieldNumber = 36;
    private static readonly pb::FieldCodec<int?> _single_outSourcingType_codec = pb::FieldCodec.ForStructWrapper<int>(290);
    private int? outSourcingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? OutSourcingType {
      get { return outSourcingType_; }
      set {
        outSourcingType_ = value;
      }
    }


    /// <summary>Field number for the "measureUnit" field.</summary>
    public const int MeasureUnitFieldNumber = 37;
    private string measureUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasureUnit {
      get { return measureUnit_; }
      set {
        measureUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostCenter != other.CostCenter) return false;
      if (CalendarType != other.CalendarType) return false;
      if (CostCenterName != other.CostCenterName) return false;
      if (Machines != other.Machines) return false;
      if (!object.Equals(EffectivePercent, other.EffectivePercent)) return false;
      if (!object.Equals(StdLaborRate, other.StdLaborRate)) return false;
      if (!object.Equals(CurLaborRate, other.CurLaborRate)) return false;
      if (!object.Equals(StdSetupRate, other.StdSetupRate)) return false;
      if (!object.Equals(CurSetupRate, other.CurSetupRate)) return false;
      if (!object.Equals(StdLaborOverhead, other.StdLaborOverhead)) return false;
      if (!object.Equals(CurLaborOverhead, other.CurLaborOverhead)) return false;
      if (!object.Equals(StdSetupOverhead, other.StdSetupOverhead)) return false;
      if (!object.Equals(CurSetupOverhead, other.CurSetupOverhead)) return false;
      if (!object.Equals(TrialLaborRate, other.TrialLaborRate)) return false;
      if (!object.Equals(TrialSetupRate, other.TrialSetupRate)) return false;
      if (!object.Equals(TrialLaborOverhead, other.TrialLaborOverhead)) return false;
      if (!object.Equals(TrialSetupOverhead, other.TrialSetupOverhead)) return false;
      if (CustomerCode != other.CustomerCode) return false;
      if (OpTimeCalculationMethod != other.OpTimeCalculationMethod) return false;
      if (LocationNo != other.LocationNo) return false;
      if (WorkLevel != other.WorkLevel) return false;
      if (CostCenterType != other.CostCenterType) return false;
      if (WorkType != other.WorkType) return false;
      if (!object.Equals(AddedValue, other.AddedValue)) return false;
      if (CenterType != other.CenterType) return false;
      if (MachineCostCenter != other.MachineCostCenter) return false;
      if (BusinessClassCode != other.BusinessClassCode) return false;
      if (CapaFlag != other.CapaFlag) return false;
      if (CenterLotChar != other.CenterLotChar) return false;
      if (CenterNumber != other.CenterNumber) return false;
      if (WorkMSpec != other.WorkMSpec) return false;
      if (SeqNo != other.SeqNo) return false;
      if (SystemID != other.SystemID) return false;
      if (UseFlag != other.UseFlag) return false;
      if (MACAddress != other.MACAddress) return false;
      if (OutSourcingType != other.OutSourcingType) return false;
      if (MeasureUnit != other.MeasureUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostCenter.Length != 0) hash ^= CostCenter.GetHashCode();
      if (CalendarType != 0) hash ^= CalendarType.GetHashCode();
      if (CostCenterName.Length != 0) hash ^= CostCenterName.GetHashCode();
      if (Machines != 0) hash ^= Machines.GetHashCode();
      if (effectivePercent_ != null) hash ^= EffectivePercent.GetHashCode();
      if (stdLaborRate_ != null) hash ^= StdLaborRate.GetHashCode();
      if (curLaborRate_ != null) hash ^= CurLaborRate.GetHashCode();
      if (stdSetupRate_ != null) hash ^= StdSetupRate.GetHashCode();
      if (curSetupRate_ != null) hash ^= CurSetupRate.GetHashCode();
      if (stdLaborOverhead_ != null) hash ^= StdLaborOverhead.GetHashCode();
      if (curLaborOverhead_ != null) hash ^= CurLaborOverhead.GetHashCode();
      if (stdSetupOverhead_ != null) hash ^= StdSetupOverhead.GetHashCode();
      if (curSetupOverhead_ != null) hash ^= CurSetupOverhead.GetHashCode();
      if (trialLaborRate_ != null) hash ^= TrialLaborRate.GetHashCode();
      if (trialSetupRate_ != null) hash ^= TrialSetupRate.GetHashCode();
      if (trialLaborOverhead_ != null) hash ^= TrialLaborOverhead.GetHashCode();
      if (trialSetupOverhead_ != null) hash ^= TrialSetupOverhead.GetHashCode();
      if (customerCode_ != null) hash ^= CustomerCode.GetHashCode();
      if (opTimeCalculationMethod_ != null) hash ^= OpTimeCalculationMethod.GetHashCode();
      if (locationNo_ != null) hash ^= LocationNo.GetHashCode();
      if (WorkLevel != 0) hash ^= WorkLevel.GetHashCode();
      if (costCenterType_ != null) hash ^= CostCenterType.GetHashCode();
      if (WorkType != 0) hash ^= WorkType.GetHashCode();
      if (addedValue_ != null) hash ^= AddedValue.GetHashCode();
      if (CenterType != 0) hash ^= CenterType.GetHashCode();
      if (machineCostCenter_ != null) hash ^= MachineCostCenter.GetHashCode();
      if (businessClassCode_ != null) hash ^= BusinessClassCode.GetHashCode();
      if (CapaFlag != 0) hash ^= CapaFlag.GetHashCode();
      if (CenterLotChar.Length != 0) hash ^= CenterLotChar.GetHashCode();
      if (CenterNumber != 0) hash ^= CenterNumber.GetHashCode();
      if (WorkMSpec.Length != 0) hash ^= WorkMSpec.GetHashCode();
      if (SeqNo != 0) hash ^= SeqNo.GetHashCode();
      if (systemID_ != null) hash ^= SystemID.GetHashCode();
      if (UseFlag != 0) hash ^= UseFlag.GetHashCode();
      if (mACAddress_ != null) hash ^= MACAddress.GetHashCode();
      if (outSourcingType_ != null) hash ^= OutSourcingType.GetHashCode();
      if (MeasureUnit.Length != 0) hash ^= MeasureUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostCenter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CostCenter);
      }
      if (CalendarType != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(CalendarType);
      }
      if (CostCenterName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CostCenterName);
      }
      if (Machines != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Machines);
      }
      if (effectivePercent_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EffectivePercent);
      }
      if (stdLaborRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StdLaborRate);
      }
      if (curLaborRate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CurLaborRate);
      }
      if (stdSetupRate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StdSetupRate);
      }
      if (curSetupRate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CurSetupRate);
      }
      if (stdLaborOverhead_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(StdLaborOverhead);
      }
      if (curLaborOverhead_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CurLaborOverhead);
      }
      if (stdSetupOverhead_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(StdSetupOverhead);
      }
      if (curSetupOverhead_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CurSetupOverhead);
      }
      if (trialLaborRate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TrialLaborRate);
      }
      if (trialSetupRate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TrialSetupRate);
      }
      if (trialLaborOverhead_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(TrialLaborOverhead);
      }
      if (trialSetupOverhead_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TrialSetupOverhead);
      }
      if (customerCode_ != null) {
        _single_customerCode_codec.WriteTagAndValue(output, CustomerCode);
      }
      if (opTimeCalculationMethod_ != null) {
        _single_opTimeCalculationMethod_codec.WriteTagAndValue(output, OpTimeCalculationMethod);
      }
      if (locationNo_ != null) {
        _single_locationNo_codec.WriteTagAndValue(output, LocationNo);
      }
      if (WorkLevel != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(WorkLevel);
      }
      if (costCenterType_ != null) {
        _single_costCenterType_codec.WriteTagAndValue(output, CostCenterType);
      }
      if (WorkType != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(WorkType);
      }
      if (addedValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AddedValue);
      }
      if (CenterType != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(CenterType);
      }
      if (machineCostCenter_ != null) {
        _single_machineCostCenter_codec.WriteTagAndValue(output, MachineCostCenter);
      }
      if (businessClassCode_ != null) {
        _single_businessClassCode_codec.WriteTagAndValue(output, BusinessClassCode);
      }
      if (CapaFlag != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(CapaFlag);
      }
      if (CenterLotChar.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(CenterLotChar);
      }
      if (CenterNumber != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(CenterNumber);
      }
      if (WorkMSpec.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WorkMSpec);
      }
      if (SeqNo != 0) {
        output.WriteRawTag(128, 2);
        output.WriteSInt32(SeqNo);
      }
      if (systemID_ != null) {
        _single_systemID_codec.WriteTagAndValue(output, SystemID);
      }
      if (UseFlag != 0) {
        output.WriteRawTag(144, 2);
        output.WriteSInt32(UseFlag);
      }
      if (mACAddress_ != null) {
        _single_mACAddress_codec.WriteTagAndValue(output, MACAddress);
      }
      if (outSourcingType_ != null) {
        _single_outSourcingType_codec.WriteTagAndValue(output, OutSourcingType);
      }
      if (MeasureUnit.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(MeasureUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostCenter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostCenter);
      }
      if (CalendarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CalendarType);
      }
      if (CostCenterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostCenterName);
      }
      if (Machines != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Machines);
      }
      if (effectivePercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectivePercent);
      }
      if (stdLaborRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdLaborRate);
      }
      if (curLaborRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurLaborRate);
      }
      if (stdSetupRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdSetupRate);
      }
      if (curSetupRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurSetupRate);
      }
      if (stdLaborOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdLaborOverhead);
      }
      if (curLaborOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurLaborOverhead);
      }
      if (stdSetupOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StdSetupOverhead);
      }
      if (curSetupOverhead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurSetupOverhead);
      }
      if (trialLaborRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrialLaborRate);
      }
      if (trialSetupRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrialSetupRate);
      }
      if (trialLaborOverhead_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrialLaborOverhead);
      }
      if (trialSetupOverhead_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrialSetupOverhead);
      }
      if (customerCode_ != null) {
        size += _single_customerCode_codec.CalculateSizeWithTag(CustomerCode);
      }
      if (opTimeCalculationMethod_ != null) {
        size += _single_opTimeCalculationMethod_codec.CalculateSizeWithTag(OpTimeCalculationMethod);
      }
      if (locationNo_ != null) {
        size += _single_locationNo_codec.CalculateSizeWithTag(LocationNo);
      }
      if (WorkLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(WorkLevel);
      }
      if (costCenterType_ != null) {
        size += _single_costCenterType_codec.CalculateSizeWithTag(CostCenterType);
      }
      if (WorkType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(WorkType);
      }
      if (addedValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddedValue);
      }
      if (CenterType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CenterType);
      }
      if (machineCostCenter_ != null) {
        size += _single_machineCostCenter_codec.CalculateSizeWithTag(MachineCostCenter);
      }
      if (businessClassCode_ != null) {
        size += _single_businessClassCode_codec.CalculateSizeWithTag(BusinessClassCode);
      }
      if (CapaFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CapaFlag);
      }
      if (CenterLotChar.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CenterLotChar);
      }
      if (CenterNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CenterNumber);
      }
      if (WorkMSpec.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WorkMSpec);
      }
      if (SeqNo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SeqNo);
      }
      if (systemID_ != null) {
        size += _single_systemID_codec.CalculateSizeWithTag(SystemID);
      }
      if (UseFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(UseFlag);
      }
      if (mACAddress_ != null) {
        size += _single_mACAddress_codec.CalculateSizeWithTag(MACAddress);
      }
      if (outSourcingType_ != null) {
        size += _single_outSourcingType_codec.CalculateSizeWithTag(OutSourcingType);
      }
      if (MeasureUnit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeasureUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CostCenter.Length != 0) {
        CostCenter = other.CostCenter;
      }
      if (other.CalendarType != 0) {
        CalendarType = other.CalendarType;
      }
      if (other.CostCenterName.Length != 0) {
        CostCenterName = other.CostCenterName;
      }
      if (other.Machines != 0) {
        Machines = other.Machines;
      }
      if (other.effectivePercent_ != null) {
        if (effectivePercent_ == null) {
          EffectivePercent = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        EffectivePercent.MergeFrom(other.EffectivePercent);
      }
      if (other.stdLaborRate_ != null) {
        if (stdLaborRate_ == null) {
          StdLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdLaborRate.MergeFrom(other.StdLaborRate);
      }
      if (other.curLaborRate_ != null) {
        if (curLaborRate_ == null) {
          CurLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurLaborRate.MergeFrom(other.CurLaborRate);
      }
      if (other.stdSetupRate_ != null) {
        if (stdSetupRate_ == null) {
          StdSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdSetupRate.MergeFrom(other.StdSetupRate);
      }
      if (other.curSetupRate_ != null) {
        if (curSetupRate_ == null) {
          CurSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurSetupRate.MergeFrom(other.CurSetupRate);
      }
      if (other.stdLaborOverhead_ != null) {
        if (stdLaborOverhead_ == null) {
          StdLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdLaborOverhead.MergeFrom(other.StdLaborOverhead);
      }
      if (other.curLaborOverhead_ != null) {
        if (curLaborOverhead_ == null) {
          CurLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurLaborOverhead.MergeFrom(other.CurLaborOverhead);
      }
      if (other.stdSetupOverhead_ != null) {
        if (stdSetupOverhead_ == null) {
          StdSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        StdSetupOverhead.MergeFrom(other.StdSetupOverhead);
      }
      if (other.curSetupOverhead_ != null) {
        if (curSetupOverhead_ == null) {
          CurSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        CurSetupOverhead.MergeFrom(other.CurSetupOverhead);
      }
      if (other.trialLaborRate_ != null) {
        if (trialLaborRate_ == null) {
          TrialLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialLaborRate.MergeFrom(other.TrialLaborRate);
      }
      if (other.trialSetupRate_ != null) {
        if (trialSetupRate_ == null) {
          TrialSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialSetupRate.MergeFrom(other.TrialSetupRate);
      }
      if (other.trialLaborOverhead_ != null) {
        if (trialLaborOverhead_ == null) {
          TrialLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialLaborOverhead.MergeFrom(other.TrialLaborOverhead);
      }
      if (other.trialSetupOverhead_ != null) {
        if (trialSetupOverhead_ == null) {
          TrialSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        TrialSetupOverhead.MergeFrom(other.TrialSetupOverhead);
      }
      if (other.customerCode_ != null) {
        if (customerCode_ == null || other.CustomerCode != "") {
          CustomerCode = other.CustomerCode;
        }
      }
      if (other.opTimeCalculationMethod_ != null) {
        if (opTimeCalculationMethod_ == null || other.OpTimeCalculationMethod != 0) {
          OpTimeCalculationMethod = other.OpTimeCalculationMethod;
        }
      }
      if (other.locationNo_ != null) {
        if (locationNo_ == null || other.LocationNo != 0) {
          LocationNo = other.LocationNo;
        }
      }
      if (other.WorkLevel != 0) {
        WorkLevel = other.WorkLevel;
      }
      if (other.costCenterType_ != null) {
        if (costCenterType_ == null || other.CostCenterType != "") {
          CostCenterType = other.CostCenterType;
        }
      }
      if (other.WorkType != 0) {
        WorkType = other.WorkType;
      }
      if (other.addedValue_ != null) {
        if (addedValue_ == null) {
          AddedValue = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
        }
        AddedValue.MergeFrom(other.AddedValue);
      }
      if (other.CenterType != 0) {
        CenterType = other.CenterType;
      }
      if (other.machineCostCenter_ != null) {
        if (machineCostCenter_ == null || other.MachineCostCenter != "") {
          MachineCostCenter = other.MachineCostCenter;
        }
      }
      if (other.businessClassCode_ != null) {
        if (businessClassCode_ == null || other.BusinessClassCode != 0) {
          BusinessClassCode = other.BusinessClassCode;
        }
      }
      if (other.CapaFlag != 0) {
        CapaFlag = other.CapaFlag;
      }
      if (other.CenterLotChar.Length != 0) {
        CenterLotChar = other.CenterLotChar;
      }
      if (other.CenterNumber != 0) {
        CenterNumber = other.CenterNumber;
      }
      if (other.WorkMSpec.Length != 0) {
        WorkMSpec = other.WorkMSpec;
      }
      if (other.SeqNo != 0) {
        SeqNo = other.SeqNo;
      }
      if (other.systemID_ != null) {
        if (systemID_ == null || other.SystemID != 0) {
          SystemID = other.SystemID;
        }
      }
      if (other.UseFlag != 0) {
        UseFlag = other.UseFlag;
      }
      if (other.mACAddress_ != null) {
        if (mACAddress_ == null || other.MACAddress != "") {
          MACAddress = other.MACAddress;
        }
      }
      if (other.outSourcingType_ != null) {
        if (outSourcingType_ == null || other.OutSourcingType != 0) {
          OutSourcingType = other.OutSourcingType;
        }
      }
      if (other.MeasureUnit.Length != 0) {
        MeasureUnit = other.MeasureUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CostCenter = input.ReadString();
            break;
          }
          case 16: {
            CalendarType = input.ReadSInt32();
            break;
          }
          case 26: {
            CostCenterName = input.ReadString();
            break;
          }
          case 32: {
            Machines = input.ReadSInt32();
            break;
          }
          case 42: {
            if (effectivePercent_ == null) {
              EffectivePercent = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(EffectivePercent);
            break;
          }
          case 50: {
            if (stdLaborRate_ == null) {
              StdLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdLaborRate);
            break;
          }
          case 58: {
            if (curLaborRate_ == null) {
              CurLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurLaborRate);
            break;
          }
          case 66: {
            if (stdSetupRate_ == null) {
              StdSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdSetupRate);
            break;
          }
          case 74: {
            if (curSetupRate_ == null) {
              CurSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurSetupRate);
            break;
          }
          case 82: {
            if (stdLaborOverhead_ == null) {
              StdLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdLaborOverhead);
            break;
          }
          case 90: {
            if (curLaborOverhead_ == null) {
              CurLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurLaborOverhead);
            break;
          }
          case 98: {
            if (stdSetupOverhead_ == null) {
              StdSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(StdSetupOverhead);
            break;
          }
          case 106: {
            if (curSetupOverhead_ == null) {
              CurSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(CurSetupOverhead);
            break;
          }
          case 114: {
            if (trialLaborRate_ == null) {
              TrialLaborRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialLaborRate);
            break;
          }
          case 122: {
            if (trialSetupRate_ == null) {
              TrialSetupRate = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialSetupRate);
            break;
          }
          case 130: {
            if (trialLaborOverhead_ == null) {
              TrialLaborOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialLaborOverhead);
            break;
          }
          case 138: {
            if (trialSetupOverhead_ == null) {
              TrialSetupOverhead = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(TrialSetupOverhead);
            break;
          }
          case 146: {
            string value = _single_customerCode_codec.Read(input);
            if (customerCode_ == null || value != "") {
              CustomerCode = value;
            }
            break;
          }
          case 154: {
            int? value = _single_opTimeCalculationMethod_codec.Read(input);
            if (opTimeCalculationMethod_ == null || value != 0) {
              OpTimeCalculationMethod = value;
            }
            break;
          }
          case 162: {
            int? value = _single_locationNo_codec.Read(input);
            if (locationNo_ == null || value != 0) {
              LocationNo = value;
            }
            break;
          }
          case 168: {
            WorkLevel = input.ReadSInt32();
            break;
          }
          case 178: {
            string value = _single_costCenterType_codec.Read(input);
            if (costCenterType_ == null || value != "") {
              CostCenterType = value;
            }
            break;
          }
          case 184: {
            WorkType = input.ReadSInt32();
            break;
          }
          case 194: {
            if (addedValue_ == null) {
              AddedValue = new global::HaccpManager.CostCentersProtos.GrpcDecimal();
            }
            input.ReadMessage(AddedValue);
            break;
          }
          case 200: {
            CenterType = input.ReadSInt32();
            break;
          }
          case 210: {
            string value = _single_machineCostCenter_codec.Read(input);
            if (machineCostCenter_ == null || value != "") {
              MachineCostCenter = value;
            }
            break;
          }
          case 218: {
            int? value = _single_businessClassCode_codec.Read(input);
            if (businessClassCode_ == null || value != 0) {
              BusinessClassCode = value;
            }
            break;
          }
          case 224: {
            CapaFlag = input.ReadSInt32();
            break;
          }
          case 234: {
            CenterLotChar = input.ReadString();
            break;
          }
          case 240: {
            CenterNumber = input.ReadSInt32();
            break;
          }
          case 250: {
            WorkMSpec = input.ReadString();
            break;
          }
          case 256: {
            SeqNo = input.ReadSInt32();
            break;
          }
          case 266: {
            int? value = _single_systemID_codec.Read(input);
            if (systemID_ == null || value != 0) {
              SystemID = value;
            }
            break;
          }
          case 272: {
            UseFlag = input.ReadSInt32();
            break;
          }
          case 282: {
            string value = _single_mACAddress_codec.Read(input);
            if (mACAddress_ == null || value != "") {
              MACAddress = value;
            }
            break;
          }
          case 290: {
            int? value = _single_outSourcingType_codec.Read(input);
            if (outSourcingType_ == null || value != 0) {
              OutSourcingType = value;
            }
            break;
          }
          case 298: {
            MeasureUnit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateResponse : pb::IMessage<UpdateResponse> {
    private static readonly pb::MessageParser<UpdateResponse> _parser = new pb::MessageParser<UpdateResponse>(() => new UpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse(UpdateResponse other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse Clone() {
      return new UpdateResponse(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      costCenter_ = other.costCenter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "costCenter" field.</summary>
    public const int CostCenterFieldNumber = 1;
    private string costCenter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostCenter {
      get { return costCenter_; }
      set {
        costCenter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostCenter != other.CostCenter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostCenter.Length != 0) hash ^= CostCenter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostCenter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CostCenter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostCenter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostCenter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.CostCenter.Length != 0) {
        CostCenter = other.CostCenter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CostCenter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaccpManager.CostCentersProtos.CostCentersReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
